{
	"openapi": "3.0.0",
	"info": {
		"title": "sevDesk API",
		"description": "<b>Contact:</b> To contact our support click <a href='https://landing.sevdesk.de/service-support-center-technik'>here</a><br><br> \r\n# General information\r\nWelcome to our API!<br>\r\nsevDesk offers you the possibility of retrieving data using an interface, namely the sevDesk API, and making changes without having to use the web UI. The sevDesk interface is a REST-Full API. All sevDesk data and functions that are used in the web UI can also be controlled through the API.\r\n\n# Cross-Origin Resource Sharing\r\nThis API features Cross-Origin Resource Sharing (CORS).<br>\r\nIt enables cross-domain communication from the browser.<br>\r\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\r\n\r\n# Embedding resources\r\nWhen retrieving resources by using this API, you might encounter nested resources in the resources you requested.<br>\r\nFor example, an invoice always contains a contact, of which you can see the ID and the object name.<br>\r\nThis API gives you the possibility to embed these resources completely into the resources you originally requested.<br>\r\nTaking our invoice example, this would mean, that you would not only see the ID and object name of a contact, but rather the complete contact resource.\r\n\r\nTo embed resources, all you need to do is to add the query parameter 'embed' to your GET request.<br>\r\nAs values, you can provide the name of the nested resource.<br>\r\nMultiple nested resources are also possible by providing multiple names, separated by a comma.\r\n \n# Authentication and Authorization\n The sevDesk API uses a token authentication to authorize calls. For this purpose every sevDesk administrator has one API token, which is a <b>hexadecimal string</b> containing <b>32 characters</b>. The following clip shows where you can find the API token if this is your first time with our API.<br><br> <video src='OpenAPI/img/findingTheApiToken.mp4' controls width='640' height='360'> Ihr Browser kann dieses Video nicht wiedergeben.<br/> Dieses Video zeigt wie sie Ihr sevDesk API Token finden. </video> <br> The token will be needed in every request that you want to send and needs to be attached to the request url as a <b>Query Parameter</b><br> or provided as a value of an <b>Authorization Header</b>.<br> For security reasons, we suggest putting the API Token in the Authorization Header and not in the query string.<br> However, in the request examples in this documentation, we will keep it in the query string, as it is easier for you to copy them and try them yourself.<br> The following url is an example that shows where your token needs to be placed as a query parameter.<br> In this case, we used some random API token. <ul> <li><span>ht</span>tps://my.sevdesk.de/api/v1/Contact?token=<span style='color:red'>b7794de0085f5cd00560f160f290af38</span></li> </ul> The next example shows the token in the Authorization Header. <ul> <li>\"Authorization\" :<span style='color:red'>\"b7794de0085f5cd00560f160f290af38\"</span></li> </ul> The api tokens have an infinite lifetime and, in other words, exist as long as the sevDesk user exists.<br> For this reason, the user should <b>NEVER</b> be deleted.<br> If really necessary, it is advisable to save the api token as we will <b>NOT</b> be able to retrieve it afterwards!<br> It is also possible to generate a new API token, for example, if you want to prevent the usage of your sevDesk account by other people who got your current API token.<br> To achieve this, you just need to click on the \"generate new\" symbol to the right of your token and confirm it with your password. \n# API News\n To never miss API news and updates again, subscribe to our <b>free API newsletter</b> and get all relevant information to keep your sevDesk software running smoothly. To subscribe, simply click <a href = 'https://landing.sevdesk.de/api-newsletter'><b>here</b></a> and confirm the email address to which we may send all updates relevant to you. \n# API Requests\n In our case, REST API requests need to be build by combining the following components. <table> <tr> <th><b>Component</b></th> <th><b>Description</b></th> </tr> <tr> <td>HTTP-Methods</td> <td> <ul> <li>GET (retrieve a resource)</li> <li>POST (create a resource)</li> <li>PUT (update a resource)</li> <li>DELETE (delete a resource)</li> </ul> </td> </tr> <tr> <td>URL of the API</td> <td><span style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span></td> </tr> <tr> <td>URI of the resource</td> <td>The resource to query.<br>For example contacts in sevDesk:<br><br> <span style='color:red'>/Contact</span><br><br> Which will result in the following complete URL:<br><br> <span style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span><span style='color:red'>/Contact</span> </td> </tr> <tr> <td>Query parameters</td> <td>Are attached by using the connectives <b>?</b> and <b>&</b> in the URL.<br></td> </tr> <tr> <td>Request headers</td> <td>Typical request headers are for example:<br> <div> <br> <ul> <li>Content-type</li> <li>Authorization</li> <li>Accept-Encoding</li> <li>User-Agent</li> <li>...</li> </ul> </div> </td> </tr> <tr> <td>Request body</td> <td>Mostly required in POST and PUT requests.<br> Often the request body contains json, in our case, it also accepts url-encoded data. </td> </tr> </table><br> <span style='color:red'>Note</span>: please pass a meaningful entry at the header \"User-Agent\". If the \"User-Agent\" is set meaningfully, we can offer better support in case of queries from customers.<br> An example how such a \"User-Agent\" can look like: \"Integration-name by abc\". <br><br> This is a sample request for retrieving existing contacts in sevDesk using curl:<br><br> <img src='OpenAPI/img/GETRequest.PNG' alt='Get Request' height='150'><br><br> As you can see, the request contains all the components mentioned above.<br> It's HTTP method is GET, it has a correct endpoint (<span style='color: #2aa198'>ht</span><span style='color: #2aa198'>tps://my.sevdesk.de/api/v1</span><span style='color:red'>/Contact</span>), query parameters like <b>token</b> and additional <b>header</b> information!<br><br> <b>Query Parameters</b><br><br> As you might have seen in the sample request above, there are several other parameters besides \"token\", located in the url.<br> Those are mostly optional but prove to be very useful for a lot of requests as they can limit, extend, sort or filter the data you will get as a response.<br><br> These are the three most used query parameter for the sevDesk API. <table> <tr> <th><b>Parameter</b></th> <th><b>Description</b></th> </tr> <tr> <td>limit</td> <td>Limits the number of entries that are returned.<br> Most useful in GET requests which will most likely deliver big sets of data like country or currency lists.<br> In this case, you can bypass the default limitation on returned entries by providing a high number. </td> </tr> <tr> <td>offset</td> <td>Specifies a certain offset for the data that will be returned.<br> As an example, you can specify \"offset=2\" if you want all entries except for the first two.</td> </tr> <tr> <td>embed</td> <td>Will extend some of the returned data.<br> A brief example can be found below.</td> </tr> </table> This is an example for the usage of the embed parameter.<br> The following first request will return all company contact entries in sevDesk up to a limit of 100 without any additional information and no offset.<br><br> <img src='OpenAPI/img/ContactQueryWithoutEmbed.PNG' width='900' height='850'><br><br> Now have a look at the category attribute located in the response.<br> Naturally, it just contains the id and the object name of the object but no further information.<br> We will now use the parameter embed with the value \"category\".<br><br> <img src='OpenAPI/img/ContactQueryWithEmbed.PNG' width='900' height='850'><br><br> As you can see, the category object is now extended and shows all the attributes and their corresponding values.<br><br> There are lot of other query parameters that can be used to filter the returned data for objects that match a certain pattern, however, those will not be mentioned here and instead can be found at the detail documentation of the most used API endpoints like contact, invoice or voucher.<br><br> <b>Request Headers</b><br><br> The HTTP request (response) headers allow the client as well as the server to pass additional information with the request.<br> They transfer the parameters and arguments which are important for transmitting data over HTTP.<br> Three headers which are useful / necessary when using the sevDesk API are \"Authorization, \"Accept\" and \"Content-type\".<br> Underneath is a brief description of why and how they should be used.<br><br> <b>Authorization</b><br><br> Can be used if you want to provide your API token in the header instead of having it in the url. <ul> <li>Authorization:<span style='color:red'>yourApiToken</span></li> </ul> <b>Accept</b><br><br> Specifies the format of the response.<br> Required for operations with a response body. <ul> <li>Accept:application/<span style='color:red'>format</span> </li> </ul> In our case, <code><span style='color:red'>format</span></code> could be replaced with <code>json</code> or <code>xml</code><br><br> <b>Content-type</b><br><br> Specifies which format is used in the request.<br> Is required for operations with a request body. <ul> <li>Content-type:application/<span style='color:red'>format</span></li> </ul> In our case,<code><span style='color:red'>format</span></code>could be replaced with <code>json</code> or <code>x-www-form-urlencoded</code> <br><br><b>API Responses</b><br><br> HTTP status codes<br> When calling the sevDesk API it is very likely that you will get a HTTP status code in the response.<br> Some API calls will also return JSON response bodies which will contain information about the resource.<br> Each status code which is returned will either be a <b>success</b> code or an <b>error</b> code.<br><br> Success codes <table> <tr> <th><b>Status code</b></th> <th><b>Description</b></th> </tr> <tr> <td><code>200 OK</code></td> <td>The request was successful</td> </tr> <tr> <td><code>201 Created</code></td> <td>Most likely to be found in the response of a <b>POST</b> request.<br> This code indicates that the desired resource was successfully created.</td> </tr> </table> <br>Error codes <table> <tr> <th><b>Status code</b></th> <th><b>Description</b></th> </tr> <tr> <td><code>400 Bad request</code></td> <td>The request you sent is most likely syntactically incorrect.<br> You should check if the parameters in the request body or the url are correct.</td> </tr> <tr> <td><code>401 Unauthorized</code></td> <td>The authentication failed.<br> Most likely caused by a missing or wrong API token.</td> </tr> <tr> <td><code>403 Forbidden</code></td> <td>You do not have the permission the access the resource which is requested.</td> </tr> <tr> <td><code>404 Not found</code></td> <td>The resource you specified does not exist.</td> </tr> <tr> <td><code>500 Internal server error</code></td> <td>An internal server error has occurred.<br> Normally this means that something went wrong on our side.<br> However, sometimes this error will appear if we missed to catch an error which is normally a 400 status code! </td> </tr> </table> \n# Your First Request\n After reading the introduction to our API, you should now be able to make your first call.<br> For testing our API, we would always recommend to create a trial account for sevDesk to prevent unwanted changes to your main account.<br> A trial account will be in the highest tariff (materials management), so every sevDesk function can be tested! <br><br>To start testing we would recommend one of the following tools: <ul> <li><a href='https://www.getpostman.com/'>Postman</a></li> <li><a href='https://curl.haxx.se/download.html'>cURL</a></li> </ul> This example will illustrate your first request, which is creating a new Contact in sevDesk.<br> <ol> <li>Download <a href='https://www.getpostman.com/'><b>Postman</b></a> for your desired system and start the application</li> <li>Enter <span><b>ht</span>tps://my.sevdesk.de/api/v1/Contact</b> as the url</li> <li>Use the connective <b>?</b> to append <b>token=</b> to the end of the url, or create an authorization header. Insert your API token as the value</li> <li>For this test, select <b>POST</b> as the HTTP method</li> <li>Go to <b>Headers</b> and enter the key-value pair <b>Content-type</b> + <b>application/x-www-form-urlencoded</b><br> As an alternative, you can just go to <b>Body</b> and select <b>x-www-form-urlencoded</b></li> <li>Now go to <b>Body</b> (if you are not there yet) and enter the key-value pairs as shown in the following picture<br><br> <img src='OpenAPI/img/FirstRequestPostman.PNG' width='900'><br><br></li> <li>Click on <b>Send</b>. Your response should now look like this:<br><br> <img src='OpenAPI/img/FirstRequestResponse.PNG' width='900'></li> </ol> As you can see, a successful response in this case returns a JSON-formatted response body containing the contact you just created.<br> For keeping it simple, this was only a minimal example of creating a contact.<br> There are however numerous combinations of parameters that you can provide which add information to your contact.",
		"version": "2.0.0",
		"x-logo": {
			"backgroundColor": "#263241",
			"altText": "sevDesk Logo",
			"url": "https://my.sevdesk.de/img/logos/1_100.png"
		}
	},
	"servers": [
		{
			"url": "https://my.sevdesk.de/api/v1",
			"description": "Our main application instance which most of our customers work with"
		},
		{
			"url": "https://my.pebesmart.ch/api/v1",
			"description": "Our swiss application instance, hosted and maintained by smart seven AG"
		},
		{
			"url": "http://sevdesk.local/api/v1",
			"description": "sevDesk internal local instance"
		}
	],
	"security": [
		{
			"api_key": []
		}
	],
	"tags": [
		{
			"name": "Invoice",
			"description": "\n# Purpose of invoices in sevDesk\n Every time one of our sevDesk customers sells an item or provides a service an invoice needs to be created.<br> These invoice can then be payed by the end-customers so that the selling process is completed.<br> The invoices are directly connected to the transactions of the customer, so every time an invoice is created and marked as payed, there must be a transaction on some bank account.<br> The invoice must then be linked to this transaction, otherwise false reports for tax offices and other institutions can be the case. \n# Attributes of an invoice\n Here is the table of all attributes of invoices.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> There is also a distinction between invoice types, as not all attributes are useful for all types.<br> <table> <tr> <th>Attribute</th> <th>Invoice Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td>Any</td> <td> Defines the vat-regulation for the invoice.<br> Can be: <ul> <li>default</li> <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td> </tr> <tr> <td><span style='color:red'>currency</span></td> <td>Any</td> <td> Currency of the invoice.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxText</span></td> <td>Any</td> <td> Text describing the vat regulation you chose.<br> A common text of our German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer 19% </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td>Any</td> <td> The tax rate of the invoice.<br> Please be aware, that this value will be overwritten by tax rates of the invoice positions. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>contactPerson</span></td> <td>Any</td> <td> The sevDesk user which acts as a contact person for this invoice.<br> </td> <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td>Any</td> <td> If the sevDesk account is falling under the small entrepreneur scheme the invoices must't contain any vat.<br> If this is the case, this attribute should be true, otherwise false. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>invoiceDate</span></td> <td>Any</td> <td> The invoice date. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td>Any</td> <td> The invoice status. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>showNet</span></td> <td>Any</td> <td> This attribute determines, if the price you give the invoice positions will be regarded as gross or net.<br> If true, the price attribute will hold the net value, otherwise the gross value, as described in the section above. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>discount</span></td> <td>Any</td> <td> If the end-customer gets a discount if he pays the invoice in a given time, you can specify the percentage of the discount here.<br> Should this be the case, you will need to provide a value for the attribute <b>discountTime</b> too, otherwise there is no time given and the end-customer won't get a discount.<br> If you don't want this, just leave this attribute at zero. </td> <td>Integer</td> </tr> <tr> <td>discountTime</td> <td>Any</td> <td> If a value other than zero is used for the discount attribute you need to specify the amount of days for which the discount is granted. </td> <td>Integer</td> </tr> <tr> <td>enshrined</td> <td>Any</td> <td> If the invoice is enshrined, it can not longer be changed.<br> If you want this, you can provide the value \"1\".<br> Please be aware, that this action can not be undone. </td> <td>Boolean</td> </tr> <tr> <td>customerInternalNote</td> <td>Any</td> <td> You can use this attribute to provide a note for the invoice.<br> It can be used for reference numbers, order numbers or other important information. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td> <td>Any</td> <td> Holds the <b>complete</b> address to which the invoice is directed.<br> You can use line brakes to separate the different address parts. </td> <td>String</td> </tr> <tr> <td>deliveryDate</td> <td>Any</td> <td> The delivery date of the invoice.<br> This can also be a date range if you provide another timestamp for <b>deliveryDateUntil</b>. </td> <td>Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td> <td>Any</td> <td> You can provide a value here if you want the delivery date to be a date range and you have already given a timestamp to <b>deliveryDate</b>. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>sendType</span></td> <td>Any</td> <td> If you don't plan to send the invoice over another endpoint like <b>/Invoice/sendViaEmail</b> or <b>Invoice/sendBy</b> but instead give it the status \"200\" directly, you need to specify a send type here.<br> Valid types are: VPR (printed), VPDF (downloaded), VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td>origin</td> <td>Any</td> <td> You can specify the object from which an invoice originated, like an order.<br> Just provide the ID of this object. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>invoiceNumber</span></td> <td>Any</td> <td> The invoice number. </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td> Your own tax set that should be used if you defined <b>custom</b> as taxType.<br> </td> <td>Nested object (TaxSet)</td> </tr> <tr> <td><span style='color:darkorange'>contact</span></td> <td>Any</td> <td> The end-customer to which the invoice is directed.<br> Please note, you <b>need</b> to provide a contact if the invoice has any other status than 100. </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>header</span></td> <td>Any</td> <td> The invoice header.<br> Usually consists of the invoice number and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td>Any</td> <td> A head text for the invoice.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>footText</td> <td>Any</td> <td> A foot text for the invoice.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>timeToPay</td> <td>Any</td> <td> The time the end-customer has to pay the invoice in days. </td> <td>Integer</td> </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date the end-customer has payed the invoice. </td> <td>Timestamp</td> </tr> <tr> <td>paymentMethod</td> <td>Any</td> <td> The payment method for the invoice.<br> Needs the ID of a specified payment method. </td> <td>Integer</td> </tr> <tr> <td>costCentre</td> <td>Any</td> <td> A cost centre for the invoice. </td> <td>Nested object (CostCentre)</td> </tr> <tr> <td>sendDate</td> <td>Any</td> <td> The date the invoice was sent to the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>invoiceType</span></td> <td><ul> <li>RE - invoice</li> <li>WKR - recurring invoice</li> <li>SR - cancellation invoice</li> <li>MA - invoice remider</li> <li>TR - partial invoice</li> <li>ER - final invoice</li> </td> <td> The invoice type. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>dunningLevel</span></td> <td>Reminders</td> <td> The dunning level.<br> Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>reminderDeadline</span></td> <td>Reminders</td> <td> The deadline for the next reminder. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>reminderDebit</span></td> <td>Reminders</td> <td> The reminder debit. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>reminderTotal</span></td> <td>Reminders</td> <td> The total reminder amount. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>reminderCharge</span></td> <td>Reminders</td> <td> The additional reminder charge. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>accountIntervall</span></td> <td>Recurring Invoices</td> <td> The interval in which recurring invoices are due. </td> <td>ISO-8601 Duration</td> </tr> <tr> <td><span style='color:darkorange'>accountNextInvoice</span></td> <td>Recurring Invoices</td> <td> The date when the next invoice is due. </td> <td>Timestamp</td> </tr> </table> \n# The invoice number\n At this point we wan't to pay special attention to the invoice number again.<br> The invoice number is not an attribute that must be supplied when creating an invoice, however for most, if not all of our customers, a correct enumeration is the key to structured bookkeeping, which is why duplicate entries must be avoided.<br> For this reason, most of the time a manual assignment of numbers is not the best idea and we are happy to provide you a endpoints which will help out finding the next invoice number.<br><br> This GET request will check what the next invoice number should be, so that a correct enumeration is kept.<br> The concrete endpoint can be used for a multitude of enumerations, but we will just concentrate on checking the next invoice number.<br> You can change the <b>type</b> query string parameter to your needs, depending on the invoice type for which you want the next number. <ul> <li><code>ht<span>tps://my.sevdesk.de/api/v1/SevSequence/Factory/getByType?objectType=Invoice&type=RE</span></code></li> </ul> \n# Types and status of invoices\n Invoice types <br> Invoices are most certainly the most complex objects that can be handled over the API. There are multiple types of invoices and these invoices can have multiple status again. Let's have a look at the different types of invoices first.<br> <table> <tr> <th>Invoice Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Normal invoice</td> <td> A normal invoice which documents a simple selling process. </td> <td> RE </td> </tr> <tr> <td>Recurring invoice</td> <td> An invoice which generates normal invoices with the same values regularly in fixed time frames (every month, year, ...). </td> <td> WKR </td> </tr> <tr> <td>Cancellation invoice</td> <td> An invoice which cancels another already created normal invoice. </td> <td> SR </td> </tr> <tr> <td>Reminder invoice</td> <td> An invoice which gets created if the end-customer failed to pay a normal invoice in a given time frame.<br> Often includes some kind of reminder fee. </td> <td> MA </td> </tr> <tr> <td>Part invoice</td> <td> Part of a complete invoice. All part invoices together result in the complete invoice.<br> Often used if the end-customer can partly pay for items or services. </td> <td> TR </td> </tr> <tr> <td>Final invoice</td> <td> The final invoice of all part invoices which completes the invoice.<br> After the final invoice is payed by the end-customer, the selling process is complete. </td> <td> ER </td> </tr> </table><br> For now we will only cover the normal invoices, as this is complex enough.<br> However, it is important to keep in mind the abbreviations for all types of invoices or at least the one you will need.<br> This is, because you will need to provide the invoice type when creating an invoice.<br> <br> <b>Invoice status</b><br> Now that we have covered all invoice types, let's move to the different status they can have.<br> <table> <tr> <th>Invoice status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Deactivated recurring invoice</td> <td> The invoice is a deactivated recurring invoice.<br> This status code is only relevant for recurring invoices. </td> <td> 50 </td> </tr> <tr> <td>Draft</td> <td> The invoice is still a draft.<br> It has not been sent to the end-customer and can still be changed. </td> <td> 100 </td> </tr> <tr> <td>Open / Due</td> <td> The invoice has been sent to the end-customer.<br> It is either shown as <b>open</b> if the pay date is not exceeded or <b>due</b> if it is. </td> <td> 200 </td> </tr> <tr> <td>Payed</td> <td> The invoice has been payed by the end-customer.<br> This means, that it is linked to a transaction on some payment account in sevDesk. </td> <td> 1000 </td> </tr> </table><br> It is again important to keep in mind the status codes for all status of invoices or at least the one you will need.<br> This is, because you will need to provide the status code when creating an invoice.<br> \n# How to book an invoice\n Booking the invoice with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking an invoice, all by using the same endpoint.<br> This endpoint is called <b>/Invoice/{id}/bookAmount</b>.<br><br> The first way of correctly booking an invoice is to book it on the standard check account which is provided by sevDesk.<br> This is perhaps the easiest way, as no transaction needs to be manually created or searched.<br> The fitting transaction will automatically be created on the standard account and the invoice will be booked with it.<br> This works the same way with the register check account.<br><br> <img src='OpenAPI/img/bookAmountStandard.PNG' width= '800px'><br><br> In the second variant, it is necessary that a transaction already exists, because it is not automatically generated in a manual account or online/finapi account.<br> For this, you must either create the transactions or, in the case of an online/finapi account, import the transactions. When booking the invoices it is important that an id and an objectName are passed along, otherwise a logic error will occur.<br> <img src='OpenAPI/img/bookAmountWithTransaction.PNG' width= '800px'><br><br> \n# How to filter for certain invoices\n Often you don't want to retrieve all invoices in a sevDesk account or one specific invoice of which you know the ID, but rather a list of invoices or a single invoice with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to an invoice query.<br> <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>partiallyPaid=true</td> <td> Retrieve all invoices which are partially paid </td> </tr> <tr> <td>orderByDebit=true</td> <td>Retrieve all invoices ordered by their debit</td> </tr> <tr> <td>orderByDueTime=true</td> <td>Retrieve all invoices ordered by their due time</td> </tr> <tr> <td>showAll=true</td> <td>Retrieve all invoices of all types</td> </tr> <tr> <td>invoiceNumber={number}</td> <td>Only retrieve all invoices with number as a invoice number</td> </tr> <tr> <td>delinquent=true</td> <td>Only retrieve delinquent (due) invoices</td> </tr> <tr> <td>notdelinquent=true</td> <td>Only retrieve invoices which are not delinquent (due)</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all invoices with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td> <td>Only retrieve all invoices with id as a cost centre.<br> </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve invoices of a given status</td> </tr> <tr> <td>createBefore={timestamp}</td> <td>Only retrieve all invoices created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td> <td>Only retrieve all invoices created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td> <td>Only retrieve all invoices updated last before timestamp</td> </tr> <tr> <td>updateAfter={timestamp}</td> <td>Only retrieve all invoices updated last after timestamp</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all invoices with id as a contact<br> </td> </tr> <tr> <td>orderByDueDate=true</td> <td>Retrieve all invoices ordered by their due date</td> </tr> <tr> <td>customerIntenalNote={note}</td> <td>Only retrieve all invoices with note as a customer internal note</td> </tr> <tr> <td>day={timestamp}</td> <td>Only retrieve all invoices where invoice date falls on the day of timestamp</td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all invoices where invoice date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all invoices where invoice date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all invoices in the defined range </td> </tr> <tr> <td>header={header}</td> <td>Only retrieve all invoices with header as a header</td> </tr> <tr> <td>onlyDunned=true</td> <td>Retrieve all invoices which are dunned</td> </tr> <tr> <td>showWkr=all</td> <td>Retrieve all recurring invoices</td> </tr> <tr> <td>showMa=all</td> <td>Retrieve all invoices which are payment reminders</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td> <td>Only retrieve all invoices with id as an origin</td> </tr> <tr> <td>invoiceType={type}</td> <td>Only retrieve all invoices with type as an invoice type</td> </tr> <tr> <td>paymentMethod[id]={id}&paymentMethod[objectName]=PaymentMethod</td> <td>Only retrieve all invoices with id as a payment method</td> </tr> <tr> <td>headerSearch={header}</td> <td>Only retrieve all invoices of which the header is like header</td> </tr> <tr> <td>headerStartsWith={headerStart}</td> <td>Only retrieve all invoices of which the header starts with headerStart</td> </tr> <tr> <td>headerOrNumber={headerOrNumber}</td> <td>Only retrieve all invoices of which the header or invoice number is like headerOrNumber</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for invoices related to searchTerm</td> </tr> <tr> <td>orderByInvoiceNumber={ASC/DESC}</td> <td>Order all invoices after invoice number in ASC/DESC order</td> </tr> <tr> <td>invoiceNumberGreater={number}</td> <td>Only retrieve all invoices of which the invoice number is bigger than number</td> </tr> <tr> <td>invoiceNumberSmaller={number}</td> <td>Only retrieve all invoices of which the invoice number is smaller than number</td> </tr> <tr> <td>sendType={type}</td> <td>Only retrieve all invoices with type as a send type</td> </tr> <tr> <td>fulltextSearch={text}</td> <td>Search for invoices, positions or contact with text as a text</td> </tr> </table>"
		},
		{
			"name": "InvoicePos",
			"description": "\n# Invoice positions\n Every invoice naturally contains one or more invoice positions sometimes also called invoice items, invoice lines or line items.<br> These positions can but mustn't contain parts from the sevDesk inventory.<br> In sevDesk the invoice object itself just provides the skeleton to which positions can be added.<br> Without the positions, the invoice would have a sum of zero and therefore no real meaning.<br> For this reason it is necessary that we have a closer look at invoice positions in this section.<br><br> What makes up a invoice position?<br><br> A invoice position basically consist of: <ul> <li>A part (optional but strongly recommended)</li> <li>The name of the part or item</li> <li>A price for one unit of this part or item</li> <li>A unit in which the part or item is measured</li> <li>A quantity showing how many units of the part or item are in the position</li> <li>A tax rate</li> <li>An invoice to which the position belongs</li> </ul> The total gross sum of the invoice position is then calculated by the price being multiplied with the quantity and the tax rate, which is previously converted to a point number.<br> So for a price of 100, a quantity of two and a tax rate of 19 this would be:<br> 100 * 2 * 1,19 = 238<br><br> There is also the option of regarding the price as the gross price.<br> This is regulated by an attribute of invoice which is called showNet. More about it in the attribute list.<br> In this case, the total sum will be the price you provided and the net price will be calculated by our system.<br> Some of our customers prefer this method, however make sure that you don't get prices mixed up. \n# Invoice position attributes\n Here is the table of all attributes of invoice positions.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> There is also a distinction between invoice types, as not all attributes are useful for all types.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>unity</span></td> <td> The unity in which one item is measured. </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td> <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>invoice</span></td> <td> The invoice to which the position belongs. </td> <td>Nested object (Invoice)</td> </tr> <tr> <td>discount</td> <td> A discount amount for the specific position. </td> <td>Double</td> </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of the position if there are multiple positions in an invoice.<br> Needs to start with zero and is incremented for every new position.<br> If you want to order them differently, you can change their position numbers to your needs. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>price</span></td> <td> The price for one unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td> <span style='color:darkorange'> part</span></td> <td> You can define a part from your sevDesk inventory here.<br> Please be aware, you will still need to provide the name, price and everything else as this will not automatically be generated. </td> <td>Nested object (Part)</td> </tr> </table> \n# How to create/update an invoice position\n You can create an invoice position when creating an invoice, for more information visit the Invoice endpoint.<br> If you want to update an invoice position for an existing invoice, then you must use the same endpoint as when creating an invoice, then passing in the <span style='color:red'><b>ID</b></span> along with the <span style='color:red'><b>objectName</b></span> of the invoice and <span style='color:red'><b>mapAll</b></span>.<br> <ul> <li><code>{\"invoice\": { \"<b>id</b>\": 0, \"<b>objectName</b>\": \"Invoice\", \"<b>mapAll</b>\": true}, <br>\"invoicePos\":[{...}]</code></li> </ul> In order to update an invoice position in an existing invoice, the <span style='color:red'><b>ID</b></span> and the <span style='color:red'><b>objectName</b></span> of the invoice must be transferred and in the invoice position the <span style='color:red'><b>ID</b></span> of the invoice position to be updated<br> <ul> <li><code>\"invoice\": { \"<b>id</b>\": 0, \"<b>objectName</b>\": \"Invoice\", \"<b>mapAll</b>\": true},<br> \"invoicePos\":[{\"<b>id</b>\": 0, ...}]</code></li> </ul>"
		},
		{
			"name": "CheckAccount",
			"description": "A check account is a payment account on which payments to or from the customer are stored.<br> There are three general types of check accounts: <ul><li>Offline</li> <li>Online</li> <li>Register</li> </ul> Offline accounts are accounts on which transactions can be created and booked over the API or over CSV and MT940 imports.<br> The only exception is the standard account, on which transactions can not be created over the API.<br> Please also note, that accounts with CSV and MT940 imports will have online given as the value for their type attribute.<br> Nevertheless, they count as offline accounts.<br> Online accounts are directly connected to a bank application and can not be manipulated over the API.<br> Register accounts represent the cash register for sevDesk account holders needing one and they behave the same way as offline accounts.<br><br>Regarding the check accounts, you will most certainly only need to request existing check accounts for using their ID in further requests.<br> Therefore, you only need to send normal GET requests to the CheckAccount endpoint.<br>"
		},
		{
			"name": "CheckAccountTransaction",
			"description": "A check account transaction is a payment on a check account from or to the customer.<br> They are essential for booking invoices, vouchers (receipts) and credit notes with them to mark them as payed.<br> For a correct bookkeeping, there is always one or multiple transactions linked to an invoice, a voucher or a credit note, until the relevant object is completely payed."
		},
		{
			"name": "Voucher",
			"description": "Vouchers (receipts) is a generic term for various documents that serve as proof of business transactions for the bookkeeping.<br> Incoming and outgoing invoices, coupons and receipts are among the most common types of documents.<br> Every time one of our sevDesk customers makes a monetary input or output, the transaction needs to be documented with a receipt.<br> In sevDesk our customers can create a digital version of this receipt, the voucher, to which the actual offline receipt can be attached.<br> These vouchers can then be payed by the end-customers or by the customer, depending if it is an input or output, so that the transaction process is completely documented.<br> The vouchers are directly connected to the transactions of the customer, so every time a voucher is created and marked as payed, there must be a transaction on some bank account.<br> The voucher must then be linked to this transaction, otherwise false reports for tax offices and other institutions can be the case.<br> \n# Attributes of a voucher\n Here is the table of all attributes of voucher.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> There is also a distinction between voucher types, as not all attributes are useful for all types. <table> <tr> <th>Attribute</th> <th>Voucher Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td>Any</td> <td> Defines if the vat-regulation for the voucher<br> Can be: <ul> <li>default</li> <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td>Any</td> <td> The tax rate of the voucher.<br> Please be aware, that this value will be overwritten by tax rates of the voucher positions. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>voucherType</span></td> <td>Any</td> <td> The type of the voucher. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>voucherDate</span></td> <td>Any</td> <td> The voucher date. </td> <td>Date / Timestamp</td> </tr> <tr> <td>deliveryDate</td> <td>Any</td> <td> The delivery date of the voucher.<br> This can also be a date range if you provide another timestamp for <b>deliveryDateUntil</b>. </td> <td>Date / Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td> <td>Any</td> <td> You can provide a value here if you want the delivery date to be a date range and you have already given a timestamp to <b>deliveryDate</b>. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td>Any</td> <td> The voucher status. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>creditDebit</span></td> <td>Any</td> <td> Defines if the voucher is a credit (income) or debit (output).<br> If you supply <b>C</b> as the value, the voucher is a credit.<br> If you supply <b>D</b> as the value, the voucher is a debit. </td> <td>String</td> </tr> <tr> <td>enshrined</td> <td>Any</td> <td> If the voucher is enshrined, it can not longer be changed.<br> If you want this, you can provide the value \"1\".<br> Please be aware, that this action can not be undone. </td> <td>Boolean</td> </tr> <tr> <td>taxSet</td> <td>Any</td> <td> If you supplied <b>custom</b> as the value for <b>taxType</b>, you can specify which tax set should be used. </td> <td>Nested object (TaxSet)</td> </tr> <tr> <td><span style='color:darkorange'>paymentDeadline</span></td> <td>Any</td> <td> The payment deadline of the voucher.<br> If this date is exceeded, the voucher will be shown as due. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>supplierNameAtSave</span></td> <td>Any</td> <td> The name of the end-customer (contact) used for the voucher.<br> </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>description</span></td> <td>Any</td> <td> The voucher number or voucher description. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>supplier</span></td> <td>Any</td> <td> The end-customer to which the voucher is directed.<br> Please note, you <b>need</b> to provide a contact if the voucher has any other status than 100. </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>document</span></td> <td>Any</td> <td> The document of the voucher.<br> </td> <td>Nested object (Document)</td> </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date the voucher was payed by the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td>costCentre</td> <td>Any</td> <td> A cost centre for the voucher. </td> <td>Nested object (CostCentre)</td> </tr> <tr> <td><span style='color:darkorange'>recurringIntervall</span></td> <td>Recurring Vouchers</td> <td> The interval in which recurring vouchers are due in months.<br> Possible values are:<br> <ul> <li>1 (monthly)</li> <li>3 (quarterly)</li> <li>6 (semiannual)</li> <li>12 (yearly)</li> <li>24 (every 2 years)</li> <li>36 (every 3 years)</li> <li>48 (every 4 years)</li> <li>60 (every 5 years)</li> </ul> </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>recurringStartDate</span></td> <td>Recurring Vouchers</td> <td> The date when the recurring vouchers start. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>recurringNextVoucher</span></td> <td>Recurring Vouchers</td> <td> The date when the next voucher is due. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>recurringLastVoucher</span></td> <td>Recurring Vouchers</td> <td> The date the last previous voucher was generated. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>recurringEndDate</span></td> <td>Recurring Vouchers</td> <td> The date the generation of recurring vouchers ends. </td> <td>Timestamp</td> </tr> </table> \n# Types and status of vouchers\n Vouchers are one of the more complex objects that can be handled over the API.<br> There are two types of vouchers and these vouchers can have multiple status again.<br> Let's have a look at the different types of vouchers first.<br> <table> <tr> <th>Voucher Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Normal voucher</td> <td> A normal voucher which documents a simple selling process. </td> <td> VOU </td> </tr> <tr> <td>Recurring voucher</td> <td> A voucher which generates normal vouchers with the same values regularly in fixed time frames (every month, year, ...). </td> <td> RV </td> </tr> </table> <br> For now we will only cover the normal vouchers, as this is complex enough.<br><br> <b>Voucher status</b> Now that we have covered all voucher types, let's move to the different status they can have.<br> <table> <tr> <th>Voucher status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The voucher is still a draft.<br> It has not been marked as completed an can still be changed. </td> <td> 50 </td> </tr> <tr> <td>Unpaid / Due</td> <td> The voucher has been completed but not payed.<br> It is either shown as <b>unpaid</b> if the pay date is not exceeded or <b>due</b> if it is. </td> <td> 100 </td> </tr> <tr> <td>Payed</td> <td> The voucher has been payed by the end-customer or the sevDesk customer.<br> This means, that it is linked to a transaction on some payment account in sevDesk. </td> <td> 1000 </td> </tr> </table> <br> It is important to keep in mind the status codes for all status of vouchers or at least the one you will need.<br> This is, because you will need to provide the status code when creating a voucher. \n# Accounting type\n An accounting type is the booking account used in voucher positions.<br> It is essential that you always provide one, as it is relevant for multiple business reports.<br> In general, accounting types are differentiated into income and output accounting types.<br> Income types should only be used for debit vouchers and output types only for credit vouchers!<br> Here are two examples how accounting types can be chosen by our customers in the web interface:<br><br> <img src='OpenAPI/img/creditAccountingTypes.PNG' width= '700px'><br><br> <img src='OpenAPI/img/debitAccountingType.PNG' width= '700px'><br><br> Regarding the accounting types, you will most certainly only need to request existing accounting types for using their ID in further requests.<br> Therefore, you only need to send normal GET requests to the AccountingType endpoint.<br> \n# How to filter for certain vouchers\n <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>accountingType[id]={id}&accountingType[objectName]=AccountingType</td> <td>Only retrieve all vouchers which contain at least one position using id as an accounting type.<br> </td> </tr> <tr> <td>withoutCatering=true</td> <td>Retrieve all vouchers except catering vouchers.</td> </tr> <tr> <td>year={year}</td> <td>Only retrieve all vouchers with a voucher date in year.</td> </tr> <tr> <td>month={month}</td> <td>Only retrieve all vouchers with a voucher date in month.<br> Can be combined with a year. </td> </tr> <tr> <td>descriptionLike={description}</td> <td>Only retrieve all vouchers with a description containing description.</td> </tr> <tr> <td>creditDebit={C/D}</td> <td>Supply <b>C</b> to only retrieve credit vouchers and <b>D</b> to only retrieve debit vouchers.</td> </tr> <tr> <td>supplierName={name}</td> <td>Only retrieve all vouchers with a supplier having a name like name.</td> </tr> <tr> <td>commentLike={comment}</td> <td>Only retrieve all vouchers having a position with a comment like comment.</td> </tr> <tr> <td>searchCommentOrDescription={text}</td> <td>Only retrieve all vouchers having a position with comment like text or a description like text.</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all vouchers with id as a contact<br> </td> </tr> <tr> <td>createBefore={timestamp}</td> <td>Only retrieve all vouchers created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td> <td>Only retrieve all vouchers created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td> <td>Only retrieve all vouchers updated last before timestamp</td> </tr> <tr> <td>updateAfter={timestamp}</td> <td>Only retrieve all vouchers updated last after timestamp</td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all vouchers where voucher date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all vouchers where voucher date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all vouchers in the defined range. </td> </tr> <tr> <td>object[id]={id}&object[objectName]={objectName}</td> <td>Only retrieve all vouchers with a linked object with ID id and objectName as object name.<br> </td> </tr> <tr> <td>startPayDate={timestamp}</td> <td>Only retrieve all vouchers where pay date is bigger than timestamp</td> </tr> <tr> <td>endPayDate={timestamp}</td> <td> Only retrieve all vouchers where pay date is smaller than timestamp<br> If startPayDate and endPayDate are both supplied, you will get all vouchers in the defined range. </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve vouchers of a given status</td> </tr> <tr> <td>orderByDebit=true</td> <td>Retrieve all vouchers ordered by their debit</td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td> <td>Only retrieve all vouchers with id as a cost centre.<br> </td> </tr> <tr> <td>voucherType={type}</td> <td>Only retrieve all vouchers with type as a voucher type</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td> <td>Only retrieve all vouchers with id as an origin</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for vouchers related to searchTerm</td> </tr> <tr> <td>contactOrObject[id]={id}&contactOrObject[objectName]={objectName}</td> <td>Only retrieve all vouchers with a linked object or a contact with ID id and objectName as object name.<br> </td> </tr> <tr> <td>orderByVoucherNumber={ASC/DESC}</td> <td>Order all vouchers after voucher number in ASC/DESC order</td> </tr> <tr> <td>delinquent=true</td> <td>Only retrieve delinquent (due) vouchers</td> </tr> <tr> <td>hasDocument=true</td> <td>Only retrieve vouchers which have an attached document</td> </tr> <tr> <td>noRv=true</td> <td>Only retrieve vouchers which are not of type RV</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all vouchers with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>startAmount={amount}</td> <td>Only retrieve all vouchers with a sum bigger than amount.<br> If your provided amount is negative, it will retrieve all vouchers with a sum smaller than amount.</td> </tr> <tr> <td>endAmount={amount}</td> <td> Only retrieve all vouchers with a sum smaller than amount.<br> If your provided amount is negative, it will retrieve all vouchers with a sum bigger than amount.<br> If startAmount and endAmount are both supplied, you will get all vouchers in the defined range. </td> </tr> <tr> <td>fulltextSearch={text}</td> <td>Search for vouchers, positions or contact with text as a text</td> </tr> <tr> <td>fulltextSearchObjects={object1, object2, ...}</td> <td>Enables different objects to search in with the fulltextSearch.</td> </tr> </table><br>"
		},
		{
			"name": "VoucherPos",
			"description": "Every voucher can contain one or more voucher positions.<br> These positions must contain an accounting type (booking account) so that the voucher can be booked accordingly.<br> In sevDesk the voucher object itself just provides the skeleton to which positions can be added.<br> Without the positions, the voucher would have a sum of zero and therefore no real meaning.<br> For this reason it is necessary that we have a closer look at voucher positions in this section. \n# What makes up a voucher position?\n A voucher position basically consist of: <ul> <li>An accounting type (booking account)</li> <li>A sum</li> <li>A tax rate</li> <li>A voucher to which the position belongs</li> </ul> The total gross sum of the voucher position is then calculated by the sum being multiplied  with the tax rate, which is previously converted to a point number.<br> So for a sum of 100 and a tax rate of 19 this would be:<br> 100 * 1,19 = 119<br><br> There is also the option of regarding the sum as the gross price.<br> This is regulated by an attribute of the voucher position which is called net. More about it in the attribute list.<br> In this case, the total sum will be the sum you provided and the net price will be calculated by our system.<br> Some of our customers prefer this method, however make sure that you don't get prices mixed up. \n# Voucher position attributes\n Here is the table of all attributes of voucher positions.<br> Necessary attributes, which must not be left out, are marked red.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>sum</span></td> <td> The sum of the voucher position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the voucher position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>voucher</span></td> <td> The voucher to which the position belongs. </td> <td>Nested object (Voucher)</td> </tr> <tr> <td>comment</td> <td> A comment describing the position. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>net</span></td> <td> Define if the sum you provided is inclusive (false) or exclusive vat (true).<br> </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>accountingType</span></td> <td> The accounting type (booking account) for the voucher position. </td> <td>Nested object (AccountingType)</td> </tr> </table>"
		},
		{
			"name": "Order",
			"description": "\n# Purpose of orders in sevDesk\n Orders serve a multitude of purposes in sevDesk.<br> Although strictly speaking an order has just one single purpose, we regard three types of objects as orders.<br> The <b>estimate / proposal</b> which gets sent to an end-customer by the customer.<br> The <b>order confirmation</b> from an accepted estimate.<br> The <b>delivery note</b> which is sent if goods have been sent by the customer.<br> If you need to handle any of these objects, this detail documentation is the right place!<br> Orders are really similar to invoices in regards to their attributes and representation.<br> This is due to their close relation to invoices, as invoices can be created from orders. \n# Types and status of orders\n Orders are one of the more complex objects that can be handled over the API.<br> As already mentioned, there are different types of orders and these orders can have multiple status again.<br> Let's have a look at the different types of orders first.<br> <table> <tr> <th>Order Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Estimate / Proposal</td> <td> A normal order which documents a simple estimation / proposal for an end-customer. </td> <td> AN </td> </tr> <tr> <td>Order confirmation</td> <td> A confirmation for an estimate / proposal. </td> <td> AB </td> </tr> <tr> <td>Delivery note</td> <td> A confirmation that goods from an estimate / proposal have been sent. </td> <td> LI </td> </tr> </table> Fortunately all types of order share the same set of attributes so it is only important to keep in mind the abbreviations for all types of orders or at least the one you will need.<br> This is, because you will need to provide the order type when creating an order.<br><br> <b>Order status</b><br> Now that we have covered all order types, let's move to the different status they can have.<br><br> <table> <tr> <th>Order status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The order is still a draft.<br> It has not been sent to the end-customer and can still be changed. </td> <td> 100 </td> </tr> <tr> <td>Delivered</td> <td> The order has been sent to the end-customer.<br> </td> <td> 200 </td> </tr> <tr> <td>Rejected / Cancelled</td> <td> The order has been rejected by the end-customer.<br> </td> <td> 300 </td> </tr> <tr> <td>Accepted</td> <td> The order has been accepted by the end-customer.<br> </td> <td> 500 </td> </tr> <tr> <td>Partially Calculated</td> <td> An invoice for parts of the order (but not the full order) has been created.<br> </td> <td> 750 </td> </tr> <tr> <td>Calculated</td> <td> The order has been calculated.<br> One or more invoices have been created covering the whole order. </td> <td> 1000 </td> </tr> </table> It is important to keep in mind the status codes for all status of orders or at least the one you will need.<br> This is, because you will need to provide the status code when creating an order. \n# Attributes of an order\n Here is the table of all attributes of orders.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td> Defines the vat-regulation for the order.<br> Can be: <ul> <li>default</li> <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td> Your own tax set that should be used if you defined <b>custom</b> as taxType.<br> </td> <td>Nested object (TaxSet)</td> </tr> <tr> <td><span style='color:red'>currency</span></td> <td> Currency of the order.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>version</span></td> <td> Version of the order.<br> Can be used if you have multiple drafts for the same order.<br> Should start with 0. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>taxText</span></td> <td> Text describing the vat regulation you chose.<br> A common text of our German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer 19% </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the order.<br> Please be aware, that this value will be overwritten by tax rates of the order positions. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>contactPerson</span></td> <td> The sevDesk user which acts as a contact person for this order.<br> </td> <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td> If the sevDesk account is falling under the small entrepreneur scheme the order must't contain any vat.<br> If this is the case, this attribute should be true, otherwise false. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>orderDate</span></td> <td> The order date. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td> The order status. </td> <td>Integer</td> </tr> <tr> <td>showNet</td> <td> This attribute determines, if the price you give the order positions will be regarded as gross or net.<br> If true, the price attribute will hold the net value, otherwise the gross value. </td> <td>Boolean</td> </tr> <tr> <td>customerInternalNote</td> <td> You can use this attribute to provide a note for the order.<br> It can be used for reference numbers, order numbers or other important information. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td> <td> Holds the <b>complete</b> address to which the order is directed.<br> You can use line brakes to separate the different address parts. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>sendType</span></td> <td> If you don't plan to send the order over another endpoint like <b>/Order/sendViaEmail</b> or <b>Order/sendBy</b> but instead give it the status \"200\" directly, you need to specify a send type here.<br> Valid types are: VPR (printed), VPDF (downloaded), VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td>origin</td> <td> You can specify the object from which an order originated.<br> Just provide the ID of this object. </td> <td>Integer</td> </tr> <tr> <td>typeOrigin</td> <td> Specifies the object name of the object from which an order originated.<br> Most likely <b>Order</b> or <b>Invoice</b>. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>orderNumber</span></td> <td> The order number. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>contact</span></td> <td> The end-customer to which the order is directed.<br> </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:red'>header</span></td> <td> The order header.<br> Usually consists of the order number and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td> A head text for the order.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>footText</td> <td> A foot text for the order.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>paymentTerms</td> <td> The payment terms for the order.<br> </td> <td>Integer</td> </tr> <tr> <td>deliveryTerms</td> <td> The delivery terms for the order.<br> </td> <td>Integer</td> </tr> <tr> <td>sendDate</td> <td> The date the order was sent to the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>orderType</span></td> <td> The order type. </td> <td>String</td> </tr> </table> \n# How to filter for certain orders\n Often you don't want to retrieve all orders in a sevDesk account or one specific order of which you know the ID, but rather a list of orders or a single order with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to an order query. <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>orderNumber={number}</td> <td>Only retrieve all orders with number as a order number</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all orders with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve orders of a given status</td> </tr> <tr> <td>createBefore={timestamp}</td> <td>Only retrieve all orders created before timestamp</td> </tr> <tr> <td>createAfter={timestamp}</td> <td>Only retrieve all orders created after timestamp</td> </tr> <tr> <td>updateBefore={timestamp}</td> <td>Only retrieve all orders updated last before timestamp</td> </tr> <tr> <td>updateAfter={timestamp}</td> <td>Only retrieve all orders updated last after timestamp</td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all orders with id as a contact<br> </td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all orders where order date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all orders where order date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all orders in the defined range </td> </tr> <tr> <td>orderType={type}</td> <td>Only retrieve all orders with type as an order type</td> </tr> <tr> <td>headerSearch={header}</td> <td>Only retrieve all orders of which the header is like header</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for orders related to searchTerm</td> </tr> <tr> <td>orderByOrderNumber={ASC/DESC}</td> <td>Order all orders after order number in ASC/DESC order</td> </tr> <tr> <td>orderNumberGreater={number}</td> <td>Only retrieve all orders of which the order number is bigger than number</td> </tr> <tr> <td>orderNumberNumberSmaller={number}</td> <td>Only retrieve all orders of which the order number is smaller than number</td> </tr> <tr> <td>startAmount={amount}</td> <td>Only retrieve all orders of which the (net/gross) sum is larger or equal amount</td> </tr> <tr> <td>endAmount={amount}</td> <td>Only retrieve all orders of which the (net/gross) sum is smaller or equal amount</td> </tr> </table>"
		},
		{
			"name": "OrderPos",
			"description": "\n# Order position attributes\n Here is the tables of all attributes of order positions.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>unity</span></td> <td> The unity in which one item is measured. </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td> <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>order</span></td> <td> The order to which the position belongs. </td> <td>Nested object (Order)</td> </tr> <tr> <td>discount</td> <td> A discount amount for the specific position. </td> <td>Double</td> </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of the position if there are multiple positions in an order.<br> Needs to start with zero and is incremented for every new position.<br> If you want to order them differently, you can change their position numbers to your needs. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>price</span></td> <td> The price for one unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>part</span></td> <td> You can define a part from your sevDesk inventory here.<br> Please be aware, you will still need to provide the name, price and everything else as this will not automatically be generated. </td> <td>Nested object (Part)</td> </tr> </table>"
		},
		{
			"name": "CreditNote",
			"description": "\n# Purpose of credit notes in sevDesk\n A credit notes is essentially a special type of invoice which is not written by the service provider but rather by the beneficiary.<br> In common use, the term credit note is used when someone receives a payment for which he did not write an invoice.<br> In sevDesk you need to choose a booking category for the credit note you want to create.<br> This booking category describes why you need to create a credit note and can't be disregarded.<br> \n# Credit note booking categories\n As mentioned above, every credit note needs to have a booking category.<br> The following categories are available at the moment. </p> <table> <tr> <th>Booking Category</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Provision</td> <td> The credit note is a provision. </td> <td> PROVISION </td> </tr> <tr> <td>Assigned royalty</td> <td> The credit note is a assigned royalty. </td> <td> ROYALTY_ASSIGNED </td> </tr> <tr> <td>Unassigned royalty</td> <td> The credit note is a unassigned royalty. </td> <td> ROYALTY_UNASSIGNED </td> </tr> <tr> <td>Underachievement of invoice</td> <td> The Credit Note is a underachievement of an invoice or voucher.<br> If this is the case, you need to provide the ID of this invoice or voucher in the attribute refSrcInvoice or refSrcVoucher! </td> <td> UNDERACHIEVEMENT </td> </tr> <tr> <td>To be booked on special account</td> <td> The Credit Note should be booked on a special account.<br> If this is the case, you need to provide the ID of this account in the attribute accountingType! </td> <td> ACCOUNTING_TYPE </td> </tr> </table> \n# Types and status of credit notes\n Credit note types <br><br> At the moment, a credit note can only have one status.<br> This table might be extended in the future, if more status are introduced. <table> <tr> <th>Credit Note Type</th> <th>Description</th> <th>Abbreviation</th> </tr> <tr> <td>Normal credit note</td> <td> A normal credit note. </td> <td> CN </td> </tr> </table><br> Just like with invoices, it is important to keep in mind the abbreviations for all types of credit notes or at least the one you will need.<br> This is, because you will need to provide the credit note type when creating an credit note. Credit note status<br><br> <b>CreditNote status</b><br> Now that we have covered all credit note types, let's move to the different status they can have.<br> <table> <tr> <th>Credit note status</th> <th>Meaning</th> <th>Status code</th> </tr> <tr> <td>Draft</td> <td> The credit note is still a draft.<br> It has not been sent to the end-customer and can still be changed. </td> <td> 100 </td> </tr> <tr> <td>Delivered</td> <td> The credit note has been sent to the end-customer.<br> </td> <td> 200 </td> </tr> <tr> <td>Payed</td> <td> The credit note has been payed.<br> </td> <td> 1000 </td> </tr> </table> It is again important to keep in mind the status codes for all status of credit notes or at least the one you will need.<br> This is, because you will need to provide the status code when creating a credit note. \n# Attributes of a credit note\n Here is the table of all attributes of credit notes.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> There is also a distinction between credit note types. <table> <tr> <th>Attribute</th> <th>Credit Note Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxType</span></td> <td>Any</td> <td> Defines the vat-regulation for the credit note.<br> Can be: <ul> <li>default</li> <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>accountingType</span></td> <td>Any</td> <td> The account on which this credit note should be booked.<br> This attribute <b>has</b> to be used in case the booking category <b>ACCOUNTING_TYPE</b> is used. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>refSrcInvoice</span></td> <td>Any</td> <td> The invoice from which the underachievement originates.<br> This attribute <b>has</b> to be used in case the booking category <b>UNDERACHIEVEMENT</b> is used. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>refSrcVoucher</span></td> <td>Any</td> <td> The voucher from which the underachievement originates.<br> This attribute <b>has</b> to be used in case the booking category <b>UNDERACHIEVEMENT</b> is used. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>currency</span></td> <td>Any</td> <td> Currency of the credit note.<br> Needs to be currency code according to ISO-4217. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxText</span></td> <td>Any</td> <td> Text describing the vat regulation you chose.<br> A common text of our German customers would be:<br> Umsatzsteuer ausweisen or zzgl. Umsatzsteuer 19% </td> <td>String</td> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td>Any</td> <td> The tax rate of the credit note.<br> Please be aware, that this value will be overwritten by tax rates of the credit note positions. </td> <td>Integer</td> </tr> <tr> <td><span style='color:red'>contactPerson</span></td> <td>Any</td> <td> The sevDesk user which acts as a contact person for this credit note.<br> </td> <td>Nested object (SevUser)</td> </tr> <tr> <td>smallSettlement</td> <td>Any</td> <td> If the sevDesk account is falling under the small entrepreneur scheme the credit notes must't contain any vat.<br> If this is the case, this attribute should be true, otherwise false. </td> <td>Boolean</td> </tr> <tr> <td><span style='color:red'>creditNoteDate</span></td> <td>Any</td> <td> The credit note date. </td> <td>Date / Timestamp</td> </tr> <tr> <td><span style='color:red'>status</span></td> <td>Any</td> <td> The credit note status. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>showNet</span></td> <td>Any</td> <td> This attribute determines, if the price you give the credit note positions will be regarded as gross or net.<br> If true, the price attribute will hold the net value, otherwise the gross value, as described in the section above. </td> <td>Boolean</td> </tr> <tr> <td>enshrined</td> <td>Any</td> <td> If the credit note is enshrined, it can not longer be changed.<br> If you want this, you can provide the value \"1\".<br> Please be aware, that this action can not be undone. </td> <td>Boolean</td> </tr> <tr> <td>customerInternalNote</td> <td>Any</td> <td> You can use this attribute to provide a note for the credit note.<br> It can be used for reference numbers, order numbers or other important information. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>address</span></td> <td>Any</td> <td> Holds the <b>complete</b> address to which the credit note is directed.<br> You can use line brakes to separate the different address parts. </td> <td>String</td> </tr> <tr> <td>deliveryDate</td> <td>Any</td> <td> The delivery date of the credit note.<br> This can also be a date range if you provide another timestamp for <b>deliveryDateUntil</b>. </td> <td>Timestamp</td> </tr> <tr> <td>deliveryDateUntil</td> <td>Any</td> <td> You can provide a value here if you want the delivery date to be a date range and you have already given a timestamp to <b>deliveryDate</b>. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>sendType</span></td> <td>Any</td> <td> If you don't plan to send the credit note over another endpoint like <b>/CreditNote/sendViaEmail</b> or <b>CreditNote/sendBy</b> but instead give it the status \"200\" directly, you need to specify a send type here.<br> Valid types are: VPR (printed), VPDF (downloaded), VM (mailed), VP (postal). </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>creditNoteNumber</span></td> <td>Any</td> <td> The credit note number. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>contact</span></td> <td>Any</td> <td> The end-customer to which the credit note is directed.<br> </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>header</span></td> <td>Any</td> <td> The credit note header.<br> Usually consists of the credit note number and a prefix. </td> <td>String</td> </tr> <tr> <td>headText</td> <td>Any</td> <td> A head text for the credit note.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>footText</td> <td>Any</td> <td> A foot text for the credit note.<br> Can contain certain html tags. </td> <td>String</td> </tr> <tr> <td>payDate</td> <td>Any</td> <td> The date the credit note has been payed. </td> <td>Timestamp</td> </tr> <tr> <td>costCentre</td> <td>Any</td> <td> A cost centre for the credit note. </td> <td>Nested object (CostCentre)</td> </tr> <tr> <td>sendDate</td> <td>Any</td> <td> The date the credit note has been sent to the end-customer. </td> <td>Timestamp</td> </tr> <tr> <td><span style='color:red'>creditNoteType</span></td> <td>Any</td> <td> The credit note type. </td> <td>String</td> </tr> <tr> <td><span style='color:red'>bookingCategory</span></td> <td>Any</td> <td> The booking category of the credit note.<br> </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td> Your own tax set that should be used if you defined <b>custom</b> as taxType.<br> </td> <td>Nested object (TaxSet)</td> </tr> </table> \n# The credit note number\n At this point we wan't to pay special attention to the credit note number again.<br> The credit note number is not an attribute that must be supplied when creating a credit note, however for most, if not all of our customers, a correct enumeration is the key to structured bookkeeping, which is why duplicate entries must be avoided.<br> For this reason, most of the time a manual assignment of numbers is not the best idea and we are happy to provide you a endpoints which will help out finding the next credit note number. <br><br> This GET request will check what the next credit note number should be, so that a correct enumeration is kept.<br> The concrete endpoint can be used for a multitude of enumerations, but we will just concentrate on checking the next credit note number.<br> You can change the <b>type</b> query string parameter to your needs, depending on the credit note type for which you want the next number. <ul> <li><b>v1/SevSequence/Factory/getByType?objectType=CreditNote&type=CN<b></li> </ul> \n# How to filter for certain credit notes\n Often you don't want to retrieve all credit notes in a sevDesk account or one specific credit note of which you know the ID, but rather a list of credit notes or a single credit note with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to a credit note query. <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>creditNoteNumber={number}</td> <td>Only retrieve all credit notes with number as a credit note number</td> </tr> <tr> <td>onlyEnshrined=true</td> <td>Only retrieve all credit notes which are enshrined</td> </tr> <tr> <td>tags[x][id]={id}&tags[x][objectName]=Tag</td> <td>Only retrieve all credit notes with id as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>status={status}</td> <td>Only retrieve credit notes of a given status</td> </tr> <tr> <td>delinquent=true</td> <td>Only retrieve delinquent (due) credit notes</td> </tr> <tr> <td>notdelinquent=true</td> <td>Only retrieve credit notes which are not delinquent (due)</td> </tr> <tr> <td>customerIntenalNote={note}</td> <td>Only retrieve all credit notes with note as a customer internal note</td> </tr> <tr> <td>origin[id]={id}&origin[objectName]=ModelName</td> <td>Only retrieve all credit notes with id as an origin</td> </tr> <tr> <td>costCentre[id]={id}&costCentre[objectName]=CostCentre</td> <td>Only retrieve all credit notes with id as a cost centre.<br> </td> </tr> <tr> <td>contact[id]={id}&contact[objectName]=Contact</td> <td>Only retrieve all credit notes with id as a contact<br> </td> </tr> <tr> <td>startDate={timestamp}</td> <td>Only retrieve all credit notes where credit note date is bigger than timestamp</td> </tr> <tr> <td>endDate={timestamp}</td> <td> Only retrieve all credit notes where credit note date is smaller than timestamp<br> If startDate and endDate are both supplied, you will get all credit notes in the defined range </td> </tr> <tr> <td>day={timestamp}</td> <td>Only retrieve all credit notes where credit note date falls on the day of timestamp</td> </tr> <tr> <td>creditNoteType={type}</td> <td>Only retrieve all credit notes with type as a credit note type</td> </tr> <tr> <td>header={header}</td> <td>Only retrieve all credit notes with header as a header</td> </tr> <tr> <td>headerSearch={header}</td> <td>Only retrieve all credit notes of which the header is like header</td> </tr> <tr> <td>paymentMethod[id]={id}&paymentMethod[objectName]=PaymentMethod</td> <td>Only retrieve all credit notes with id as a payment method</td> </tr> <tr> <td>headerOrNumber={headerOrNumber}</td> <td>Only retrieve all credit notes of which the header or credit note number is like headerOrNumber</td> </tr> <tr> <td>headerStartsWith={headerStart}</td> <td>Only retrieve all credit notes of which the header starts with headerStart</td> </tr> <tr> <td>globalSearch={searchTerm}</td> <td>Search for credit notes related to searchTerm</td> </tr> <tr> <td>orderByCreditNoteNumber={ASC/DESC}</td> <td>Order all credit notes after credit note number in ASC/DESC order</td> </tr> <tr> <td>partiallyPaid=true</td> <td> Retrieve all credit notes which are partially paid </td> </tr> <tr> <td>orderByDueDate=true</td> <td>Retrieve all credit notes ordered by their due date</td> </tr> <tr> <td>orderByDueTime=true</td> <td>Retrieve all credit notes ordered by their due time</td> </tr> <tr> <td>orderByDebit=true</td> <td>Retrieve all credit notes ordered by their debit</td> </tr> <tr> <td>creditNoteNumberGreater={number}</td> <td>Only retrieve all credit notes of which the credit note number is bigger than number</td> </tr> <tr> <td>creditNoteNumberNumberSmaller={number}</td> <td>Only retrieve all credit notes of which the credit note number is smaller than number</td> </tr> <tr> <td>startAmount={amount}</td> <td>Only retrieve all credit notes of which the (net/gross) sum is larger or equal amount</td> </tr> <tr> <td>endAmount={amount}</td> <td>Only retrieve all credit notes of which the (net/gross) sum is smaller or equal amount</td> </tr> </table>"
		},
		{
			"name": "CreditNotePos",
			"description": "Just like normal invoices, credit notes naturally contain one or more credit note positions sometimes also called items, lines or line items.<br> These positions can but mustn't contain parts from the sevDesk inventory.<br> In sevDesk the credit note object itself just provides the skeleton to which positions can be added.<br> Without the positions, the credit note would have a sum of zero and therefore no real meaning.<br> For this reason it is necessary that we have a closer look at credit note positions in this section. \n# What makes up a credit note position?\n A credit note position basically consist of: <ul> <li>A part (optional but strongly recommended)</li> <li>The name of the part or item</li> <li>A price for one unit of this part or item</li> <li>A unit in which the part or item is measured</li> <li>A quantity showing how many units of the part or item are in the position</li> <li>A tax rate</li> <li>An credit note to which the position belongs</li> </ul> The total gross sum of the credit note position is then calculated by the price being multiplied with the quantity and the tax rate, which is previously converted to a point number.<br> So for a price of 100, a quantity of two and a tax rate of 19 this would be:<br> 100 * 2 * 1,19 = 238 <br><br> There is also the option of regarding the price as the gross price.<br> This is regulated by an attribute of credit note which is called showNet. More about it in the attribute list.<br> In this case, the total sum will be the price you provided and the net price will be calculated by our system.<br> Some of our customers prefer this method, however make sure that you don't get prices mixed up. \n# Credit note position attributes\n Here is the table of all attributes of credit note positions<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange.<br> <table> <tr> <th>Attribute</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:red'>taxRate</span></td> <td> The tax rate of the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>unity</span></td> <td> The unity in which one item is measured. </td> <td>Nested object (Unity)</td> </tr> <tr> <td><span style='color:red'>quantity</span></td> <td> The quantity of items. </td> <td>Double</td> </tr> <tr> <td><span style='color:red'>creditNote</span></td> <td> The creditNote to which the position belongs. </td> <td>Nested object (CreditNote)</td> </tr> <tr> <td>text</td> <td> A text describing the position. </td> <td>String</td> </tr> <tr> <td>positionNumber</td> <td> The number of the position if there are multiple positions in a credit note.<br> Needs to start with zero and is incremented for every new position.<br> If you want to order them differently, you can change their position numbers to your needs. </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td> The name of the item in the position. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>price</span></td> <td> The price for one unit of the item in the position. </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>part</span></td> <td> You can define a part from your sevDesk inventory here.<br> Please be aware, you will still need to provide the name, price and everything else as this will not automatically be generated. </td> <td>Nested object (Part)</td> </tr> </table> \n# How to create/update an credit note position\n You can create a credit note position when creating a credit note, for more information visit the credit note endpoint.<br> If you want to update an credit note position for an existing credit note, then you must use the same endpoint as when creating an credit note, then passing in the <span style='color:red'><b>ID</b></span> along with the <span style='color:red'><b>objectName</b></span> of the credit note and <span style='color:red'><b>mapAll</b></span>.<br> <ul> <li><code>{\"creditNote\": { \"<b>id</b>\": 0, \"<b>objectName</b>\": \"CreditNote\", \"<b>mapAll</b>\": true}, <br>\"creditNotePos\":[{...}]</code></li> </ul> In order to update an credit note position in an existing credit note, the <span style='color:red'><b>ID</b></span> and the <span style='color:red'><b>objectName</b></span> of the credit note must be transferred and in the credit note position the <span style='color:red'><b>ID</b></span> of the credit note position to be updated<br> <ul> <li><code>\"creditNote\": { \"<b>id</b>\": 0, \"<b>objectName</b>\": \"CreditNote\", \"<b>mapAll</b>\": true},<br> \"creditNotePos\":[{\"<b>id</b>\": 0, ...}]</code></li> </ul>"
		},
		{
			"name": "Contact",
			"description": "\n# Purpose of contacts in sevDesk\n Every time one of our sevDesk customers sells / buys an item or provides a service there is a end customer involved to which it is sold / from which it is bought or to which the service is provided.<br> These end-customers need to be tracked in sevDesk as our customers will need to link them to the invoices, orders, receipts and all other documents relevant for their bookkeeping which involve the end customer. \n# Types of contacts\n As our customers can either deal with individual persons or with whole organisations, we need to differentiate between these two types.<br> Therefore, every contact in sevDesk is either a <b>person</b> or a <b>organisation</b>.<br> At the moment, both share the same set of attributes but designating values to some might not make sense for both types.<br> In the next section, we will distinguish between the two and this will become obvious.<br> Furthermore, naturally, individuals can be part of organisations but organisations can not be part of individuals. Also more in the next section.<br> <br> <b>How do I know to which type a contact belongs?</b><br> <br> It is very important to note, that we currently don't have any attribute which shows to which type a contact belongs.<br> Instead, we separate them by the attributes <b>name</b>, <b>surename</b> and <b>familyname</b>.<br> If you designate values to the attribute <b>surename</b> OR <b>familyname</b> the contact will be regarded as a individual person.<br> If you designate a value to <b>name</b> it will be regarded as an organisation.<br><br> <b>Contact Categories</b><br><br> Additionally to the two main types of contacts, every contact belongs to one of the following categories: <ul> <li>Supplier (ID: 2)</li> <li>Customer (ID: 3)</li> <li>Partner (ID: 4)</li> <li>Prospect Customer (ID: 28)</li> </ul> \n# Attributes of a contact\n Here is a table of all attributes of a contact.<br> Necessary attributes, which must not be left out, are marked red.<br> Attributes which are strongly recommended for valid bookkeeping are marked orange. <table> <tr> <th>Attribute</th> <th>Contact Type</th> <th>Description</th> <th>Attribute Type</th> </tr> <tr> <td><span style='color:darkorange'>name</span></td> <td>Organisations</td> <td> The name of an organisation </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>surename</span></td> <td>Individuals</td> <td> The first name of an individual (yes, we know...) </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>familyname</span></td> <td>Individuals</td> <td> The last name of an individual </td> <td>String</td> </tr> <tr> <td>name2</td> <td>Individuals</td> <td> The middle name (or name-suffix) of an individual </td> <td>String</td> </tr> <tr> <td><span style='color:red'>category</span></td> <td>Organisations, Individuals</td> <td> The category of the contact<br> </td> <td>Nested object (Category)</td> </tr> <tr> <td>defaultCashbackTime</td> <td>Organisations, Individuals</td> <td> Time frame in which a cashback is granted to the customer if he pays an invoice </td> <td>Integer</td> </tr> <tr> <td>defaultCashbackPercent</td> <td>Organisations, Individuals</td> <td> Percentage of which the price of an invoice is reduced if payed in above time frame </td> <td>Double</td> </tr> <tr> <td><span style='color:darkorange'>taxNumber</span></td> <td>Organisations, Individuals</td> <td> Tax number of the contact. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>excemptVat</span></td> <td>Organisations, Individuals</td> <td> Defines if the contact is free of vat </td> <td>Boolean</td> </tr> <tr> <td>taxType</td> <td>Organisations, Individuals</td> <td> Defines if the vat-regulation for the contact<br> Can be: <ul> <li>default</li> <li>eu</li> <li>noteu</li> <li>custom</li> <li>ss</li> </ul> </td> <td>String</td> </tr> <tr> <td>taxSet</td> <td>Organisations, Individuals</td> <td> You can enter the ID of your own vat-regulation here if you provided <b>custom</b> for taxType </td> <td>Integer</td> </tr> <tr> <td>defaultTimeToPay</td> <td>Organisations, Individuals</td> <td> The default time this end customer has to pay invoices </td> <td>Integer</td> </tr> <tr> <td><span style='color:darkorange'>bankNumber</span></td> <td>Organisations, Individuals</td> <td> The bank number of the contact </td> <td>Integer</td> </tr> <tr> <td>birthday</td> <td>Individuals</td> <td> The birthday </td> <td>Unix-Timestamp</td> </tr> <tr> <td><span style='color:darkorange'>vatNumber</span></td> <td>Organisations, Individuals</td> <td> The vat number </td> <td>String</td> </tr> <tr> <td>defaultDiscountAmount</td> <td>Organisations, Individuals</td> <td> A default discount amount this contact gets </td> <td>Double</td> </tr> <tr> <td>defaultDiscountPercentage</td> <td>Organisations, Individuals</td> <td> Define if the value in defaultDiscountAmount is regarded as a percentage. </td> <td>Boolean</td> </tr> <tr> <td>gender</td> <td>Individuals</td> <td> Gender (m,w, or your own definition) </td> <td>String</td> </tr> <tr> <td>academicTitle</td> <td>Individuals</td> <td> Academic title of the contact </td> <td>String</td> </tr> <tr> <td>description</td> <td>Organisations, Individuals</td> <td> A description for the contact </td> <td>String (can contain some html)</td> </tr> <tr> <td>titel</td> <td>Individuals</td> <td> Position an individual holds in an organisation </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>parent</span></td> <td>Individuals</td> <td> The organisation to which this individual belongs </td> <td>Nested object (Contact)</td> </tr> <tr> <td><span style='color:darkorange'>customerNumber</span></td> <td>Organisations, Individuals</td> <td> The customer number of the contact. </td> <td>String</td> </tr> <tr> <td><span style='color:darkorange'>bankAccount</span></td> <td>Organisations, Individuals</td> <td> The bank account number </td> <td>String</td> </tr> </table> \n# The customer number\n The customer number is not an attribute that must be supplied when creating a contact, however for most, if not all of our customers, a correct enumeration is the key to structured bookkeeping, which is why duplicate entries must be avoided.<br> For this reason, most of the time a manual assignment of numbers is not the best idea and we are happy to provide you two contact endpoints which will help out.<br><br> The first GET request you can send will check if a customer number is still available.<br> All you need to provide in the query string is the customer number which should be checked. <ul> <li>ht<span>tps://my.sevdesk.de/api/v1/Contact/Mapper/checkCustomerNumberAvailability?customerNumber=KD-1000</span></li> </ul> The second GET request you can send will check what the next customer number should be, so that a correct enumeration is kept.<br> This time, you only need to send the request to the endpoint. <ul> <li>ht<span>tps://my.sevdesk.de/api/v1/Contact/Factory/getNextCustomerNumber</span></li> </ul> \n# How to filter for certain contacts\n Often you don't want to retrieve all contacts in a sevDesk account or one specific contact of which you know the ID, but rather a list of contacts or a single contact with certain properties.<br> For this purpose we provide a bunch of filters that you can attach to your GET query string for nearly all endpoints.<br> Here are all filters applicable to a contact query. <table> <tr> <th>Filter</th> <th>Description</th> </tr> <tr> <td>depth=1</td> <td> Retrieve organisations AND persons.<br> This attribute is not active as default, so if you don't specify it as true, you will only get organisations. </td> </tr> <tr> <td>category[id]={<span style='color:red'>id</span>}&category[objectName]=Category</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a category</td> </tr> <tr> <td>city={<span style='color:red'>cityName</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>cityName</span> as a city</td> </tr> <tr> <td>tags[x][id]={<span style='color:red'>id</span>}&tags[x][objectName]=Tag</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a tag.<br> You can specify multiple tags by adding more array entries. </td> </tr> <tr> <td>customerNumber={<span style='color:red'>number</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>number</span> as a customer number</td> </tr> <tr> <td>parent[id]={<span style='color:red'>id</span>}&parent[objectName]=Contact</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a parent organisation</td> </tr> <tr> <td>name={<span style='color:red'>name</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>name</span> as a name, surename or familyname</td> </tr> <tr> <td>zip={<span style='color:red'>zipCode</span>}</td> <td>Only retrieve all contacts with <span style='color:red'>zipCode</span> as a zip</td> </tr> <tr> <td>country[id]={<span style='color:red'>id</span>}&country[objectName]=StaticCountry</td> <td>Only retrieve all contacts with <span style='color:red'>id</span> as a country</td> </tr> <tr> <td>createBefore={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts created before <span style='color:red'>timestamp</span></td> </tr> <tr> <td>createAfter={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts created after <span style='color:red'>timestamp</span></td> </tr> <tr> <td>updateBefore={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts updated last before <span style='color:red'>timestamp</span></td> </tr> <tr> <td>updateAfter={<span style='color:red'>timestamp</span>}</td> <td>Only retrieve all contacts updated last after <span style='color:red'>timestamp</span></td> </tr> <tr> <td>orderByCustomerNumber={<span style='color:red'>ASC/DESC</span>}</td> <td>Order all contacts after customer number in <span style='color:red'>ASC/DESC</span> order</td> </tr> </table>"
		},
		{
			"name": "ContactAddress",
			"description": "As one contact can have multiple addresses, they can not be part of the contact attributes.<br> Instead, they have their own endpoint which makes it possible to create as many addresses for one contact as needed.<br> For creating contact addresses have a look at our Swagger specification. Everything should be pretty straight forward."
		},
		{
			"name": "CommunicationWay",
			"description": "A communication way is a medium with which a contact can be reached out to.<br> This can be: <ul> <li>A phone number (landline or mobile)</li> <li>An email</li> <li>A website</li> </ul> They can not be a part of the contact attributes for the same reason as addresses.<br> Each communication way also is of one of the following types, called communication way keys, which are also their own resource: <ul> <li>Private (ID: 1)</li> <li>Work (ID: 2)</li> <li>Fax (ID: 3)</li> <li>Mobile (ID: 4)</li> <li>Empty (ID: 5)</li> <li>Autobox (ID: 6)</li> <li>Newsletter (ID: 7)</li> <li>Invoicing (ID: 8)</li> </ul>"
		},
		{
			"name": "AccountingContact",
			"description": "A accounting contact object belongs to one specific contact object and holds the accounting information for this contact, which is mainly the vendor / receivable accounts number.<br> This information is very important to guarantee valid bookkeeping reports.<br> As this endpoint is also pretty easy to understand, we won't cover it here, but we really recommend you having a look at the POST to create accounting contacts and at the request which checks if a number is still available."
		},
		{
			"name": "Layout",
			"description": "\n# Purpose of Layout in sevDesk\n Each invoice, order and credit note has a generated document.<br> In this chapter we will show you how the layout queries and use them to change the look of your document<br> Please keep in mind that every invoice, order and credit note must be rendered beforehand so that a document is also available. \n# Attributes of a Layout\n In the layouts there are only two different attributes, <b>key</b> and <b>value</b>. For key you can pass one of the following values: <ul> <li>template</li> <li>letterpaper</li> <li>language</li> <li>payPal</li> </ul> The value depends on which key you have chosen. In the following the standard values ​​of the respective keys.<br><br> <b>template</b> <table> <tr> <td>Premium 1</td> <td>5bedce4eeebf6f56c5f1d893</td> </tr> <tr> <td>Premium 2</td> <td>5bedce4eeebf6f56c5f1d898</td> </tr> <tr> <td>Premium 3</td> <td>5bedce4eeebf6f56c5f1d89d</td> </tr> <tr> <td>Premium 4</td> <td>61fbb0058317af2b8e77d106</td> </tr> <tr> <td>Premium 5</td> <td>61fbb0058317af2b8e77d10e</td> </tr> <tr> <td>Premium 6</td> <td>61fbb0058317af2b8e77d10a</td> </tr> <tr> <td>Simple</td> <td>573f03ad6bd2d516c63070f1</td> </tr> <tr> <td>Black</td> <td>573ef2706bd2d50366786471</td> </tr> <tr> <td>Blue</td> <td>573f25c56bd2d51c2100cce1</td> </tr> <tr> <td>without contact person and customer number</td> <td>573ed07e6bd2d547d21e89e1</td> </tr> <tr> <td>Swiss</td> <td>573efc416bd2d5065546eb11</td> </tr> <tr> <td>Standard</td> <td>57986aee6bd2d53306068da1</td> </tr> </table><br> <b>letterpaper</b> <table> <tr> <td>Black</td> <td>57d7ff34f23ada297d265f21</td> </tr> </table><br> <b>language</b> <table> <tr> <td>German</td> <td>de_DE</td> </tr> <tr> <td>German(Autria)</td> <td>de_AT</td> </tr> <tr> <td>German(Swiss)</td> <td>de_CH</td> </tr> <tr> <td>English</td> <td>en_US</td> </tr> <tr> <td>Spanish</td> <td>es_ES</td> </tr> <tr> <td>French</td> <td>fr_FR</td> </tr> <tr> <td>Italian</td> <td>id_IT</td> </tr> <tr> <td>Greek</td> <td>el_GR</td> </tr> </table><br> <b>payPal</b> <table> <tr> <td>Show PayPal icon</td> <td>A</td> </tr> <tr> <td>Show link</td> <td>B</td> </tr> <tr> <td>Disable Paypal</td> <td>C</td> </tr> <tr> <td>PayPal as Strig</td> <td>D</td> </tr> </table>"
		},
		{
			"name": "Tag",
			"description": "\n# Purpose of Tag in sevDesk\n Tags are a tool to create groupings that can be attached to any invoice, order, voucher and credit note.<br> The filter function can also be used with the help of the tags. It must be mentioned here that each invoice, order, receipt and credit note can have more than one tag and the tag must therefore be passed as an array.<br> An example of how to use a tag in invoices: <ul> <li><code>ht<span>tps://my.sevdesk.de/api/v1/Invoice?tags[0][id]={tagId}&tags[0][objectName]=Tag</span></code></li> </ul> \n# Tag relation\n With the tag relations you can display all invoices, receipts, orders and credit notes that have a tag<br> The tag relation does not have to be created separately, as this is automatically created when a tag is created.<br> <br>"
		},
		{
			"name": "ContactField",
			"description": "The contact fields are placeholders that can be titled and filled per contact. The contact fields can then be used in invoices, credit notes and emails."
		}
	],
	"paths": {
		"/Voucher/{voucherId}/bookAmount": {
			"put": {
				"tags": [
					"Voucher"
				],
				"summary": "Book a voucher",
				"description": "Booking the voucher with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking a voucher, all by using the same endpoint.<br> Conveniently, the booking process is exactly the same as the process for invoices.<br> For this reason, you can have a look at it <a href='https://api.sevdesk.de/#section/How-to-book-an-invoice'>here</a> and all you need to to is to change \"Invoice\" into \"Voucher\" in the URL.",
				"operationId": "bookVoucher",
				"parameters": [
					{
						"name": "voucherId",
						"in": "path",
						"description": "ID of voucher to book",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Booking data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/voucherId_bookAmount_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed voucher log entry",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}/getPdf": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Retrieve pdf document of an invoice",
				"description": "Retrieves the pdf document of an invoice with additional metadata.",
				"operationId": "invoiceGetPdf",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice from which you want the pdf",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "download",
						"in": "query",
						"description": "If u want to download the pdf of the invoice.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					},
					{
						"name": "preventSendBy",
						"in": "query",
						"description": "Defines if u want to send the invoice.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "A pdf file",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_1"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Invoice was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/AccountingContact/{accountingContactId}": {
			"get": {
				"tags": [
					"AccountingContact"
				],
				"summary": "Find accounting contact by ID",
				"description": "Returns a single accounting contac",
				"operationId": "getAccountingContactById",
				"parameters": [
					{
						"name": "accountingContactId",
						"in": "path",
						"description": "ID of accounting contact to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_2"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Accounting contact was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"AccountingContact"
				],
				"summary": "Update an existing accounting contact",
				"description": "Update an accounting contact",
				"operationId": "updateAccountingContact",
				"parameters": [
					{
						"name": "accountingContactId",
						"in": "path",
						"description": "ID of accounting contact to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_AccountingContactUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed accounting contact resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_2"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"AccountingContact"
				],
				"summary": "Deletes an accounting contact",
				"operationId": "deleteAccountingContact",
				"parameters": [
					{
						"name": "accountingContactId",
						"in": "path",
						"description": "Id of accounting contact resource to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - accounting contact deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CheckAccountTransaction/{checkAccountTransactionId}": {
			"get": {
				"tags": [
					"CheckAccountTransaction"
				],
				"summary": "Find check account transaction by ID",
				"description": "Retrieve an existing check account transaction",
				"operationId": "getCheckAccountTransactionById",
				"parameters": [
					{
						"name": "checkAccountTransactionId",
						"in": "path",
						"description": "ID of check account transaction",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_4"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"CheckAccountTransaction"
				],
				"summary": "Update an existing check account transaction",
				"description": "Update a check account transaction",
				"operationId": "updateCheckAccountTransaction",
				"parameters": [
					{
						"name": "checkAccountTransactionId",
						"in": "path",
						"description": "ID of check account to update transaction",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CheckAccountTransactionUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed check account resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_4"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"delete": {
				"tags": [
					"CheckAccountTransaction"
				],
				"summary": "Deletes a check account transaction",
				"operationId": "deleteCheckAccountTransaction",
				"parameters": [
					{
						"name": "checkAccountTransactionId",
						"in": "path",
						"description": "Id of check account transaction to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - check account transaction deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/creditNote/{creditNoteId}/sendByWithRender": {
			"get": {
				"tags": [
					"CreditNote"
				],
				"summary": "Send credit note by printing",
				"description": "Sending a credit note to end-customers is an important part of the bookkeeping process.<br> Depending on the way you want to send the credit note, you need to use different endpoints.<br> Let's start with just printing out the credit note, meaning we only need to render the pdf.",
				"operationId": "sendCreditNoteByPrinting",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of creditNote to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "sendType",
						"in": "query",
						"description": "the type you want to print.",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						},
						"example": "PRN"
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_5"
								}
							}
						}
					},
					"400": {
						"description": "Bad request."
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/ContactCustomFieldSetting": {
			"get": {
				"tags": [
					"ContactField"
				],
				"summary": "Retrieve contact field settings",
				"description": "Retrieve all contact field settings",
				"operationId": "getContactFieldSettings",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_6"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"post": {
				"tags": [
					"ContactField"
				],
				"summary": "Create contact field setting",
				"description": "Create contact field setting",
				"operationId": "createContactFieldSetting",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ContactCustomFieldSetting"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_6"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Export/invoiceCsv": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export invoice",
				"description": "Export all invoices as csv",
				"operationId": "exportInvoice",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}/sendViaEmail": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Send invoice via email",
				"description": "This endpoint sends the specified invoice to a customer via email.<br>\r\n    This will automatically mark the invoice as sent.<br>\r\n    Please note, that in production an invoice is not allowed to be changed after this happened!",
				"operationId": "sendInvoiceViaEMail",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to be sent via email",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Mail data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/invoiceId_sendViaEmail_body"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created mail object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_201"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Export/voucherListCsv": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export voucher as zip",
				"description": "Export all vouchers as zip",
				"operationId": "exportVoucher",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_1"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/OrderPos": {
			"get": {
				"tags": [
					"OrderPos"
				],
				"summary": "Retrieve order positions",
				"description": "Retrieve all order positions depending on the filters defined in the query.",
				"operationId": "getOrderPositions",
				"parameters": [
					{
						"name": "order[id]",
						"in": "query",
						"description": "Retrieve all order positions belonging to this order. Must be provided with voucher[objectName]",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "order[objectName]",
						"in": "query",
						"description": "Only required if order[id] was provided. 'Order' should be used as value.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_7"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Invoice/{invoiceId}/bookAmount": {
			"put": {
				"tags": [
					"Invoice"
				],
				"summary": "Book an invoice",
				"description": "Booking the invoice with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking an invoice, all by using the same endpoint.<br> for more information look <a href='https://api.sevdesk.de/#section/How-to-book-an-invoice'>here</a>.",
				"operationId": "bookInvoice",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to book",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Booking data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/invoiceId_bookAmount_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed invoice log entry",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_8"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/{orderId}/getDiscounts": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Find order discounts",
				"description": "Returns all discounts of an order",
				"operationId": "getDiscounts",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to return the positions",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "limits the number of entries returned",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "set the index where the returned entries start",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "embed",
						"in": "query",
						"description": "Get some additional information. Embed can handle multiple values, they must be separated by comma.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_9"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. order was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/Factory/createPackingListFromOrder": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Create packing list from order",
				"description": "Create packing list from order",
				"operationId": "createPackingListFromOrder",
				"parameters": [
					{
						"name": "order[id]",
						"in": "query",
						"description": "the id of the order",
						"required": true,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "order[objectName]",
						"in": "query",
						"description": "Model name, which is 'Order'",
						"required": true,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "Order"
					}
				],
				"requestBody": {
					"description": "Create packing list",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CreatePackingListFromOrder"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_10"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}/getIsPartiallyPaid": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Check if an invoice is already partially paid",
				"description": "Returns 'true' if the given invoice is partially paid - 'false' if it is not.\r\n    Invoices which are completely paid are regarded as not partially paid.",
				"operationId": "getIsInvoicePartiallyPaid",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_11"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CreditNote/{creditNoteId}/getPdf": {
			"get": {
				"tags": [
					"CreditNote"
				],
				"summary": "Retrieve pdf document of a credit note",
				"description": "Retrieves the pdf document of a credit note with additional metadata.",
				"operationId": "creditNoteGetPdf",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of credit note from which you want the pdf",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "download",
						"in": "query",
						"description": "If u want to download the pdf of the credit note.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					},
					{
						"name": "preventSendBy",
						"in": "query",
						"description": "Defines if u want to send the credit note.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "A pdf file",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_1"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Invoice was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Find invoice by ID",
				"description": "Returns a single invoice",
				"operationId": "getInvoiceById",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_12"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Invoice was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Voucher/Factory/saveVoucher": {
			"post": {
				"tags": [
					"Voucher"
				],
				"summary": "Create a new voucher",
				"description": "Generally there are two ways to create vouchers.<br> You can create vouchers by either POSTing to the <b>Voucher</b> and <b>VoucherPos</b> endpoints with the necessary parameters (see attribute lists) or you can use a special endpoint which bundles the requests in one.<br> <br> The list of parameters starts with the voucher array.<br> This array contains all required attributes for a complete voucher.<br> Most of the attributes are covered in the voucher attribute list, there are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed for our system and you always need to provide them.<br><br> The list of parameters then continues with the voucher position array.<br> With this array you have the possibility to add multiple positions at once.<br> In the example it only contains one position, again together with the parameters <b>mapAll</b> and <b>objectName</b>, however, you can add more voucher positions by extending the array.<br> So if you wanted to add another position, you would add the same list of parameters with an incrementedcomponents/schemas/saveVoucher\" array index of \\\"1\\\" instead of \\\"0\\\".<br><br> The list ends with the two parameters voucherPosDelete and filename.<br> We will shortly explain what they can do.<br> With voucherPosDelete you have to option to delete voucher positions as this request can also be used to update vouchers.<br> With filename you can attach a file to the voucher.<br> For most of our customers this is a really important step, as they need to digitize their receipts.<br> Finally, after covering all parameters, they only important information left, is that the order of the last two attributes always needs to be kept.",
				"operationId": "createVoucherByFactory",
				"requestBody": {
					"description": "Creation data. Please be aware, that you need to provide at least all required parameter\r\n        ///    of the voucher and voucher position model!",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/saveVoucher"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created voucher",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/saveVoucherResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/ContactAddress/{contactAddressId}": {
			"get": {
				"tags": [
					"ContactAddress"
				],
				"summary": "Find contact address by ID",
				"description": "Returns a single contact address",
				"operationId": "contactAddressId",
				"parameters": [
					{
						"name": "contactAddressId",
						"in": "path",
						"description": "ID of contact address to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_13"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Contact address was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"ContactAddress"
				],
				"summary": "update a existing contact address",
				"description": "update a existing contact address.",
				"operationId": "updateContactAddress",
				"parameters": [
					{
						"name": "contactAddressId",
						"in": "path",
						"description": "ID of contact address to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Creation data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ContactAddressUpdate"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created contact address",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_13"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"ContactAddress"
				],
				"summary": "Deletes a contact address",
				"operationId": "deleteContactAddress",
				"parameters": [
					{
						"name": "contactAddressId",
						"in": "path",
						"description": "Id of contact address resource to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - contact address deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/{orderId}": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Find order by ID",
				"description": "Returns a single order",
				"operationId": "getOrderById",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_10"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Order was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"Order"
				],
				"summary": "Update an existing order",
				"description": "Update an order",
				"operationId": "updateOrder",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_OrderUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed order resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_10"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"Order"
				],
				"summary": "Deletes an order",
				"operationId": "deleteOrder",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "Id of order resource to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - Order deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict - f.e occurs if the order is not a draft"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Retrieve invoices",
				"description": "There are a multitude of parameter which can be used to filter. A few of them are attached but\r\n     for a complete list please check out <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-invoices'>this</a> list",
				"operationId": "getInvoices",
				"parameters": [
					{
						"name": "status",
						"in": "query",
						"description": "Status of the invoices",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "number",
							"enum": [
								100,
								200,
								1000
							]
						}
					},
					{
						"name": "invoiceNumber",
						"in": "query",
						"description": "Retrieve all invoices with this invoice number",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "Retrieve all invoices with a date equal or higher",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "Retrieve all invoices with a date equal or lower",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "contact[id]",
						"in": "query",
						"description": "Retrieve all invoices with this contact. Must be provided with contact[objectName]",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "contact[objectName]",
						"in": "query",
						"description": "Only required if contact[id] was provided. 'Contact' should be used as value.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_12"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/ContactCustomField/{contactCustomFieldId}": {
			"get": {
				"tags": [
					"ContactField"
				],
				"summary": "Retrieve contact fields",
				"description": "Retrieve all contact fields",
				"operationId": "getContactFieldsById",
				"parameters": [
					{
						"name": "contactCustomFieldId",
						"in": "path",
						"description": "id of the contact field",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_14"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"ContactField"
				],
				"summary": "Update a contact field",
				"description": "Update a contact field",
				"operationId": "updateContactfield",
				"parameters": [
					{
						"name": "contactCustomFieldId",
						"in": "path",
						"description": "id of the contact field",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ContactCustomFieldUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_14"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"ContactField"
				],
				"summary": "delete a contact field",
				"operationId": "deleteContactCustomFieldId",
				"parameters": [
					{
						"name": "contactCustomFieldId",
						"in": "path",
						"description": "Id of contact field",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/DocServer/getLetterpapersWithThumb": {
			"get": {
				"tags": [
					"Layout"
				],
				"summary": "Retrieve letterpapers",
				"description": "Retrieve all letterpapers with Thumb",
				"operationId": "getLetterpapersWithThumb",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_15"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/OrderPos/{orderPosId}": {
			"get": {
				"tags": [
					"OrderPos"
				],
				"summary": "Find order position by ID",
				"description": "Returns a single order position",
				"operationId": "getOrderPositionById",
				"parameters": [
					{
						"name": "orderPosId",
						"in": "path",
						"description": "ID of order position to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_7"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Order position was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"OrderPos"
				],
				"summary": "Update an existing order position",
				"description": "Update an order position",
				"operationId": "updateOrderPosition",
				"parameters": [
					{
						"name": "orderPosId",
						"in": "path",
						"description": "ID of order position to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_OrderPosUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed order position resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_7"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"OrderPos"
				],
				"summary": "Deletes an order Position",
				"operationId": "deleteOrderPos",
				"parameters": [
					{
						"name": "orderPosId",
						"in": "path",
						"description": "Id of order position resource to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - order position deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict - f.e occurs if the order is not a draft"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Report/invoicelist": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "Export invoice list",
				"description": "Export invoice list",
				"operationId": "reportInvoice",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_2"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Retrieve orders",
				"description": "There are a multitude of parameter which can be used to filter. A few of them are attached but\r\n    for a complete list please check out <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-orders'>this</a> list",
				"operationId": "getOrders",
				"parameters": [
					{
						"name": "status",
						"in": "query",
						"description": "Status of the order",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer",
							"enum": [
								100,
								200,
								300,
								500,
								750,
								1000
							]
						}
					},
					{
						"name": "orderNumber",
						"in": "query",
						"description": "Retrieve all orders with this order number",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "Retrieve all orders with a date equal or higher",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "Retrieve all orders with a date equal or lower",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "contact[id]",
						"in": "query",
						"description": "Retrieve all orders with this contact. Must be provided with contact[objectName]",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "contact[objectName]",
						"in": "query",
						"description": "Only required if contact[id] was provided. 'Contact' should be used as value.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_10"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Report/orderlist": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "Export order list",
				"description": "Export order list",
				"operationId": "reportOrder",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_3"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CommunicationWayKey": {
			"get": {
				"tags": [
					"CommunicationWay"
				],
				"summary": "Retrieve communication way keys",
				"description": "Returns all communication way keys.",
				"operationId": "getCommunicationWayKeys",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_16"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Order/{orderId}/changeParameter": {
			"put": {
				"tags": [
					"Layout"
				],
				"summary": "Update an order template",
				"description": "Update an existing order template",
				"operationId": "updateOrderTemplate",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Change Layout",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ChangeLayout"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_17"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Contact/{contactId}/getTabsItemCount": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Get number of all items",
				"description": "Get number of all invoices, orders, etc. of a specified contact",
				"operationId": "getContactTabsItemCountById",
				"parameters": [
					{
						"name": "contactId",
						"in": "path",
						"description": "ID of contact to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_18"
								}
							}
						}
					},
					"400": {
						"description": "Bad request."
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/{orderId}/getPositions": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Find order positions",
				"description": "Returns all positions of an order",
				"operationId": "getOrderPositionsById",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to return the positions",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "limits the number of entries returned",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "set the index where the returned entries start",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "embed",
						"in": "query",
						"description": "Get some additional information. Embed can handle multiple values, they must be separated by comma.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_7"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. order was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/ContactCustomField": {
			"get": {
				"tags": [
					"ContactField"
				],
				"summary": "Retrieve contact fields",
				"description": "Retrieve all contact fields",
				"operationId": "getContactFields",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_14"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"post": {
				"tags": [
					"ContactField"
				],
				"summary": "Create contact field",
				"description": "Create contact field",
				"operationId": "createContactField",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ContactCustomField"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_14"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Tag/{tagId}": {
			"get": {
				"tags": [
					"Tag"
				],
				"summary": "Find tag by ID",
				"description": "Returns a single tag",
				"operationId": "getTagById",
				"parameters": [
					{
						"name": "tagId",
						"in": "path",
						"description": "ID of tag to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_19"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"Tag"
				],
				"summary": "Update tag",
				"description": "Update an existing tag",
				"operationId": "updateTag",
				"parameters": [
					{
						"name": "tagId",
						"in": "path",
						"description": "ID of tag you want to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Tag_tagId_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_19"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"Tag"
				],
				"summary": "Deletes a tag",
				"operationId": "deleteTag",
				"parameters": [
					{
						"name": "tagId",
						"in": "path",
						"description": "Id of tag to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - tag deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Voucher/{voucherId}": {
			"get": {
				"tags": [
					"Voucher"
				],
				"summary": "Find voucher by ID",
				"description": "Returns a single voucher",
				"operationId": "getVoucherById",
				"parameters": [
					{
						"name": "voucherId",
						"in": "path",
						"description": "ID of voucher to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_20"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Voucher was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"Voucher"
				],
				"summary": "Update an existing voucher",
				"description": "Update a voucher",
				"operationId": "updateVoucher",
				"parameters": [
					{
						"name": "voucherId",
						"in": "path",
						"description": "ID of voucher to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_VoucherUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed voucher resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_20"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Export/transactionsCsv": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export transaction",
				"description": "Export all transactions as csv",
				"operationId": "exportTransactions",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_4"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/Factory/saveInvoice": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Create a new invoice",
				"description": "This endpoint offers you the following functionality.\r\n     <ul>\r\n        <li>Create invoices together with positions and discounts</li>\r\n        <li>Delete positions while adding new ones</li>\r\n        <li>Delete or add discounts, or both at the same time</li>\r\n        <li>Automatically fill the address of the supplied contact into the invoice address</li>\r\n     </ul>\r\n     To make your own request sample slimmer, you can omit all parameters which are not required and nullable.\r\n     However, for a valid and logical bookkeeping document, you will also need some of them to ensure that all the necessary data is in the invoice.<br><br> The list of parameters starts with the invoice array.<br> This array contains all required attributes for a complete invoice.<br> Most of the attributes are covered in the invoice attribute list, there are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed for our system and you always need to provide them.<br><br> The list of parameters then continues with the invoice position array.<br> With this array you have the possibility to add multiple positions at once.<br> In the example it only contains one position, again together with the parameters <b>mapAll</b> and <b>objectName</b>, however, you can add more invoice positions by extending the array.<br> So if you wanted to add another position, you would add the same list of parameters with an incremented array index of \"1\" instead of \"0\".<br><br> The list ends with the four parameters invoicePosDelete, discountSave, discountDelete and takeDefaultAddress.<br> They only play a minor role if you only want to create an invoice but we will shortly explain what they can do.<br> With invoicePosDelete you have to option to delete invoice positions as this request can also be used to update invoices.<br> With discountSave you can add discounts to your invoice.<br> With discountDelete you can delete discounts from your invoice.<br> With takeDefaultAddress you can specify that the first address of the contact you are using for the invoice is taken for the invoice address attribute automatically, so you don't need to provide the address yourself.<br> If you want to know more about these parameters, for example if you want to use this request to update invoices, feel free to contact our support.<br><br> Finally, after covering all parameters, they only important information left, is that the order of the last four attributes always needs to be kept.<br> You will also always need to provide all of them, as otherwise the request won't work properly.<br><br> <b>Warning\":\"</b> You can not create a regular invoice with the <b>deliveryDate</b> being later than the <b>invoiceDate</b>.<br> To do that you will need to create a so called <b>Abschlagsrechnung</b> by setting the <b>invoiceType</b> parameter to <b>AR</b>.",
				"operationId": "createInvoiceByFactory",
				"requestBody": {
					"description": "Creation data. Please be aware, that you need to provide at least all required parameter\r\n        ///    of the invoice model!",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/saveInvoice"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created invoice",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/saveInvoiceResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/Factory/saveOrder": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Create a new order",
				"description": "Creates an order to which positions can be added later.",
				"operationId": "createOrder",
				"requestBody": {
					"description": "Creation data. Please be aware, that you need to provide at least all required parameter\r\n        ///    of the order model!",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/saveOrder"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created voucher",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/saveOrderResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CreditNote": {
			"get": {
				"tags": [
					"CreditNote"
				],
				"summary": "Retrieve CreditNote",
				"description": "There are a multitude of parameter which can be used to filter.",
				"operationId": "getCreditNotes",
				"parameters": [
					{
						"name": "status",
						"in": "query",
						"description": "Status of the CreditNote",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"100",
								"200",
								"300",
								"500",
								"750",
								"1000"
							]
						}
					},
					{
						"name": "creditNoteNumber",
						"in": "query",
						"description": "Retrieve all CreditNotes with this creditNote number",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "Retrieve all CreditNotes with a date equal or higher",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						},
						"example": "01.01.2020"
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "Retrieve all CreditNotes with a date equal or lower",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						},
						"example": "01.01.2021"
					},
					{
						"name": "contact[id]",
						"in": "query",
						"description": "Retrieve all CreditNotes with this contact. Must be provided with contact[objectName]",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "contact[objectName]",
						"in": "query",
						"description": "Only required if contact[id] was provided. 'Contact' should be used as value.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_5"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Report/voucherlist": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "Export voucher list",
				"description": "Export voucher list",
				"operationId": "reportVoucher",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_5"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Part/{partId}": {
			"get": {
				"tags": [
					"Part"
				],
				"summary": "Find part by ID",
				"description": "Returns a single part",
				"operationId": "getPartById",
				"parameters": [
					{
						"name": "partId",
						"in": "path",
						"description": "ID of part to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_21"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Part was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"Part"
				],
				"summary": "Update an existing part",
				"description": "Update a part",
				"operationId": "updatePart",
				"parameters": [
					{
						"name": "partId",
						"in": "path",
						"description": "ID of part to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_PartUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed part resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_21"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/InvoicePos": {
			"get": {
				"tags": [
					"InvoicePos"
				],
				"summary": "Retrieve InvoicePos",
				"description": "There are a multitude of parameter which can be used to filter.",
				"operationId": "getInvoicePos",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "Retrieve all InvoicePos with this InvoicePos id",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "invoice[id]",
						"in": "query",
						"description": "Retrieve all invoices positions with this invoice. Must be provided with invoice[objectName]",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "invoice[objectName]",
						"in": "query",
						"description": "Only required if invoice[id] was provided. 'Invoice' should be used as value.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "part[id]",
						"in": "query",
						"description": "Retrieve all invoices positions with this part. Must be provided with part[objectName]",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "part[objectName]",
						"in": "query",
						"description": "Only required if part[id] was provided. 'Part' should be used as value.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_22"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Invoice/{invoiceId}/render": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Render the pdf document of an invoice",
				"description": "Using this endpoint you can render the pdf document of an invoice.<br>\r\n     Use cases for this are the retrieval of the pdf location or the forceful re-render of a already sent invoice.<br>\r\n     Please be aware that changing an invoice after it has been sent to a customer is not an allowed bookkeeping process.",
				"operationId": "invoiceRender",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to render",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Define if the document should be forcefully re-rendered.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/invoiceId_render_body"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Returns meta-data about pdf.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_201_1"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Contact": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Retrieve contacts",
				"description": "There are a multitude of parameter which can be used to filter.<br>\r\n     A few of them are attached but\r\n     for a complete list please check out <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-contacts'>this</a> list",
				"operationId": "getContacts",
				"parameters": [
					{
						"name": "depth",
						"in": "query",
						"description": "Defines if both organizations <b>and</b> persons should be returned.<br>\r\n     '0' -> only organizations, '1' -> organizations and persons",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"0",
								"1"
							]
						}
					},
					{
						"name": "customerNumber",
						"in": "query",
						"description": "Retrieve all contacts with this customer number",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_23"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Contact"
				],
				"summary": "Create a new contact",
				"description": "Creates a new contact.<br>\r\n     For adding addresses and communication ways, you will need to use the ContactAddress and CommunicationWay endpoints.",
				"operationId": "createContact",
				"requestBody": {
					"description": "Creation data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_Contact"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created contact",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_23"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/CheckAccount/{checkAccountId}": {
			"get": {
				"tags": [
					"CheckAccount"
				],
				"summary": "Find check account by ID",
				"description": "Retrieve an existing check account",
				"operationId": "getCheckAccountById",
				"parameters": [
					{
						"name": "checkAccountId",
						"in": "path",
						"description": "ID of check account",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_24"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"CheckAccount"
				],
				"summary": "Update an existing check account",
				"description": "Update a check account",
				"operationId": "updateCheckAccount",
				"parameters": [
					{
						"name": "checkAccountId",
						"in": "path",
						"description": "ID of check account to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CheckAccountUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed check account resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_24"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"delete": {
				"tags": [
					"CheckAccount"
				],
				"summary": "Deletes a check account",
				"operationId": "deleteCheckAccount",
				"parameters": [
					{
						"name": "checkAccountId",
						"in": "path",
						"description": "Id of check account to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - check account deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/Export/creditNoteCsv": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export creditNote",
				"description": "Export all credit notes as csv",
				"operationId": "exportCreditNote",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_6"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CommunicationWay/{communicationWayId}": {
			"get": {
				"tags": [
					"CommunicationWay"
				],
				"summary": "Find communication way by ID",
				"description": "Returns a single communication way",
				"operationId": "getCommunicationWayById",
				"parameters": [
					{
						"name": "communicationWayId",
						"in": "path",
						"description": "ID of communication way to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_25"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. communication way was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"CommunicationWay"
				],
				"summary": "Update a existing communication way",
				"description": "Update a communication way",
				"operationId": "UpdateCommunicationWay",
				"parameters": [
					{
						"name": "communicationWayId",
						"in": "path",
						"description": "ID of CommunicationWay to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CommunicationWayUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed CommunicationWay resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_25"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"CommunicationWay"
				],
				"summary": "Deletes a communication way",
				"operationId": "deleteCommunicationWay",
				"parameters": [
					{
						"name": "communicationWayId",
						"in": "path",
						"description": "Id of communication way resource to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - Communication way deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Part/{partId}/getStock": {
			"get": {
				"tags": [
					"Part"
				],
				"summary": "Get stock of a part",
				"description": "Returns the current stock amount of the given part.",
				"operationId": "partGetStock",
				"parameters": [
					{
						"name": "partId",
						"in": "path",
						"description": "ID of part for which you want the current stock.",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_26"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Part was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/{orderId}/sendBy": {
			"put": {
				"tags": [
					"Order"
				],
				"summary": "Mark order as sent",
				"description": "Marks an order as sent by a chosen send type.",
				"operationId": "orderSendBy",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to mark as sent",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Specify the send type",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/orderId_sendBy_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed order log entry",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_27"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Textparser/fetchDictionaryEntriesByType": {
			"get": {
				"tags": [
					"ContactField"
				],
				"summary": "Retrieve Placeholders",
				"description": "Retrieve all Placeholders",
				"operationId": "getPlaceholder",
				"parameters": [
					{
						"name": "objectName",
						"in": "query",
						"description": "Model name",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"Invoice",
								"CreditNote",
								"Order",
								"Contact",
								"Letter",
								"Email"
							]
						}
					},
					{
						"name": "subObjectName",
						"in": "query",
						"description": "Sub model name, required if you have \"Email\" at objectName",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"Invoice",
								"CreditNote",
								"Order",
								"Contact",
								"Letter"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_28"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CreditNote/{creditNoteId}/bookAmount": {
			"put": {
				"tags": [
					"CreditNote"
				],
				"summary": "Book a credit note",
				"description": "Booking the credit note with a transaction is probably the most important part in the bookkeeping process.<br> There are several ways on correctly booking a credit note, all by using the same endpoint.<br> Conveniently, the booking process is exactly the same as the process for invoices and vouchers.<br> For this reason, you can have a look at it in the <a href='https://api.sevdesk.de/#section/How-to-book-an-invoice'>invoice chapter</a> and all you need to do is to change \"Invoice\" into \"CreditNote\" in the URL.",
				"operationId": "bookCreditNote",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of credit note to book",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Booking data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/creditNoteId_bookAmount_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed invoice log entry",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_8"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Voucher": {
			"get": {
				"tags": [
					"Voucher"
				],
				"summary": "Retrieve vouchers",
				"description": "There are a multitude of parameter which can be used to filter. A few of them are attached but\r\n    for a complete list please check out <a href='https://api.sevdesk.de/#section/How-to-filter-for-certain-vouchers'>this</a> list",
				"operationId": "getVouchers",
				"parameters": [
					{
						"name": "status",
						"in": "query",
						"description": "Status of the vouchers to retrieve.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "number",
							"enum": [
								50,
								100,
								1000
							]
						}
					},
					{
						"name": "creditDebit",
						"in": "query",
						"description": "Define if you only want credit or debit vouchers.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"C",
								"D"
							]
						}
					},
					{
						"name": "descriptionLike",
						"in": "query",
						"description": "Retrieve all vouchers with a description like this.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "Retrieve all vouchers with a date equal or higher",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						},
						"example": "01.01.2020"
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "Retrieve all vouchers with a date equal or lower",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						},
						"example": "01.01.2020"
					},
					{
						"name": "contact[id]",
						"in": "query",
						"description": "Retrieve all vouchers with this contact. Must be provided with contact[objectName]",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "contact[objectName]",
						"in": "query",
						"description": "Only required if contact[id] was provided. 'Contact' should be used as value.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_20"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Report/contactlist": {
			"get": {
				"tags": [
					"Report"
				],
				"summary": "Export contact list",
				"description": "Export contact list",
				"operationId": "reportContact",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_7"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}/sendBy": {
			"put": {
				"tags": [
					"Invoice"
				],
				"summary": "Mark invoice as sent",
				"description": "Marks an invoice as sent by a chosen send type.",
				"operationId": "invoiceSendBy",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to mark as sent",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Specify the send type",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/invoiceId_sendBy_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed invoice log entry",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_29"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/creditNote/{creditNoteId}": {
			"get": {
				"tags": [
					"CreditNote"
				],
				"summary": "Find creditNote by ID",
				"description": "Returns a single creditNote",
				"operationId": "getcreditNoteById",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of creditNote to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_5"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. creditNote was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"CreditNote"
				],
				"summary": "Update an existing creditNote",
				"description": "Update a creditNote",
				"operationId": "updatecreditNote",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of creditNote to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_creditNoteUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed creditNote resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_5"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"CreditNote"
				],
				"summary": "Deletes an creditNote",
				"operationId": "deletecreditNote",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "Id of creditNote resource to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - creditNote deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_5"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict - f.e occurs if the creditNote is not a draft"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Contact/Mapper/checkCustomerNumberAvailability": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Check if a customer number is available",
				"description": "Checks if a given customer number is available or already used.",
				"operationId": "contactCustomerNumberAvailabilityCheck",
				"parameters": [
					{
						"name": "customerNumber",
						"in": "query",
						"description": "The customer number to be checked.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns whether given customer number is available.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_11"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/CreditNote/{creditNoteId}/sendViaEmail": {
			"post": {
				"tags": [
					"CreditNote"
				],
				"summary": "Send credit note via email",
				"description": "This endpoint sends the specified credit note to a customer via email.<br>\r\n    This will automatically mark the credit note as sent.<br>\r\n    Please note, that in production an credit note is not allowed to be changed after this happened!",
				"operationId": "sendCreditNoteViaEMail",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of credit note to be sent via email",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Mail data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/creditNoteId_sendViaEmail_body"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created mail object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_5"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CheckAccountTransaction": {
			"get": {
				"tags": [
					"CheckAccountTransaction"
				],
				"summary": "Retrieve transactions",
				"description": "Retrieve all transactions depending on the filters defined in the query.",
				"operationId": "getTransactions",
				"parameters": [
					{
						"name": "checkAccount[id]",
						"in": "query",
						"description": "Retrieve all transactions on this check account. Must be provided with checkAccount[objectName]",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "checkAccount[objectName]",
						"in": "query",
						"description": "Only required if checkAccount[id] was provided. 'CheckAccount' should be used as value.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "isBooked",
						"in": "query",
						"description": "Only retrieve booked transactions",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "paymtPurpose",
						"in": "query",
						"description": "Only retrieve transactions with this payment purpose",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "Only retrieve transactions from this date on",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "Only retrieve transactions up to this date",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "payeePayerName",
						"in": "query",
						"description": "Only retrieve transactions with this payee / payer",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "onlyCredit",
						"in": "query",
						"description": "Only retrieve credit transactions",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "onlyDebit",
						"in": "query",
						"description": "Only retrieve debit transactions",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_4"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"CheckAccountTransaction"
				],
				"summary": "Create a new transaction",
				"description": "Creates a new transaction on a check account.",
				"operationId": "createTransaction",
				"requestBody": {
					"description": "Creation data. Please be aware, that you need to provide at least all required parameter\r\n        ///    of the CheckAccountTransaction model!",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CheckAccountTransaction"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created transaction",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_4"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/TagRelation": {
			"get": {
				"tags": [
					"Tag"
				],
				"summary": "Retrieve tag relations",
				"description": "Retrieve all tag relations",
				"operationId": "getTagRelations",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_30"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/VoucherPos": {
			"get": {
				"tags": [
					"VoucherPos"
				],
				"summary": "Retrieve voucher positions",
				"description": "Retrieve all voucher positions depending on the filters defined in the query.",
				"operationId": "getVoucherPositions",
				"parameters": [
					{
						"name": "voucher[id]",
						"in": "query",
						"description": "Retrieve all vouchers positions belonging to this voucher. Must be provided with voucher[objectName]",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "voucher[objectName]",
						"in": "query",
						"description": "Only required if voucher[id] was provided. 'Voucher' should be used as value.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_31"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/CreditNote/{creditNoteId}/sendBy": {
			"put": {
				"tags": [
					"CreditNote"
				],
				"summary": "Mark credit note as sent",
				"description": "Marks an credit note as sent by a chosen send type.",
				"operationId": "creditNoteSendBy",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of credit note to mark as sent",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Specify the send type",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/creditNoteId_sendBy_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed credit note log entry",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_32"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/Factory/createInvoiceReminder": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Create invoice reminder",
				"description": "Create an reminder from an invoice",
				"operationId": "createInvoiceReminder",
				"parameters": [
					{
						"name": "invoice[id]",
						"in": "query",
						"description": "the id of the invoice",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "invoice[objectName]",
						"in": "query",
						"description": "Model name, which is 'Invoice'",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						},
						"example": "Invoice"
					}
				],
				"requestBody": {
					"description": "Create invoice",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Factory_createInvoiceReminder_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_12"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CreditNote/Factory/saveCreditNote": {
			"post": {
				"tags": [
					"CreditNote"
				],
				"summary": "Create a new creditNote",
				"description": "The list of parameters starts with the credit note array.<br> This array contains all required attributes for a complete credit note.<br> Most of the attributes are covered in the credit note attribute list, there are only two parameters standing out, namely <b>mapAll</b> and <b>objectName</b>.<br> These are just needed for our system and you always need to provide them.<br> The list of parameters then continues with the credit note position array.<br> With this array you have the possibility to add multiple positions at once.<br> In the example it only contains one position, again together with the parameters <b>mapAll</b> and <b>objectName</b>, however, you can add more credit note positions by extending the array.<br> So if you wanted to add another position, you would add the same list of parameters with an incremented array index of \"1\" instead of \"0\".<br><br> The list ends with the five parameters creditNotePosDelete, discountSave, discountDelete, takeDefaultAddress and forCashRegister.<br> They only play a minor role if you only want to create a credit note but we will shortly explain what they can do.<br> With creditNotePosDelete you have to option to delete credit note positions as this request can also be used to update credit notes.<br> Both discount parameters are deprecated and have no use for credit notes, however they need to be provided in case you want to use the following two parameters.<br> With takeDefaultAddress you can specify that the first address of the contact you are using for the credit note is taken for the credit note address attribute automatically, so you don't need to provide the address yourself.<br> Finally, the forCashRegister parameter needs to be set to <b>true</b> if your credit note is to be booked on the cash register.<br> If you want to know more about these parameters, for example if you want to use this request to update credit notes, feel free to contact our support.<br> Finally, after covering all parameters, they only important information left, is that the order of the last five attributes always needs to be kept.<br> You will also always need to provide all of them, as otherwise the request won't work properly.",
				"operationId": "createcreditNote",
				"requestBody": {
					"description": "Creation data. Please be aware, that you need to provide at least all required parameter\r\n        ///    of the credit note model!",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/saveCreditNote"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created credit note",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/saveCreditNoteResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CheckAccount": {
			"get": {
				"tags": [
					"CheckAccount"
				],
				"summary": "Retrieve check accounts",
				"description": "Retrieve all check accounts",
				"operationId": "getCheckAccounts",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_24"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"CheckAccount"
				],
				"summary": "Create a new check account",
				"description": "Creates a new banking account on which transactions can be created.",
				"operationId": "createCheckAccount",
				"requestBody": {
					"description": "Creation data. Please be aware, that you need to provide at least all required parameter\r\n        ///    of the CheckAccount model!",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CheckAccount"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created check account",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_24"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/Contact/{contactId}": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Find contact by ID",
				"description": "Returns a single contact",
				"operationId": "getContactById",
				"parameters": [
					{
						"name": "contactId",
						"in": "path",
						"description": "ID of contact to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_23"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Contact was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"Contact"
				],
				"summary": "Update a existing contact",
				"description": "Update a contact",
				"operationId": "updateContact",
				"parameters": [
					{
						"name": "contactId",
						"in": "path",
						"description": "ID of contact to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Update data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ContactUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation - Returns changed contact resource",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_23"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"Contact"
				],
				"summary": "Deletes a contact",
				"operationId": "deleteContact",
				"parameters": [
					{
						"name": "contactId",
						"in": "path",
						"description": "Id of contact resource to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - contact deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Voucher/Factory/uploadTempFile": {
			"post": {
				"tags": [
					"Voucher"
				],
				"summary": "Upload voucher file",
				"description": "To attach a document to a voucher, you will need to upload it first for later use.<br> To do this, you can use this request.<br> When you successfully uploaded the file, you will get a sevDesk internal filename in the response.<br> The filename will be a hash generated from your uploaded file. You will need it in the next request!<br> After you got the just mentioned filename, you can enter it as a value for the filename parameter of the saveVoucher request.<br> If you provided all necessary parameters and kept all of them in the right order, the file will be attached to your voucher.",
				"operationId": "voucherUploadFile",
				"requestBody": {
					"description": "File to upload",
					"content": {
						"form-data": {
							"schema": {
								"$ref": "#/components/schemas/Factory_uploadTempFile_body"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "A pdf file",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_201_2"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/creditNotePos": {
			"get": {
				"tags": [
					"CreditNotePos"
				],
				"summary": "Retrieve creditNote positions",
				"description": "Retrieve all creditNote positions depending on the filters defined in the query.",
				"operationId": "getcreditNotePositions",
				"parameters": [
					{
						"name": "creditNote[id]",
						"in": "query",
						"description": "Retrieve all creditNote positions belonging to this creditNote. Must be provided with creditNote[objectName]",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "creditNote[objectName]",
						"in": "query",
						"description": "Only required if creditNote[id] was provided. 'creditNote' should be used as value.",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_33"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/ContactCustomFieldSetting/{contactCustomFieldSettingId}/getReferenceCount": {
			"get": {
				"tags": [
					"ContactField"
				],
				"summary": "Receive count reference",
				"description": "Receive count reference",
				"operationId": "getReferenceCount",
				"parameters": [
					{
						"name": "contactCustomFieldSettingId",
						"in": "path",
						"description": "ID of contact field you want to get the reference count",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - contact field deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_34"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Contact/Factory/getNextCustomerNumber": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Get next free customer number",
				"description": "Retrieves the next available customer number. Avoids duplicates.",
				"operationId": "getNextCustomerNumber",
				"responses": {
					"200": {
						"description": "Returns next available customer number",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_35"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Tag/Factory/create": {
			"post": {
				"tags": [
					"Tag"
				],
				"summary": "Create a new tag",
				"description": "Create a new tag",
				"operationId": "createTag",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Factory_create_body"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_30"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/AccountingContact": {
			"get": {
				"tags": [
					"AccountingContact"
				],
				"summary": "Retrieve accounting contact",
				"description": "Returns all accounting contact which have been added up until now. Filters can be added.",
				"operationId": "getAccountingContact",
				"parameters": [
					{
						"name": "contact[id]",
						"in": "query",
						"description": "ID of contact for which you want the accounting contact.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contact[objectName]",
						"in": "query",
						"description": "Object name. Only needed if you also defined the ID of a contact.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"example": "Contact"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_2"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"AccountingContact"
				],
				"summary": "Create a new accounting contact",
				"description": "Creates a new accounting contact.",
				"operationId": "createAccountingContact",
				"requestBody": {
					"description": "Creation data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_AccountingContact"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created accounting contact",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_2"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Order/Factory/createContractNoteFromOrder": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Create contract note from order",
				"description": "Create contract note from order",
				"operationId": "createContractNoteFromOrder",
				"parameters": [
					{
						"name": "order[id]",
						"in": "query",
						"description": "the id of the order",
						"required": true,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "order[objectName]",
						"in": "query",
						"description": "Model name, which is 'Order'",
						"required": true,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						},
						"example": "Order"
					}
				],
				"requestBody": {
					"description": "Create contract note",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CreatePackingListFromOrder"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_10"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Export/invoiceZip": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export Invoice as zip",
				"description": "Export all invoices as zip",
				"operationId": "exportInvoiceZip",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_8"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/ContactCustomFieldSetting/{contactCustomFieldSettingId}": {
			"get": {
				"tags": [
					"ContactField"
				],
				"summary": "Find contact field setting by ID",
				"description": "Returns a single contact field setting",
				"operationId": "getContactFieldSettingById",
				"parameters": [
					{
						"name": "contactCustomFieldSettingId",
						"in": "path",
						"description": "ID of contact field to return",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_6"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"put": {
				"tags": [
					"ContactField"
				],
				"summary": "Update contact field setting",
				"description": "Update an existing contact field  setting",
				"operationId": "updateContactFieldSetting",
				"parameters": [
					{
						"name": "contactCustomFieldSettingId",
						"in": "path",
						"description": "ID of contact field setting you want to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ContactCustomFieldSettingUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_6"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			},
			"delete": {
				"tags": [
					"ContactField"
				],
				"summary": "Deletes a contact field setting",
				"operationId": "deleteContactFieldSetting",
				"parameters": [
					{
						"name": "contactCustomFieldSettingId",
						"in": "path",
						"description": "Id of contact field to delete",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation - contact field deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/Factory/createInvoiceFromOrder": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Create invoice from order",
				"description": "Create an invoice from an order",
				"operationId": "createInvoiceFromOrder",
				"parameters": [
					{
						"name": "invoice[id]",
						"in": "query",
						"description": "the id of the invoice",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "invoice[objectName]",
						"in": "query",
						"description": "Model name, which is 'Invoice'",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						},
						"example": "Invoice"
					}
				],
				"requestBody": {
					"description": "Create invoice",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CreateInvoiceFromOrder"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_12"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}/cancelInvoice": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Cancel an invoice / Create cancellation invoice",
				"description": "This endpoint will cancel the specified invoice therefor creating a cancellation invoice.<br>\r\n     The cancellation invoice will be automatically paid and the source invoices status will change to 'cancelled'.",
				"operationId": "cancelInvoice",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to be cancelled",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created - Returns cancellation invoice",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_12"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}/changeParameter": {
			"put": {
				"tags": [
					"Layout"
				],
				"summary": "Update an invoice template",
				"description": "Update an existing invoice template",
				"operationId": "updateInvoiceTemplate",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Change Layout",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ChangeLayout"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_17"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CommunicationWay": {
			"get": {
				"tags": [
					"CommunicationWay"
				],
				"summary": "Retrieve communication ways",
				"description": "Returns all communication ways which have been added up until now. Filters can be added.",
				"operationId": "getCommunicationWays",
				"parameters": [
					{
						"name": "contact[id]",
						"in": "query",
						"description": "ID of contact for which you want the communication ways.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contact[objectName]",
						"in": "query",
						"description": "Object name. Only needed if you also defined the ID of a contact.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"example": "Contact"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "Type of the communication ways you want to get.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"PHONE",
								"EMAIL",
								"WEB",
								"MOBILE"
							]
						}
					},
					{
						"name": "main",
						"in": "query",
						"description": "Define if you only want the main communication way.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"0",
								"1"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_25"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"CommunicationWay"
				],
				"summary": "Create a new contact communication way",
				"description": "Creates a new contact communication way.",
				"operationId": "createCommunicationWay",
				"requestBody": {
					"description": "Creation data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_CommunicationWay"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created contact communication way",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_25"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/CheckAccount/{checkAccountId}/getBalanceAtDate": {
			"get": {
				"tags": [
					"CheckAccount"
				],
				"summary": "Get the balance at a given date",
				"description": "Get the balance, calculated as the sum of all transactions sevDesk knows, up to and including the given date. Note that this balance does not have to be the actual bank account balance, e.g. if sevDesk did not import old transactions.",
				"operationId": "getBalanceAtDate",
				"parameters": [
					{
						"name": "checkAccountId",
						"in": "path",
						"description": "ID of check account",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "date",
						"in": "query",
						"description": "Only consider transactions up to this date at 23:59:59",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_36"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/Export/contactListCsv": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export contact",
				"description": "Contact export as csv",
				"operationId": "exportContact",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_9"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Invoice/{invoiceId}/getPositions": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Find invoice positions",
				"description": "Returns all positions of an invoice",
				"operationId": "getInvoicePositionsById",
				"parameters": [
					{
						"name": "invoiceId",
						"in": "path",
						"description": "ID of invoice to return the positions",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "limits the number of entries returned",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "set the index where the returned entries start",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "embed",
						"in": "query",
						"description": "Get some additional information. Embed can handle multiple values, they must be separated by comma.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_22"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Invoice was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/{orderId}/getPdf": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Retrieve pdf document of an order",
				"description": "Retrieves the pdf document of an order with additional metadata and commit the order.",
				"operationId": "orderGetPdf",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order from which you want the pdf",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "download",
						"in": "query",
						"description": "If u want to download the pdf of the order.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					},
					{
						"name": "preventSendBy",
						"in": "query",
						"description": "Defines if u want to send the order.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "A pdf file",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_1"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. order was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/CreditNote/{creditNoteId}/changeParameter": {
			"put": {
				"tags": [
					"Layout"
				],
				"summary": "Update an of credit note template",
				"description": "Update an existing of credit note template",
				"operationId": "updateCreditNoteTemplate",
				"parameters": [
					{
						"name": "creditNoteId",
						"in": "path",
						"description": "ID of credit note to update",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Change Layout",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ChangeLayout"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_17"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/DocServer/getTemplatesWithThumb": {
			"get": {
				"tags": [
					"Layout"
				],
				"summary": "Retrieve templates",
				"description": "Retrieve all templates",
				"operationId": "getTemplates",
				"parameters": [
					{
						"name": "type",
						"in": "query",
						"description": "Type of the templates you want to get.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"enum": [
								"Invoice",
								"invoicereminder",
								"Order",
								"Contractnote",
								"Packinglist",
								"Letter",
								"Creditnote"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_37"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/{orderId}/sendViaEmail": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Send order via email",
				"description": "This endpoint sends the specified order to a customer via email.<br>\r\n    This will automatically mark the order as sent.<br>\r\n    Please note, that in production an order is not allowed to be changed after this happened!",
				"operationId": "sendorderViaEMail",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to be sent via email",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"description": "Mail data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/orderId_sendViaEmail_body"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created mail object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_201_3"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Export/voucherZip": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export voucher zip",
				"description": "export all vouchers as zip",
				"operationId": "exportVoucherZip",
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sevQuery",
						"in": "query",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"$ref": "#/components/schemas/sevQuery_10"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Tag": {
			"get": {
				"tags": [
					"Tag"
				],
				"summary": "Retrieve tags",
				"description": "Retrieve all tags",
				"operationId": "getTags",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "ID of the Tag",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "Name of the Tag",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_19"
								}
							}
						}
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/ContactAddress": {
			"get": {
				"tags": [
					"ContactAddress"
				],
				"summary": "Retrieve contact addresses",
				"description": "Retrieve all contact addresses",
				"operationId": "getContactAddresses",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_13"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"ContactAddress"
				],
				"summary": "Create a new contact address",
				"description": "Creates a new contact address.",
				"operationId": "createContactAddress",
				"requestBody": {
					"description": "Creation data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_ContactAddress"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created contact address",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_13"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			}
		},
		"/Part": {
			"get": {
				"tags": [
					"Part"
				],
				"summary": "Retrieve parts",
				"description": "Retrieve all parts in your sevDesk inventory according to the applied filters.",
				"operationId": "getParts",
				"parameters": [
					{
						"name": "partNumber",
						"in": "query",
						"description": "Retrieve all parts with this part number",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "Retrieve all parts with this name",
						"required": false,
						"style": "form",
						"explode": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_21"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"Part"
				],
				"summary": "Create a new part",
				"description": "Creates a part in your sevDesk inventory.",
				"operationId": "createPart",
				"requestBody": {
					"description": "Creation data. Please be aware, that you need to provide at least all required parameter\r\n        ///    of the part model!",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Model_Part"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Created - Returns created part",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_21"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Export/datevCSV": {
			"get": {
				"tags": [
					"Export"
				],
				"summary": "Export datev",
				"description": "Datev export as zip with csv´s",
				"operationId": "exportDatev",
				"parameters": [
					{
						"name": "Download",
						"in": "query",
						"description": "Specifies if the document is downloaded",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "the start date of the export as timestamp",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						},
						"example": 1641032867
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "the end date of the export as timestamp",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "integer"
						},
						"example": 1648805267
					},
					{
						"name": "scope",
						"in": "query",
						"description": "Define what you want to include in the datev export. This parameter takes a string of 5 letters. Each stands for a model that should be included. Possible letters are: ‘E’ (Earnings), ‘X’ (Expenditure), ‘T’ (Transactions), ‘C’ (Cashregister), ‘D’ (Assets). By providing one of those letter you specify that it should be included in the datev export. Some combinations are: ‘EXTCD’, ‘EXTD’ …",
						"required": true,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string"
						},
						"example": "EXTCD"
					},
					{
						"name": "withUnpaidDocuments",
						"in": "query",
						"description": "include unpaid documents",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					},
					{
						"name": "withEnshrinedDocuments",
						"in": "query",
						"description": "include enshrined documents",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": true
					},
					{
						"name": "enshrine",
						"in": "query",
						"description": "Specify if you want to enshrine all models which were included in the export",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						},
						"example": false
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Authentication required"
					},
					"409": {
						"description": "Conflict"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		},
		"/Order/{orderId}/getRelatedObjects": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Find related objects",
				"description": "Get related objects of a specified order",
				"operationId": "getRelatedObjects",
				"parameters": [
					{
						"name": "orderId",
						"in": "path",
						"description": "ID of order to return the positions",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "includeItself",
						"in": "query",
						"description": "Define if the related objects include the order itself",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "sortByType",
						"in": "query",
						"description": "Define if you want the related objects sorted by type",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "embed",
						"in": "query",
						"description": "Get some additional information. Embed can handle multiple values, they must be separated by comma.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/inline_response_200_38"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. order was not found"
					},
					"401": {
						"description": "Authentication required"
					},
					"500": {
						"description": "Server Error"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Model_InvoicePosResponse": {
				"title": "Invoice position model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The invoice position id",
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The invoice position object name",
						"readOnly": true,
						"example": "InvoicePos"
					},
					"create": {
						"type": "string",
						"description": "Date of invoice position creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last invoice position update",
						"format": "date-time",
						"readOnly": true
					},
					"invoice": {
						"$ref": "#/components/schemas/Model_InvoicePosResponse_invoice"
					},
					"part": {
						"$ref": "#/components/schemas/Model_InvoicePosResponse_part"
					},
					"quantity": {
						"type": "string",
						"description": "Quantity of the article/part",
						"readOnly": true,
						"example": "1"
					},
					"price": {
						"type": "string",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"readOnly": true,
						"example": "100"
					},
					"name": {
						"type": "string",
						"description": "Name of the article/part.",
						"readOnly": true,
						"example": "Dragonglass"
					},
					"unity": {
						"$ref": "#/components/schemas/Model_InvoicePosResponse_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_InvoicePosResponse_sevClient"
					},
					"positionNumber": {
						"type": "string",
						"description": "Position number of your position. Can be used to order multiple positions.",
						"readOnly": true,
						"example": "0"
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"readOnly": true
					},
					"discount": {
						"type": "string",
						"description": "An optional discount of the position.",
						"readOnly": true,
						"example": "0"
					},
					"taxRate": {
						"type": "string",
						"description": "Tax rate of the position.",
						"readOnly": true,
						"example": "19"
					},
					"sumDiscount": {
						"type": "string",
						"description": "Discount sum of the position",
						"readOnly": true,
						"example": "0"
					},
					"sumNetAccounting": {
						"type": "string",
						"description": "Net accounting sum of the position",
						"readOnly": true,
						"example": "0"
					},
					"sumTaxAccounting": {
						"type": "string",
						"description": "Tax accounting sum of the position",
						"readOnly": true,
						"example": "0"
					},
					"sumGrossAccounting": {
						"type": "string",
						"description": "Gross accounting sum of the position",
						"readOnly": true,
						"example": "0"
					},
					"priceNet": {
						"type": "string",
						"description": "Net price of the part",
						"readOnly": true,
						"example": "0"
					},
					"priceGross": {
						"type": "string",
						"description": "Gross price of the part",
						"readOnly": true,
						"example": "100"
					},
					"priceTax": {
						"type": "string",
						"description": "Tax on the price of the part",
						"readOnly": true,
						"example": "0"
					}
				},
				"description": "Invoice position model"
			},
			"Model_AccountingContactUpdate": {
				"title": "AccountingContact model",
				"type": "object",
				"properties": {
					"contact": {
						"$ref": "#/components/schemas/Model_AccountingContactUpdate_contact"
					},
					"debitorNumber": {
						"type": "integer",
						"description": "Debitor number of the accounting contact.",
						"nullable": true
					},
					"creditorNumber": {
						"type": "integer",
						"description": "Creditor number of the accounting contact.",
						"nullable": true
					}
				},
				"description": "Accounting contact model"
			},
			"Model_creditNote": {
				"title": "creditNote model",
				"required": [
					"addressCountry",
					"contact",
					"contactPerson",
					"creditNoteDate",
					"creditNoteNumber",
					"currency",
					"deliveryDate",
					"header",
					"invoiceType",
					"mapAll",
					"objectName",
					"status",
					"taxRate",
					"taxText",
					"taxType"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The creditNote id. <span style='color:red'>Required</span> if you want to create/update an credit note position for an existing credit note\"",
						"nullable": false
					},
					"objectName": {
						"type": "string",
						"description": "The creditNote object name",
						"nullable": false
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false
					},
					"create": {
						"type": "string",
						"description": "Date of creditNote creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last creditNote update",
						"format": "date-time",
						"readOnly": true
					},
					"creditNoteNumber": {
						"type": "string",
						"description": "The creditNote number",
						"example": "Offer-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_creditNote_contact"
					},
					"creditNoteDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": false
					},
					"status": {
						"type": "string",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>status of credit note</a>\r\n    to see what the different status codes mean",
						"nullable": false,
						"example": "100",
						"enum": [
							"100",
							"200",
							"300",
							"500",
							"750",
							"1000"
						]
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the creditNote number",
						"nullable": false,
						"example": "My Offer-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_creditNote_addressCountry"
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_creditNote_createUser"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_creditNote_sevClient"
					},
					"deliveryTerms": {
						"type": "string",
						"description": "Delivery terms of the creditNote",
						"nullable": true
					},
					"paymentTerms": {
						"type": "string",
						"description": "Payment terms of the creditNote",
						"nullable": true
					},
					"version": {
						"type": "integer",
						"description": "Version of the creditNote.<br>\r\n    Can be used if you have multiple drafts for the same creditNote.<br>\r\n    Should start with 0",
						"nullable": true,
						"example": 0
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the creditNote must not contain any vat",
						"nullable": true,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_creditNote_contactPerson"
					},
					"taxRate": {
						"type": "number",
						"description": "Is overwritten by creditNote position tax rates",
						"format": "float",
						"nullable": false,
						"example": 19
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_creditNote_taxSet"
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": false,
						"example": "Umsatzsteuer 19%"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the creditNote.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": false,
						"example": "default"
					},
					"creditNoteType": {
						"type": "string",
						"description": "Type of the creditNote.",
						"nullable": false,
						"example": "CN"
					},
					"sendDate": {
						"type": "string",
						"description": "The date the creditNote was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true
					},
					"bookingCategory": {
						"type": "string",
						"description": "defines the booking category, for more information see the section \"<a href='https://api.sevdesk.de/#section/Credit-note-booking-categories'>Credit note booking categories</a>\"",
						"nullable": true,
						"example": "PROVISION",
						"enum": [
							"PROVISION",
							"ROYALTY_ASSIGNED",
							"ROYALTY_UNASSIGNED",
							"UNDERACHIEVEMENT",
							"ACCOUNTING_TYPE"
						]
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the creditNote. Needs to be currency code according to ISO-4217",
						"nullable": false,
						"example": "EUR"
					},
					"sumNet": {
						"type": "number",
						"description": "Net sum of the creditNote",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumTax": {
						"type": "number",
						"description": "Tax sum of the creditNote",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumGross": {
						"type": "number",
						"description": "Gross sum of the creditNote",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscounts": {
						"type": "number",
						"description": "Sum of all discounts in the creditNote",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumNetForeignCurrency": {
						"type": "number",
						"description": "Net sum of the creditNote in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumTaxForeignCurrency": {
						"type": "number",
						"description": "Tax sum of the creditNote in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumGrossForeignCurrency": {
						"type": "number",
						"description": "Gross sum of the creditNote in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscountsForeignCurrency": {
						"type": "number",
						"description": "Discounts sum of the creditNote in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount",
						"nullable": false,
						"example": false
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"nullable": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					}
				},
				"description": "creditNote model"
			},
			"Model_creditNoteUpdate": {
				"title": "creditNote model",
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The creditNote id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The creditNote object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of creditNote creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last creditNote update",
						"format": "date-time",
						"readOnly": true
					},
					"creditNoteNumber": {
						"type": "string",
						"description": "The creditNote number",
						"nullable": true,
						"example": "Offer-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_creditNoteUpdate_contact"
					},
					"creditNoteDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"status": {
						"type": "string",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>status of credit note</a>\r\n    to see what the different status codes mean",
						"nullable": false,
						"example": "100",
						"enum": [
							"100",
							"200",
							"1000"
						]
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the creditNote number",
						"nullable": true,
						"example": "My Offer-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_creditNote_addressCountry"
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_creditNote_createUser"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_creditNote_sevClient"
					},
					"deliveryTerms": {
						"type": "string",
						"description": "Delivery terms of the creditNote",
						"nullable": true
					},
					"deliveryDate": {
						"type": "string",
						"description": "Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil",
						"format": "date-time",
						"nullable": false
					},
					"paymentTerms": {
						"type": "string",
						"description": "Payment terms of the creditNote",
						"nullable": true
					},
					"version": {
						"type": "integer",
						"description": "Version of the creditNote.<br>\r\n    Can be used if you have multiple drafts for the same creditNote.<br>\r\n    Should start with 0",
						"nullable": true,
						"example": 0
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the creditNote must not contain any vat",
						"nullable": true,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_creditNoteUpdate_contactPerson"
					},
					"taxRate": {
						"type": "number",
						"description": "Is overwritten by creditNote position tax rates",
						"format": "float",
						"nullable": true,
						"example": 19
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_creditNote_taxSet"
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": true,
						"example": "Umsatzsteuer 19%"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the creditNote.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": true,
						"example": "default"
					},
					"creditNoteType": {
						"type": "string",
						"description": "Type of the creditNote. For more information on the different types, check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>this</a>\r\n",
						"nullable": true,
						"example": "CN"
					},
					"sendDate": {
						"type": "string",
						"description": "The date the creditNote was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the creditNote. Needs to be currency code according to ISO-4217",
						"nullable": true,
						"example": "EUR"
					},
					"sumNet": {
						"type": "number",
						"description": "Net sum of the creditNote",
						"format": "float",
						"readOnly": true
					},
					"sumTax": {
						"type": "number",
						"description": "Tax sum of the creditNote",
						"format": "float",
						"readOnly": true
					},
					"sumGross": {
						"type": "number",
						"description": "Gross sum of the creditNote",
						"format": "float",
						"readOnly": true
					},
					"sumDiscounts": {
						"type": "number",
						"description": "Sum of all discounts in the creditNote",
						"format": "float",
						"readOnly": true
					},
					"sumNetForeignCurrency": {
						"type": "number",
						"description": "Net sum of the creditNote in the foreign currency",
						"format": "float",
						"readOnly": true
					},
					"sumTaxForeignCurrency": {
						"type": "number",
						"description": "Tax sum of the creditNote in the foreign currency",
						"format": "float",
						"readOnly": true
					},
					"sumGrossForeignCurrency": {
						"type": "number",
						"description": "Gross sum of the creditNote in the foreign currency",
						"format": "float",
						"readOnly": true
					},
					"sumDiscountsForeignCurrency": {
						"type": "number",
						"description": "Discounts sum of the creditNote in the foreign currency",
						"format": "float",
						"readOnly": true
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount",
						"example": false
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"nullable": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					}
				},
				"description": "creditNote model"
			},
			"Model_creditNotePosResponse": {
				"title": "creditNote position model",
				"required": [
					"creditNote",
					"quantity",
					"taxRate",
					"unity"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The creditNote position id",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The creditNote position object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of creditNote position creation",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"update": {
						"type": "string",
						"description": "Date of last creditNote position update",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"creditNote": {
						"$ref": "#/components/schemas/Model_creditNotePosResponse_creditNote"
					},
					"part": {
						"$ref": "#/components/schemas/Model_creditNotePosResponse_part"
					},
					"quantity": {
						"type": "string",
						"description": "Quantity of the article/part",
						"nullable": false,
						"example": "0"
					},
					"price": {
						"type": "string",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"nullable": true,
						"example": "100"
					},
					"priceNet": {
						"type": "string",
						"description": "Net price of the part",
						"nullable": true,
						"readOnly": true,
						"example": "100"
					},
					"priceTax": {
						"type": "string",
						"description": "Tax on the price of the part",
						"nullable": true,
						"example": "19"
					},
					"priceGross": {
						"type": "string",
						"description": "Gross price of the part",
						"nullable": true,
						"example": "119"
					},
					"name": {
						"type": "string",
						"description": "Name of the article/part.",
						"nullable": true,
						"example": "Dragonglass"
					},
					"unity": {
						"$ref": "#/components/schemas/Model_creditNotePosResponse_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_creditNotePosResponse_sevClient"
					},
					"positionNumber": {
						"type": "string",
						"description": "Position number of your position. Can be used to creditNote multiple positions.",
						"nullable": true,
						"example": "1"
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"nullable": true
					},
					"discount": {
						"type": "string",
						"description": "An optional discount of the position.",
						"nullable": true,
						"example": "0"
					},
					"optional": {
						"type": "boolean",
						"description": "Defines if the position is optional.",
						"nullable": true
					},
					"taxRate": {
						"type": "string",
						"description": "Tax rate of the position.",
						"nullable": false,
						"example": "19"
					},
					"sumDiscount": {
						"type": "string",
						"description": "Discount sum of the position",
						"nullable": true,
						"readOnly": true,
						"example": "0"
					}
				},
				"description": "creditNote position model"
			},
			"Model_ChangeLayout": {
				"title": "Layout model",
				"required": [
					"key",
					"value"
				],
				"properties": {
					"key": {
						"type": "string",
						"description": "the type to be changed",
						"nullable": false,
						"example": "template",
						"enum": [
							"language",
							"template",
							"letterpaper",
							"payPal"
						]
					},
					"value": {
						"type": "string",
						"description": "the id/value of the template/letterpaper/language/payPal.",
						"example": "573ef2706bd2d50366786471"
					}
				},
				"description": "Layout model"
			},
			"Model_Order": {
				"title": "Order model",
				"required": [
					"addressCountry",
					"contact",
					"contactPerson",
					"currency",
					"header",
					"mapAll",
					"orderDate",
					"orderNumber",
					"status",
					"taxRate",
					"taxText",
					"taxType",
					"version"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The order id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The order object name",
						"nullable": false
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false
					},
					"create": {
						"type": "string",
						"description": "Date of order creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last order update",
						"format": "date-time",
						"readOnly": true
					},
					"orderNumber": {
						"type": "string",
						"description": "The order number",
						"example": "Offer-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_Order_contact"
					},
					"orderDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": false
					},
					"status": {
						"type": "integer",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>status of orders</a>\r\n    to see what the different status codes mean",
						"nullable": false,
						"example": 100,
						"enum": [
							100,
							200,
							300,
							500,
							750,
							1000
						]
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the order number",
						"nullable": false,
						"example": "My Offer-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true,
						"example": "header information"
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true,
						"example": "footer information"
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_Order_addressCountry"
					},
					"deliveryTerms": {
						"type": "string",
						"description": "Delivery terms of the order",
						"nullable": true,
						"example": "delivery terms"
					},
					"paymentTerms": {
						"type": "string",
						"description": "Payment terms of the order",
						"nullable": true,
						"example": "payment terms"
					},
					"version": {
						"type": "integer",
						"description": "Version of the order.<br>\r\n    Can be used if you have multiple drafts for the same order.<br>\r\n    Should start with 0",
						"nullable": false,
						"example": 0
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the order must not contain any vat",
						"nullable": false,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_Order_contactPerson"
					},
					"taxRate": {
						"type": "number",
						"description": "Is overwritten by order position tax rates",
						"nullable": false,
						"example": 19
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_Order_taxSet"
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": false,
						"example": "Umsatzsteuer 19%"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the order.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": false,
						"example": "default"
					},
					"orderType": {
						"type": "string",
						"description": "Type of the order. For more information on the different types, check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>this</a> \r\n",
						"nullable": false,
						"example": "AN",
						"enum": [
							"AN",
							"AB",
							"LI"
						]
					},
					"sendDate": {
						"type": "string",
						"description": "The date the order was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true,
						"example": "name\\nstreet\\npostCode city"
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the order. Needs to be currency code according to ISO-4217",
						"nullable": false,
						"example": "EUR"
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true,
						"example": "customer internal note"
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the order. Otherwise gross amount",
						"nullable": false,
						"example": false
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the order. IMPORTANT: Please refer to the order section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"nullable": true,
						"example": "VPR",
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					},
					"origin": {
						"$ref": "#/components/schemas/Model_Order_origin"
					}
				},
				"description": "Order model"
			},
			"Model_TagCreateResponse": {
				"title": "Tag model",
				"properties": {
					"id": {
						"type": "string",
						"description": "Id of the tag",
						"readOnly": true,
						"example": "1"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'Tag'.",
						"readOnly": true,
						"example": "Tag"
					},
					"create": {
						"type": "string",
						"description": "Date of tag creation",
						"format": "date-time",
						"readOnly": true
					},
					"tag": {
						"$ref": "#/components/schemas/Model_TagCreateResponse_tag"
					},
					"object": {
						"$ref": "#/components/schemas/Model_TagCreateResponse_object"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_TagCreateResponse_sevClient"
					}
				},
				"description": "tag model"
			},
			"Model_CommunicationWay": {
				"title": "CommunicationWay model",
				"required": [
					"key",
					"type",
					"value"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The communication way id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The communication way object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of communication way creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last communication way update",
						"format": "date-time",
						"readOnly": true
					},
					"contact": {
						"$ref": "#/components/schemas/Model_CommunicationWay_contact"
					},
					"type": {
						"type": "string",
						"description": "Type of the communication way",
						"example": "EMAIL",
						"enum": [
							"EMAIL",
							"PHONE",
							"WEB",
							"MOBILE"
						]
					},
					"value": {
						"type": "string",
						"description": "The value of the communication way.<br>\r\n     For example the phone number, e-mail address or website."
					},
					"key": {
						"$ref": "#/components/schemas/Model_CommunicationWay_key"
					},
					"main": {
						"type": "boolean",
						"description": "Defines whether the communication way is the main communication way for the contact.",
						"nullable": true,
						"example": false
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_CommunicationWay_sevClient"
					}
				},
				"description": "Contact communication way model"
			},
			"Model_VoucherUpdate": {
				"title": "Voucher model",
				"properties": {
					"voucherDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"supplier": {
						"$ref": "#/components/schemas/Model_VoucherUpdate_supplier"
					},
					"supplierName": {
						"type": "string",
						"description": "The supplier name.<br>\r\n     The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.",
						"nullable": true,
						"example": "John Snow"
					},
					"description": {
						"type": "string",
						"description": "The description of the voucher. Essentially the voucher number.",
						"nullable": true,
						"example": "Voucher-1000"
					},
					"payDate": {
						"type": "string",
						"description": "Needs to be timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"status": {
						"type": "number",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>status of vouchers</a>\r\n    to see what the different status codes mean",
						"example": 50,
						"enum": [
							50,
							100,
							1000
						]
					},
					"paidAmount": {
						"type": "number",
						"description": "Amount which has already been paid for this voucher by the customer",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the voucher.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"example": "default"
					},
					"creditDebit": {
						"type": "string",
						"description": "Defines if your voucher is a credit (C) or debit (D)",
						"example": "C",
						"enum": [
							"C",
							"D"
						]
					},
					"voucherType": {
						"type": "string",
						"description": "Type of the voucher. For more information on the different types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>this</a>\r\n",
						"example": "VOU",
						"enum": [
							"VOU",
							"RV"
						]
					},
					"currency": {
						"type": "string",
						"description": "specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the \"propertyForeignCurrencyDeadline\" or \"propertyExchangeRate\" parameter must be specified. If both parameters are specified, then the \"propertyForeignCurrencyDeadline\" parameter is preferred",
						"nullable": true,
						"example": "EUR"
					},
					"propertyForeignCurrencyDeadline": {
						"type": "string",
						"description": "Defines the exchange rate day and and then the exchange rate is set from sevDesk. Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"propertyExchangeRate": {
						"type": "number",
						"description": "Defines the exchange rate",
						"format": "float",
						"nullable": true,
						"example": 0.8912
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_VoucherUpdate_taxSet"
					},
					"paymentDeadline": {
						"type": "string",
						"description": "Payment deadline of the voucher.",
						"format": "date-time",
						"nullable": true
					},
					"deliveryDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time"
					},
					"deliveryDateUntil": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"document": {
						"$ref": "#/components/schemas/Model_VoucherUpdate_document"
					},
					"costCentre": {
						"$ref": "#/components/schemas/Model_VoucherUpdate_costCentre"
					}
				},
				"description": "Voucher model"
			},
			"Model_AccountingContact": {
				"title": "AccountingContact model",
				"required": [
					"contact"
				],
				"type": "object",
				"properties": {
					"contact": {
						"$ref": "#/components/schemas/Model_AccountingContact_contact"
					},
					"debitorNumber": {
						"type": "integer",
						"description": "Debitor number of the accounting contact.",
						"nullable": true
					},
					"creditorNumber": {
						"type": "integer",
						"description": "Creditor number of the accounting contact.",
						"nullable": true
					}
				},
				"description": "Accounting contact model"
			},
			"Model_ContactCustomFieldSettingResponse": {
				"title": "contact fields model",
				"properties": {
					"id": {
						"type": "string",
						"description": "Id of the contact field",
						"readOnly": true,
						"example": "1"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'ContactCustomFieldSetting'.",
						"readOnly": true,
						"example": "ContactCustomFieldSetting"
					},
					"create": {
						"type": "string",
						"description": "Date of contact field creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of contact field updated",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_ContactCustomFieldSettingResponse_sevClient"
					},
					"name": {
						"type": "string",
						"description": "name of the contact fields",
						"readOnly": true
					},
					"identifier": {
						"type": "string",
						"description": "Unique identifier for the contact field",
						"readOnly": true
					},
					"description": {
						"type": "string",
						"description": "The description of the contact field",
						"readOnly": true
					}
				},
				"description": "contact fields model"
			},
			"Model_InvoicePos": {
				"title": "Invoice position model",
				"required": [
					"mapAll",
					"objectName",
					"quantity",
					"taxRate",
					"unity"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The invoice position id. <span style='color:red'>Required</span> if you want to update an invoice position for an existing invoice",
						"nullable": false
					},
					"objectName": {
						"type": "string",
						"description": "The invoice position object name",
						"nullable": false,
						"example": "InvoicePos"
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false
					},
					"create": {
						"type": "string",
						"description": "Date of invoice position creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last invoice position update",
						"format": "date-time",
						"readOnly": true
					},
					"invoice": {
						"$ref": "#/components/schemas/Model_InvoicePos_invoice"
					},
					"part": {
						"$ref": "#/components/schemas/Model_InvoicePos_part"
					},
					"quantity": {
						"type": "number",
						"description": "Quantity of the article/part",
						"format": "float",
						"nullable": false,
						"example": 1
					},
					"price": {
						"type": "number",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"name": {
						"type": "string",
						"description": "Name of the article/part.",
						"nullable": true,
						"example": "Dragonglass"
					},
					"unity": {
						"$ref": "#/components/schemas/Model_InvoicePos_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_InvoicePos_sevClient"
					},
					"positionNumber": {
						"type": "integer",
						"description": "Position number of your position. Can be used to order multiple positions.",
						"nullable": true
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"nullable": true
					},
					"discount": {
						"type": "number",
						"description": "An optional discount of the position.",
						"format": "float",
						"nullable": true
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the position.",
						"format": "float",
						"nullable": false,
						"example": 19
					},
					"sumDiscount": {
						"type": "number",
						"description": "Discount sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumNetAccounting": {
						"type": "number",
						"description": "Net accounting sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumTaxAccounting": {
						"type": "number",
						"description": "Tax accounting sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumGrossAccounting": {
						"type": "number",
						"description": "Gross accounting sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"priceNet": {
						"type": "number",
						"description": "Net price of the part",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"priceGross": {
						"type": "number",
						"description": "Gross price of the part",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"priceTax": {
						"type": "number",
						"description": "Tax on the price of the part",
						"format": "float",
						"nullable": true
					}
				},
				"description": "Invoice position model"
			},
			"Model_CommunicationWayUpdate": {
				"title": "CommunicationWay model",
				"type": "object",
				"properties": {
					"contact": {
						"$ref": "#/components/schemas/Model_CommunicationWayUpdate_contact"
					},
					"type": {
						"type": "string",
						"description": "Type of the communication way",
						"example": "EMAIL",
						"enum": [
							"EMAIL",
							"PHONE",
							"WEB",
							"MOBILE"
						]
					},
					"value": {
						"type": "string",
						"description": "The value of the communication way.<br>\r\n     For example the phone number, e-mail address or website."
					},
					"key": {
						"$ref": "#/components/schemas/Model_CommunicationWayUpdate_key"
					},
					"main": {
						"type": "boolean",
						"description": "Defines whether the communication way is the main communication way for the contact.",
						"nullable": true,
						"example": false
					}
				},
				"description": "Contact communication way model"
			},
			"Model_EmailOrder": {
				"title": "Email model",
				"required": [
					"from",
					"subject",
					"to"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The email id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The email object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of mail creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last mail update",
						"format": "date-time",
						"readOnly": true
					},
					"object": {
						"$ref": "#/components/schemas/Model_EmailOrder_object"
					},
					"from": {
						"type": "string",
						"description": "The sender of the email",
						"nullable": false
					},
					"to": {
						"type": "string",
						"description": "The recipient of the email",
						"nullable": false
					},
					"subject": {
						"type": "string",
						"description": "The subject of the email",
						"nullable": false
					},
					"text": {
						"type": "string",
						"description": "The text of the email",
						"nullable": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_EmailOrder_sevClient"
					},
					"cc": {
						"type": "string",
						"description": "A list of mail addresses which are in the cc",
						"nullable": true
					},
					"bcc": {
						"type": "string",
						"description": "A list of mail addresses which are in the bcc",
						"nullable": true
					},
					"arrived": {
						"type": "string",
						"description": "Date the mail arrived",
						"format": "date-time",
						"nullable": true
					}
				},
				"description": "Email model"
			},
			"Model_InvoiceUpdate": {
				"title": "Invoice model",
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The invoice id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The invoice object name",
						"nullable": false,
						"readOnly": true
					},
					"invoiceNumber": {
						"type": "string",
						"description": "The invoice number",
						"nullable": true,
						"example": "RE-1002"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_contact"
					},
					"create": {
						"type": "string",
						"description": "Date of invoice creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last invoice update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_sevClient"
					},
					"invoiceDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"nullable": true,
						"example": "01.01.2020"
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the invoice number",
						"nullable": true
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"timeToPay": {
						"type": "integer",
						"description": "The time the customer has to pay the invoice in days",
						"nullable": true
					},
					"discountTime": {
						"type": "integer",
						"description": "If a value other than zero is used for the discount attribute,\r\n    you need to specify the amount of days for which the discount is granted.",
						"nullable": true
					},
					"discount": {
						"type": "integer",
						"description": "If you want to give a discount, define the percentage here. Otherwise provide zero as value",
						"nullable": true,
						"example": 0
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_creditNote_addressCountry"
					},
					"payDate": {
						"type": "string",
						"description": "Needs to be timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_creditNote_createUser"
					},
					"deliveryDate": {
						"type": "string",
						"description": "Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil",
						"format": "date-time",
						"nullable": true
					},
					"status": {
						"type": "string",
						"description": "Please have a look in our\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>Types and status of invoice</a>\r\n     to see what the different status codes mean",
						"nullable": true,
						"example": "100",
						"enum": [
							"50",
							"100",
							"200",
							"1000"
						]
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the invoice must not contain any vat",
						"nullable": true,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_contactPerson"
					},
					"taxRate": {
						"type": "number",
						"description": "Is overwritten by invoice position tax rates",
						"format": "float",
						"nullable": true,
						"example": 19
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": true,
						"example": "Umsatzsteuer 19%"
					},
					"dunningLevel": {
						"type": "integer",
						"description": "Defines how many reminders have already been sent for the invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.",
						"nullable": true
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the invoice.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Kleinunternehmer\nTax rates are heavily connected to the tax type used.",
						"nullable": true,
						"example": "default",
						"enum": [
							"default",
							"eu",
							"noteu",
							"custom"
						]
					},
					"paymentMethod": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_paymentMethod"
					},
					"costCentre": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_costCentre"
					},
					"sendDate": {
						"type": "string",
						"description": "The date the invoice was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"origin": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_origin"
					},
					"invoiceType": {
						"type": "string",
						"description": "Type of the invoice. For more information on the different types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>this</a> section\r\n",
						"nullable": true,
						"example": "RE",
						"enum": [
							"RE",
							"WKR",
							"SR",
							"MA",
							"TR",
							"ER"
						]
					},
					"accountIntervall": {
						"type": "string",
						"description": "The interval in which recurring invoices are due as ISO-8601 duration.<br>\r\n     Necessary attribute for all recurring invoices.",
						"nullable": true
					},
					"accountNextInvoice": {
						"type": "integer",
						"description": "Timestamp when the next invoice will be generated by this recurring invoice.",
						"nullable": true
					},
					"reminderTotal": {
						"type": "number",
						"description": "Total reminder amount",
						"format": "float",
						"nullable": true
					},
					"reminderDebit": {
						"type": "number",
						"description": "Debit of the reminder",
						"format": "float",
						"nullable": true
					},
					"reminderDeadline": {
						"type": "integer",
						"description": "Deadline of the reminder as timestamp",
						"format": "date-time",
						"nullable": true
					},
					"reminderCharge": {
						"type": "number",
						"description": "The additional reminder charge",
						"format": "float",
						"nullable": true
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_taxSet"
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.\r\n     * Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true,
						"example": "name\nstreet\npostCode city"
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the invoice. Needs to be currency code according to ISO-4217",
						"nullable": true,
						"example": "EUR"
					},
					"sumNet": {
						"type": "number",
						"description": "Net sum of the invoice",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumTax": {
						"type": "number",
						"description": "Tax sum of the invoice",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumGross": {
						"type": "number",
						"description": "Gross sum of the invoice",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumDiscounts": {
						"type": "number",
						"description": "Sum of all discounts in the invoice",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumNetForeignCurrency": {
						"type": "number",
						"description": "Net sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumTaxForeignCurrency": {
						"type": "number",
						"description": "Tax sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumGrossForeignCurrency": {
						"type": "number",
						"description": "Gross sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumDiscountsForeignCurrency": {
						"type": "number",
						"description": "Discounts sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumNetAccounting": {
						"type": "number",
						"description": "Net accounting sum of the invoice. Is usually the same as sumNet",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumTaxAccounting": {
						"type": "number",
						"description": "Tax accounting sum of the invoice. Is usually the same as sumTax",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumGrossAccounting": {
						"type": "number",
						"description": "Gross accounting sum of the invoice. Is usually the same as sumGross",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"paidAmount": {
						"type": "number",
						"description": "Amount which has already been paid for this invoice by the customer",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the invoice. Otherwise gross amount",
						"nullable": true,
						"example": false
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if and when invoice was enshrined. Enshrined invoices can not be manipulated.",
						"format": "date-time",
						"nullable": true
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"nullable": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					},
					"deliveryDateUntil": {
						"type": "integer",
						"description": "If the delivery date should be a time range, another timestamp can be provided in this attribute\r\n     * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.",
						"nullable": true
					},
					"datevConnectOnline": {
						"type": "object",
						"description": "Internal attribute",
						"nullable": true
					},
					"sendPaymentReceivedNotificationDate": {
						"type": "integer",
						"description": "Internal attribute",
						"nullable": true
					}
				},
				"description": "Invoice model"
			},
			"Model_InvoiceResponse": {
				"title": "Invoice model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The invoice id",
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The invoice object name",
						"readOnly": true,
						"example": "Invoice"
					},
					"invoiceNumber": {
						"type": "string",
						"description": "The invoice number",
						"readOnly": true,
						"example": "RE-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_contact"
					},
					"create": {
						"type": "string",
						"description": "Date of invoice creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last invoice update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_ContactCustomFieldSettingResponse_sevClient"
					},
					"invoiceDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"readOnly": true,
						"example": "01.01.20"
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the invoice number",
						"readOnly": true,
						"example": "My RE-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"readOnly": true,
						"example": "header information"
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"readOnly": true,
						"example": "footer information"
					},
					"timeToPay": {
						"type": "string",
						"description": "The time the customer has to pay the invoice in days",
						"readOnly": true,
						"example": "10"
					},
					"discountTime": {
						"type": "string",
						"description": "If a value other than zero is used for the discount attribute,\r\n    you need to specify the amount of days for which the discount is granted.",
						"readOnly": true,
						"example": "0"
					},
					"discount": {
						"type": "string",
						"description": "If you want to give a discount, define the percentage here. Otherwise provide zero as value",
						"readOnly": true,
						"example": "0"
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_addressCountry"
					},
					"payDate": {
						"type": "string",
						"description": "Needs to be timestamp or dd.mm.yyyy",
						"format": "date-time",
						"readOnly": true
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_createUser"
					},
					"deliveryDate": {
						"type": "string",
						"description": "Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil",
						"format": "date-time",
						"readOnly": true
					},
					"status": {
						"type": "string",
						"description": "Please have a look in our\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>Types and status of invoices</a>\r\n     to see what the different status codes mean",
						"readOnly": true,
						"example": "100",
						"enum": [
							"50",
							"100",
							"200",
							"1000"
						]
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the invoice must not contain any vat",
						"readOnly": true,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_contactPerson"
					},
					"taxRate": {
						"type": "string",
						"description": "Is overwritten by invoice position tax rates",
						"readOnly": true,
						"example": "19"
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"readOnly": true,
						"example": "Umsatzsteuer 19%"
					},
					"dunningLevel": {
						"type": "string",
						"description": "Defines how many reminders have already been sent for the invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.",
						"readOnly": true,
						"example": "0"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the invoice.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"readOnly": true,
						"example": "default",
						"enum": [
							"default",
							"eu",
							"noteu",
							"custom"
						]
					},
					"paymentMethod": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_paymentMethod"
					},
					"costCentre": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_costCentre"
					},
					"sendDate": {
						"type": "string",
						"description": "The date the invoice was sent to the customer",
						"format": "date-time",
						"readOnly": true
					},
					"origin": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_origin"
					},
					"invoiceType": {
						"type": "string",
						"description": "Type of the invoice. For more information on the different types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>this</a> section\r\n",
						"readOnly": true,
						"example": "RE",
						"enum": [
							"RE",
							"WKR",
							"SR",
							"MA",
							"TR",
							"ER"
						]
					},
					"accountIntervall": {
						"type": "string",
						"description": "The interval in which recurring invoices are due as ISO-8601 duration.<br>\r\n     Necessary attribute for all recurring invoices.",
						"readOnly": true,
						"example": "2022-03-14"
					},
					"accountNextInvoice": {
						"type": "string",
						"description": "Timestamp when the next invoice will be generated by this recurring invoice.",
						"readOnly": true,
						"example": "1647259198"
					},
					"reminderTotal": {
						"type": "string",
						"description": "Total reminder amount",
						"readOnly": true,
						"example": "0"
					},
					"reminderDebit": {
						"type": "string",
						"description": "Debit of the reminder",
						"readOnly": true,
						"example": "0"
					},
					"reminderDeadline": {
						"type": "string",
						"description": "Deadline of the reminder as timestamp",
						"format": "date-time",
						"readOnly": true
					},
					"reminderCharge": {
						"type": "string",
						"description": "The additional reminder charge",
						"readOnly": true,
						"example": "0"
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_taxSet"
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.\r\n     * Line breaks can be used and will be displayed on the invoice pdf.",
						"readOnly": true,
						"example": "name\nstreet\npostCode city"
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the invoice. Needs to be currency code according to ISO-4217",
						"readOnly": true,
						"example": "EUR"
					},
					"sumNet": {
						"type": "string",
						"description": "Net sum of the invoice",
						"readOnly": true,
						"example": "100"
					},
					"sumTax": {
						"type": "string",
						"description": "Tax sum of the invoice",
						"readOnly": true,
						"example": "19"
					},
					"sumGross": {
						"type": "string",
						"description": "Gross sum of the invoice",
						"readOnly": true,
						"example": "119"
					},
					"sumDiscounts": {
						"type": "string",
						"description": "Sum of all discounts in the invoice",
						"readOnly": true,
						"example": "0"
					},
					"sumNetForeignCurrency": {
						"type": "string",
						"description": "Net sum of the invoice in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"sumTaxForeignCurrency": {
						"type": "string",
						"description": "Tax sum of the invoice in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"sumGrossForeignCurrency": {
						"type": "string",
						"description": "Gross sum of the invoice in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"sumDiscountsForeignCurrency": {
						"type": "string",
						"description": "Discounts sum of the invoice in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"sumNetAccounting": {
						"type": "string",
						"description": "Net accounting sum of the invoice. Is usually the same as sumNet",
						"readOnly": true,
						"example": "0"
					},
					"sumTaxAccounting": {
						"type": "string",
						"description": "Tax accounting sum of the invoice. Is usually the same as sumTax",
						"readOnly": true,
						"example": "0"
					},
					"sumGrossAccounting": {
						"type": "string",
						"description": "Gross accounting sum of the invoice. Is usually the same as sumGross",
						"readOnly": true,
						"example": "0"
					},
					"paidAmount": {
						"type": "number",
						"description": "Amount which has already been paid for this invoice by the customer",
						"format": "float",
						"readOnly": true,
						"example": 0
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"readOnly": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the invoice. Otherwise gross amount",
						"readOnly": true,
						"example": false
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if and when invoice was enshrined. Enshrined invoices can not be manipulated.",
						"format": "date-time",
						"readOnly": true
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"readOnly": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					},
					"deliveryDateUntil": {
						"type": "string",
						"description": "If the delivery date should be a time range, another timestamp can be provided in this attribute\r\n     * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.",
						"readOnly": true,
						"example": "0"
					},
					"datevConnectOnline": {
						"type": "object",
						"description": "Internal attribute",
						"readOnly": true
					},
					"sendPaymentReceivedNotificationDate": {
						"type": "string",
						"description": "Internal attribute",
						"readOnly": true,
						"example": "0"
					}
				},
				"description": "Invoice model"
			},
			"Model_ContactCustomField": {
				"title": "contact fields model",
				"required": [
					"contact",
					"contactCustomFieldSetting",
					"objectName",
					"value"
				],
				"properties": {
					"contact": {
						"$ref": "#/components/schemas/Model_ContactCustomField_contact"
					},
					"contactCustomFieldSetting": {
						"$ref": "#/components/schemas/Model_ContactCustomField_contactCustomFieldSetting"
					},
					"value": {
						"type": "string",
						"description": "The value of the contact field"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'ContactCustomField'.",
						"example": "ContactCustomField"
					}
				},
				"description": "contact fields model"
			},
			"Model_TagResponse": {
				"title": "Tag model",
				"properties": {
					"id": {
						"type": "string",
						"description": "Id of the tag",
						"readOnly": true,
						"example": "1"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'Tag'.",
						"readOnly": true,
						"example": "Tag"
					},
					"create": {
						"type": "string",
						"description": "Date of tag creation",
						"format": "date-time",
						"readOnly": true
					},
					"name": {
						"type": "string",
						"description": "name of the tag",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_TagCreateResponse_sevClient"
					}
				},
				"description": "tag model"
			},
			"Model_CheckAccountUpdate": {
				"title": "CheckAccount model",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the check account",
						"example": "Iron Bank"
					},
					"type": {
						"type": "string",
						"description": "The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>\r\n     Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection\r\n     to a bank application can not be managed over the API.",
						"example": "online",
						"enum": [
							"online",
							"offline"
						]
					},
					"importType": {
						"type": "string",
						"description": "Import type. Transactions can be imported by this method on the check account.",
						"nullable": true,
						"example": "CSV",
						"enum": [
							"CSV",
							"MT940",
							null
						]
					},
					"currency": {
						"type": "string",
						"description": "The currency of the check account.",
						"example": "EUR"
					},
					"defaultAccount": {
						"type": "integer",
						"description": "Defines if this check account is the default account.",
						"default": 0,
						"enum": [
							0,
							1
						]
					},
					"status": {
						"type": "integer",
						"description": "Status of the check account. 0 <-> Archived - 100 <-> Active",
						"default": 100,
						"enum": [
							0,
							100
						]
					},
					"autoMapTransactions": {
						"type": "integer",
						"description": "Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.",
						"nullable": true,
						"default": 1
					}
				},
				"description": "CheckAccount model. Responsible for the payment accounts."
			},
			"Model_creditNotePos": {
				"title": "creditNote position model",
				"required": [
					"mapAll",
					"objectName",
					"quantity",
					"taxRate",
					"unity"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The creditNote position id.",
						"nullable": true,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The creditNote position object name",
						"nullable": false
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false
					},
					"create": {
						"type": "string",
						"description": "Date of creditNote position creation",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"update": {
						"type": "string",
						"description": "Date of last creditNote position update",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"creditNote": {
						"$ref": "#/components/schemas/Model_creditNotePos_creditNote"
					},
					"part": {
						"$ref": "#/components/schemas/Model_InvoicePos_part"
					},
					"quantity": {
						"type": "number",
						"description": "Quantity of the article/part",
						"format": "float",
						"nullable": false,
						"example": 1
					},
					"price": {
						"type": "number",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"priceNet": {
						"type": "number",
						"description": "Net price of the part",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"priceTax": {
						"type": "number",
						"description": "Tax on the price of the part",
						"format": "float",
						"nullable": true,
						"example": 19
					},
					"priceGross": {
						"type": "number",
						"description": "Gross price of the part",
						"format": "float",
						"nullable": true,
						"example": 119
					},
					"name": {
						"type": "string",
						"description": "Name of the article/part.",
						"nullable": true,
						"example": "Dragonglass"
					},
					"unity": {
						"$ref": "#/components/schemas/Model_creditNotePos_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_creditNotePos_sevClient"
					},
					"positionNumber": {
						"type": "integer",
						"description": "Position number of your position. Can be used to creditNote multiple positions.",
						"nullable": true,
						"example": 1
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"nullable": true
					},
					"discount": {
						"type": "number",
						"description": "An optional discount of the position.",
						"format": "float",
						"nullable": true
					},
					"optional": {
						"type": "boolean",
						"description": "Defines if the position is optional.",
						"nullable": true
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the position.",
						"format": "float",
						"nullable": false,
						"example": 19
					},
					"sumDiscount": {
						"type": "number",
						"description": "Discount sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					}
				},
				"description": "creditNote position model"
			},
			"saveVoucher": {
				"required": [
					"voucher",
					"voucherPos"
				],
				"type": "object",
				"properties": {
					"voucher": {
						"$ref": "#/components/schemas/Model_Voucher"
					},
					"voucherPosSave": {
						"$ref": "#/components/schemas/Model_VoucherPos"
					},
					"voucherPosDelete": {
						"$ref": "#/components/schemas/saveVoucher_voucherPosDelete"
					},
					"filename": {
						"type": "string",
						"description": "Filename of a previously upload file which should be attached.",
						"format": "binary"
					}
				}
			},
			"saveOrderResponse": {
				"type": "object",
				"properties": {
					"order": {
						"$ref": "#/components/schemas/Model_OrderResponse"
					},
					"orderPos": {
						"$ref": "#/components/schemas/Model_OrderPosResponse"
					}
				}
			},
			"saveCreditNoteResponse": {
				"type": "object",
				"properties": {
					"voucher": {
						"$ref": "#/components/schemas/Model_creditNoteResponse"
					},
					"voucherPos": {
						"$ref": "#/components/schemas/Model_creditNotePosResponse"
					},
					"filename": {
						"type": "string",
						"description": "Filename of a previously upload file which should be attached.",
						"format": "binary"
					}
				}
			},
			"Model_ContactCustomFieldSetting": {
				"title": "contact field settings model",
				"required": [
					"name"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "name of the contact fields",
						"nullable": false
					},
					"description": {
						"type": "string",
						"description": "The description of the contact field"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'ContactCustomFieldSetting'.",
						"example": "ContactCustomFieldSetting"
					}
				},
				"description": "contact field settings model"
			},
			"Model_ContactResponse": {
				"title": "Contact model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The contact id",
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The contact object name",
						"readOnly": true,
						"example": "Contact"
					},
					"create": {
						"type": "string",
						"description": "Date of contact creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last contact update",
						"format": "date-time",
						"readOnly": true
					},
					"name": {
						"type": "string",
						"description": "The organization name.<br>\nBe aware that the type of contact will depend on this attribute.<br>\nIf it holds a value, the contact will be regarded as an organization.",
						"readOnly": true,
						"example": "string"
					},
					"status": {
						"type": "string",
						"description": "Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.",
						"readOnly": true,
						"example": "100"
					},
					"customerNumber": {
						"type": "string",
						"description": "The customer number",
						"readOnly": true,
						"example": "Customer-1337"
					},
					"parent": {
						"$ref": "#/components/schemas/Model_ContactResponse_parent"
					},
					"surename": {
						"type": "string",
						"description": "The <b>first</b> name of the contact.<br>\nYeah... not quite right in literally every way. We know.<br>\nNot to be used for organizations.",
						"readOnly": true,
						"example": "John"
					},
					"familyname": {
						"type": "string",
						"description": "The last name of the contact.<br>\nNot to be used for organizations.",
						"readOnly": true,
						"example": "Snow"
					},
					"titel": {
						"type": "string",
						"description": "A non-academic title for the contact.\nNot to be used for organizations.",
						"readOnly": true,
						"example": "Commander"
					},
					"category": {
						"$ref": "#/components/schemas/Model_ContactResponse_category"
					},
					"description": {
						"type": "string",
						"description": "A description for the contact.",
						"readOnly": true,
						"example": "Rightful king of the seven kingdoms"
					},
					"academicTitle": {
						"type": "string",
						"description": "A academic title for the contact.\nNot to be used for organizations.",
						"readOnly": true
					},
					"gender": {
						"type": "string",
						"description": "Gender of the contact.<br>\nNot to be used for organizations.",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_ContactResponse_sevClient"
					},
					"name2": {
						"type": "string",
						"description": "Second name of the contact.<br>\nNot to be used for organizations.",
						"readOnly": true,
						"example": "Targaryen"
					},
					"birthday": {
						"type": "string",
						"description": "Birthday of the contact.<br>\nNot to be used for organizations.",
						"format": "date",
						"readOnly": true
					},
					"vatNumber": {
						"type": "string",
						"description": "Vat number of the contact.",
						"readOnly": true
					},
					"bankAccount": {
						"type": "string",
						"description": "Bank account number (IBAN) of the contact.",
						"readOnly": true
					},
					"bankNumber": {
						"type": "string",
						"description": "Bank number of the bank used by the contact.",
						"readOnly": true
					},
					"defaultCashbackTime": {
						"type": "string",
						"description": "Absolute time in days which the contact has to pay his invoices and subsequently get a cashback.",
						"readOnly": true,
						"example": "string"
					},
					"defaultCashbackPercent": {
						"type": "string",
						"description": "Percentage of the invoice sum the contact gets back if he payed invoices in time.",
						"format": "float",
						"readOnly": true,
						"example": "string"
					},
					"defaultTimeToPay": {
						"type": "string",
						"description": "The payment goal in days which is set for every invoice of the contact.",
						"readOnly": true,
						"example": "string"
					},
					"taxNumber": {
						"type": "string",
						"description": "The tax number of the contact.",
						"readOnly": true
					},
					"taxOffice": {
						"type": "string",
						"description": "The tax office of the contact (only for greek customers).",
						"readOnly": true,
						"example": "string"
					},
					"exemptVat": {
						"type": "string",
						"description": "Defines if the contact is freed from paying vat.",
						"readOnly": true,
						"example": "false"
					},
					"taxType": {
						"type": "string",
						"description": "Defines which tax regulation the contact is using.",
						"readOnly": true,
						"enum": [
							"default",
							"eu",
							"noteu",
							"custom",
							"ss"
						]
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_ContactResponse_taxSet"
					},
					"defaultDiscountAmount": {
						"type": "string",
						"description": "The default discount the contact gets for every invoice.<br>\nDepending on defaultDiscountPercentage attribute, in percent or absolute value.",
						"format": "float",
						"readOnly": true,
						"example": "string"
					},
					"defaultDiscountPercentage": {
						"type": "string",
						"description": "Defines if the discount is a percentage (true) or an absolute value (false).",
						"readOnly": true,
						"example": "false"
					},
					"buyerReference": {
						"type": "string",
						"description": "Buyer reference of the contact.",
						"readOnly": true,
						"example": "string"
					},
					"governmentAgency": {
						"type": "string",
						"description": "Defines whether the contact is a government agency (true) or not (false).",
						"readOnly": true,
						"example": "false"
					},
					"additionalInformation": {
						"type": "string",
						"description": "Additional information stored for the contact.",
						"readOnly": true,
						"example": "string",
						"deprecated": true
					}
				},
				"description": "Contact model"
			},
			"Model_ContactAddress": {
				"title": "Contact address",
				"required": [
					"contact",
					"country"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The contact address id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The contact address object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of contact address creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last contact address update",
						"format": "date-time",
						"readOnly": true
					},
					"contact": {
						"$ref": "#/components/schemas/Model_ContactAddress_contact"
					},
					"street": {
						"type": "string",
						"description": "Street name",
						"nullable": true,
						"example": "South road 15"
					},
					"zip": {
						"type": "string",
						"description": "Zib code",
						"nullable": true,
						"example": "12345"
					},
					"city": {
						"type": "string",
						"description": "City name",
						"nullable": true,
						"example": "The North"
					},
					"country": {
						"$ref": "#/components/schemas/Model_ContactAddress_country"
					},
					"category": {
						"$ref": "#/components/schemas/Model_ContactAddress_category"
					},
					"name": {
						"type": "string",
						"description": "Name in address",
						"nullable": true,
						"example": "John Snow"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_ContactAddress_sevClient"
					},
					"name2": {
						"type": "string",
						"description": "Second name in address",
						"example": "Targaryen"
					},
					"name3": {
						"type": "string",
						"description": "Third name in address",
						"nullable": true
					},
					"name4": {
						"type": "string",
						"description": "Fourth name in address",
						"nullable": true
					}
				},
				"description": "ContactAddress model"
			},
			"Model_Part": {
				"title": "Part model",
				"required": [
					"name",
					"partNumber",
					"stock",
					"taxRate",
					"unity"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The part id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The part object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of part creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last part update",
						"format": "date-time",
						"readOnly": true
					},
					"name": {
						"type": "string",
						"description": "Name of the part",
						"example": "Dragonglass"
					},
					"partNumber": {
						"type": "string",
						"description": "The part number",
						"example": "Part-1000"
					},
					"text": {
						"type": "string",
						"description": "A text describing the part",
						"nullable": true
					},
					"category": {
						"$ref": "#/components/schemas/Model_Part_category"
					},
					"stock": {
						"type": "number",
						"description": "The stock of the part",
						"format": "float",
						"example": 10000
					},
					"stockEnabled": {
						"type": "boolean",
						"description": "Defines if the stock should be enabled",
						"nullable": false,
						"example": false
					},
					"unity": {
						"$ref": "#/components/schemas/Model_Part_unity"
					},
					"price": {
						"type": "number",
						"description": "Net price for which the part is sold. we will change this parameter so that the gross price is calculated automatically, until then the priceGross parameter must be used.",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"priceNet": {
						"type": "number",
						"description": "Net price for which the part is sold",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"priceGross": {
						"type": "number",
						"description": "Gross price for which the part is sold",
						"format": "float",
						"nullable": true,
						"example": 119
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_Part_sevClient"
					},
					"pricePurchase": {
						"type": "number",
						"description": "Purchase price of the part",
						"format": "float",
						"nullable": true,
						"example": 50
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the part",
						"format": "float",
						"example": 19
					},
					"status": {
						"type": "integer",
						"description": "Status of the part. 50 <-> Inactive - 100 <-> Active",
						"nullable": true,
						"example": 100,
						"enum": [
							50,
							100
						]
					},
					"internalComment": {
						"type": "string",
						"description": "An internal comment for the part.<br>\r\n     Does not appear on invoices and orders.",
						"nullable": true
					}
				},
				"description": "Part model"
			},
			"Model_PartUpdate": {
				"title": "Part model",
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The part id",
						"nullable": true,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The part object name",
						"nullable": true,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of part creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last part update",
						"format": "date-time",
						"readOnly": true
					},
					"name": {
						"type": "string",
						"description": "Name of the part",
						"example": "Dragonglass"
					},
					"partNumber": {
						"type": "string",
						"description": "The part number",
						"example": "Part-1000"
					},
					"text": {
						"type": "string",
						"description": "A text describing the part",
						"nullable": true
					},
					"category": {
						"$ref": "#/components/schemas/Model_Part_category"
					},
					"stock": {
						"type": "number",
						"description": "The stock of the part",
						"format": "float",
						"example": 10000
					},
					"stockEnabled": {
						"type": "boolean",
						"description": "Defines if the stock should be enabled",
						"nullable": true,
						"example": false
					},
					"unity": {
						"$ref": "#/components/schemas/Model_Part_unity"
					},
					"price": {
						"type": "number",
						"description": "Net price for which the part is sold. we will change this parameter so that the gross price is calculated automatically, until then the priceGross parameter must be used.",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"priceNet": {
						"type": "number",
						"description": "Net price for which the part is sold",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"priceGross": {
						"type": "number",
						"description": "Gross price for which the part is sold",
						"format": "float",
						"nullable": true,
						"example": 119
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_Part_sevClient"
					},
					"pricePurchase": {
						"type": "number",
						"description": "Purchase price of the part",
						"format": "float",
						"nullable": true,
						"example": 50
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the part",
						"format": "float",
						"example": 19
					},
					"status": {
						"type": "integer",
						"description": "Status of the part. 50 <-> Inactive - 100 <-> Active",
						"nullable": true,
						"example": 100,
						"enum": [
							50,
							100
						]
					},
					"internalComment": {
						"type": "string",
						"description": "An internal comment for the part.<br>\r\n     Does not appear on invoices and orders.",
						"nullable": true
					}
				},
				"description": "Part model"
			},
			"Model_CheckAccountResponse": {
				"title": "CheckAccount model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The check account id",
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The check account object name",
						"readOnly": true,
						"example": "CheckAccount"
					},
					"create": {
						"type": "string",
						"description": "Date of check account creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last check account update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_CheckAccountResponse_sevClient"
					},
					"name": {
						"type": "string",
						"description": "Name of the check account",
						"example": "Iron Bank"
					},
					"type": {
						"type": "string",
						"description": "The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>\r\n     Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection\r\n     to a bank application can not be managed over the API.",
						"example": "online",
						"enum": [
							"online",
							"offline"
						]
					},
					"importType": {
						"type": "string",
						"description": "Import type. Transactions can be imported by this method on the check account.",
						"nullable": true,
						"example": "CSV",
						"enum": [
							"CSV",
							"MT940",
							null
						]
					},
					"currency": {
						"type": "string",
						"description": "The currency of the check account.",
						"example": "EUR"
					},
					"defaultAccount": {
						"type": "string",
						"description": "Defines if this check account is the default account.",
						"default": "0"
					},
					"status": {
						"type": "string",
						"description": "Status of the check account. 0 <-> Archived - 100 <-> Active",
						"default": "100",
						"enum": [
							"0",
							"100"
						]
					},
					"bankServer": {
						"type": "string",
						"description": "Bank server of check account",
						"readOnly": true
					},
					"autoMapTransactions": {
						"type": "string",
						"description": "Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.",
						"nullable": true,
						"default": "1"
					}
				},
				"description": "CheckAccount model. Responsible for the payment accounts."
			},
			"Model_Email": {
				"title": "Email model",
				"required": [
					"from",
					"subject",
					"to"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The email id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The email object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of mail creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last mail update",
						"format": "date-time",
						"readOnly": true
					},
					"object": {
						"$ref": "#/components/schemas/Model_EmailOrder_object"
					},
					"from": {
						"type": "string",
						"description": "The sender of the email",
						"nullable": false
					},
					"to": {
						"type": "string",
						"description": "The recipient of the email",
						"nullable": false
					},
					"subject": {
						"type": "string",
						"description": "The subject of the email",
						"nullable": false
					},
					"text": {
						"type": "string",
						"description": "The text of the email",
						"nullable": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_EmailOrder_sevClient"
					},
					"cc": {
						"type": "string",
						"description": "A list of mail addresses which are in the cc",
						"nullable": true
					},
					"bcc": {
						"type": "string",
						"description": "A list of mail addresses which are in the bcc",
						"nullable": true
					},
					"arrived": {
						"type": "string",
						"description": "Date the mail arrived",
						"format": "date-time",
						"nullable": true
					}
				},
				"description": "Email model"
			},
			"Model_CheckAccountTransaction": {
				"title": "CheckAccountTransaction model",
				"required": [
					"amount",
					"checkAccount",
					"payeePayerName",
					"status",
					"valueDate"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The check account transaction id",
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The check account transaction object name",
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of check account transaction creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last check account transaction update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_CheckAccountTransaction_sevClient"
					},
					"valueDate": {
						"type": "string",
						"description": "Date the check account transaction was booked",
						"format": "date-time",
						"nullable": false
					},
					"entryDate": {
						"type": "string",
						"description": "Date the check account transaction was imported",
						"format": "date-time",
						"nullable": false
					},
					"paymtPurpose": {
						"type": "string",
						"description": "the purpose of the transaction",
						"example": "salary"
					},
					"amount": {
						"type": "number",
						"description": "Amount of the transaction",
						"format": "float",
						"nullable": false,
						"example": 100
					},
					"payeePayerName": {
						"type": "string",
						"description": "Name of the payee/payer",
						"nullable": false,
						"example": "Cercei Lannister"
					},
					"checkAccount": {
						"$ref": "#/components/schemas/Model_CheckAccountTransaction_checkAccount"
					},
					"status": {
						"type": "integer",
						"description": "Status of the check account transaction.<br>\r\n     100 <-> Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\n     400 <-> Booked",
						"nullable": false,
						"enum": [
							100,
							200,
							300,
							400
						]
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if the transaction has been enshrined and can not be changed any more.",
						"format": "date-time",
						"nullable": true
					},
					"sourceTransaction": {
						"$ref": "#/components/schemas/Model_CheckAccountTransaction_sourceTransaction"
					},
					"targetTransaction": {
						"$ref": "#/components/schemas/Model_CheckAccountTransaction_targetTransaction"
					}
				},
				"description": "CheckAccountTransaction model. Responsible for the transactions on payment accounts."
			},
			"Model_creditNoteResponse": {
				"title": "creditNote model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The creditNote id",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The creditNote object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of creditNote creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last creditNote update",
						"format": "date-time",
						"readOnly": true
					},
					"creditNoteNumber": {
						"type": "string",
						"description": "The creditNote number",
						"nullable": true,
						"example": "Offer-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_creditNoteResponse_contact"
					},
					"creditNoteDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"status": {
						"type": "string",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>status of credit note</a>\r\n    to see what the different status codes mean",
						"nullable": false,
						"example": "100",
						"enum": [
							"100",
							"200",
							"1000"
						]
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the creditNote number",
						"nullable": true,
						"example": "My Offer-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_creditNoteResponse_addressCountry"
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_createUser"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_creditNoteResponse_sevClient"
					},
					"deliveryTerms": {
						"type": "string",
						"description": "Delivery terms of the creditNote",
						"nullable": true
					},
					"deliveryDate": {
						"type": "string",
						"description": "Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil",
						"format": "date-time",
						"nullable": false
					},
					"paymentTerms": {
						"type": "string",
						"description": "Payment terms of the creditNote",
						"nullable": true
					},
					"version": {
						"type": "string",
						"description": "Version of the creditNote.<br>\r\n    Can be used if you have multiple drafts for the same creditNote.<br>\r\n    Should start with 0",
						"nullable": true,
						"example": "0"
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the creditNote must not contain any vat",
						"nullable": true,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_creditNoteResponse_contactPerson"
					},
					"taxRate": {
						"type": "string",
						"description": "Is overwritten by creditNote position tax rates",
						"nullable": true,
						"example": "19"
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_creditNoteResponse_taxSet"
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": true,
						"example": "Umsatzsteuer 19%"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the creditNote.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": true,
						"example": "default"
					},
					"creditNoteType": {
						"type": "string",
						"description": "Type of the creditNote. For more information on the different types, check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-credit-notes'>this</a>\r\n.",
						"nullable": true,
						"example": "CN"
					},
					"sendDate": {
						"type": "string",
						"description": "The date the creditNote was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the creditNote. Needs to be currency code according to ISO-4217",
						"nullable": true,
						"example": "EUR"
					},
					"sumNet": {
						"type": "string",
						"description": "Net sum of the creditNote",
						"readOnly": true,
						"example": "0"
					},
					"sumTax": {
						"type": "string",
						"description": "Tax sum of the creditNote",
						"readOnly": true,
						"example": "0"
					},
					"sumGross": {
						"type": "string",
						"description": "Gross sum of the creditNote",
						"readOnly": true,
						"example": "0"
					},
					"sumDiscounts": {
						"type": "string",
						"description": "Sum of all discounts in the creditNote",
						"readOnly": true,
						"example": "0"
					},
					"sumNetForeignCurrency": {
						"type": "string",
						"description": "Net sum of the creditNote in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"sumTaxForeignCurrency": {
						"type": "string",
						"description": "Tax sum of the creditNote in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"sumGrossForeignCurrency": {
						"type": "string",
						"description": "Gross sum of the creditNote in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"sumDiscountsForeignCurrency": {
						"type": "string",
						"description": "Discounts sum of the creditNote in the foreign currency",
						"readOnly": true,
						"example": "0"
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount",
						"example": false
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"nullable": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					}
				},
				"description": "creditNote model"
			},
			"Model_CreatePackingListFromOrder": {
				"title": "Create packing list",
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the order"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Order'",
						"example": "Order"
					}
				},
				"description": "order model",
				"nullable": false
			},
			"Model_InvoicePosUpdate": {
				"title": "Invoice position model",
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The invoice position id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The invoice position object name",
						"nullable": false,
						"readOnly": true,
						"example": "InvoicePos"
					},
					"create": {
						"type": "string",
						"description": "Date of invoice position creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last invoice position update",
						"format": "date-time",
						"readOnly": true
					},
					"invoice": {
						"$ref": "#/components/schemas/Model_InvoicePosUpdate_invoice"
					},
					"part": {
						"$ref": "#/components/schemas/Model_InvoicePos_part"
					},
					"quantity": {
						"type": "number",
						"description": "Quantity of the article/part",
						"format": "float",
						"nullable": true,
						"example": 1
					},
					"price": {
						"type": "number",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"name": {
						"type": "string",
						"description": "Name of the article/part.",
						"nullable": true,
						"example": "Dragonglass"
					},
					"unity": {
						"$ref": "#/components/schemas/Model_InvoicePos_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_InvoicePos_sevClient"
					},
					"positionNumber": {
						"type": "integer",
						"description": "Position number of your position. Can be used to order multiple positions.",
						"nullable": true
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"nullable": true
					},
					"discount": {
						"type": "number",
						"description": "An optional discount of the position.",
						"format": "float",
						"nullable": true
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the position.",
						"format": "float",
						"nullable": true,
						"example": 19
					},
					"sumDiscount": {
						"type": "number",
						"description": "Discount sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumNetAccounting": {
						"type": "number",
						"description": "Net accounting sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumTaxAccounting": {
						"type": "number",
						"description": "Tax accounting sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"sumGrossAccounting": {
						"type": "number",
						"description": "Gross accounting sum of the position",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"priceNet": {
						"type": "number",
						"description": "Net price of the part",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"priceGross": {
						"type": "number",
						"description": "Gross price of the part",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"priceTax": {
						"type": "number",
						"description": "Tax on the price of the part",
						"format": "float",
						"nullable": true
					}
				},
				"description": "Invoice position model"
			},
			"Model_OrderPosResponse": {
				"title": "Order position model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The order position id",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The order position object name",
						"nullable": false,
						"readOnly": true,
						"example": "OrderPos"
					},
					"create": {
						"type": "string",
						"description": "Date of order position creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last order position update",
						"format": "date-time",
						"readOnly": true
					},
					"order": {
						"$ref": "#/components/schemas/Model_OrderPosResponse_order"
					},
					"part": {
						"$ref": "#/components/schemas/Model_creditNotePosResponse_part"
					},
					"quantity": {
						"type": "string",
						"description": "Quantity of the article/part",
						"nullable": false,
						"example": "1"
					},
					"price": {
						"type": "string",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"nullable": true,
						"example": "100"
					},
					"priceNet": {
						"type": "string",
						"description": "Net price of the part",
						"nullable": true,
						"readOnly": true,
						"example": "100"
					},
					"priceTax": {
						"type": "string",
						"description": "Tax on the price of the part",
						"nullable": true,
						"example": "19"
					},
					"priceGross": {
						"type": "string",
						"description": "Gross price of the part",
						"nullable": true,
						"example": "119"
					},
					"name": {
						"type": "string",
						"description": "Name of the article/part.",
						"nullable": true,
						"example": "Dragonglass"
					},
					"unity": {
						"$ref": "#/components/schemas/Model_creditNotePosResponse_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_OrderPosResponse_sevClient"
					},
					"positionNumber": {
						"type": "string",
						"description": "Position number of your position. Can be used to order multiple positions.",
						"nullable": true,
						"example": "1"
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"nullable": true
					},
					"discount": {
						"type": "string",
						"description": "An optional discount of the position.",
						"nullable": true
					},
					"optional": {
						"type": "boolean",
						"description": "Defines if the position is optional.",
						"nullable": true
					},
					"taxRate": {
						"type": "string",
						"description": "Tax rate of the position.",
						"nullable": false,
						"example": "19"
					},
					"sumDiscount": {
						"type": "string",
						"description": "Discount sum of the position",
						"nullable": true,
						"readOnly": true
					}
				},
				"description": "Order position model"
			},
			"saveOrder": {
				"required": [
					"order",
					"orderPos"
				],
				"type": "object",
				"properties": {
					"order": {
						"$ref": "#/components/schemas/Model_Order"
					},
					"orderPosSave": {
						"$ref": "#/components/schemas/Model_OrderPos"
					},
					"orderPosDelete": {
						"$ref": "#/components/schemas/saveOrder_orderPosDelete"
					}
				}
			},
			"Model_AccountingContactResponse": {
				"title": "AccountingContact model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The accounting contact id",
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The accounting contact object name",
						"readOnly": true,
						"example": "AccountingContact"
					},
					"create": {
						"type": "string",
						"description": "Date of accounting contact creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last accounting contact update",
						"format": "date-time",
						"readOnly": true
					},
					"contact": {
						"$ref": "#/components/schemas/Model_AccountingContactResponse_contact"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_AccountingContactResponse_sevClient"
					},
					"debitorNumber": {
						"type": "string",
						"description": "Debitor number of the accounting contact.",
						"readOnly": true,
						"example": "0"
					},
					"creditorNumber": {
						"type": "string",
						"description": "Creditor number of the accounting contact.",
						"readOnly": true,
						"example": "0"
					}
				},
				"description": "Accounting contact model"
			},
			"Model_OrderPos": {
				"title": "Order position model",
				"required": [
					"quantity",
					"taxRate",
					"unity"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The order position id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The order position object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of order position creation",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last order position update",
						"readOnly": true
					},
					"order": {
						"$ref": "#/components/schemas/Model_OrderPos_order"
					},
					"part": {
						"$ref": "#/components/schemas/Model_InvoicePos_part"
					},
					"quantity": {
						"type": "number",
						"description": "Quantity of the article/part",
						"nullable": false,
						"example": 1
					},
					"price": {
						"type": "number",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"nullable": true,
						"example": 100
					},
					"priceNet": {
						"type": "number",
						"description": "Net price of the part",
						"nullable": true,
						"readOnly": true
					},
					"priceTax": {
						"type": "number",
						"description": "Tax on the price of the part",
						"nullable": true
					},
					"priceGross": {
						"type": "number",
						"description": "Gross price of the part",
						"nullable": true
					},
					"name": {
						"type": "number",
						"description": "Name of the article/part.",
						"nullable": true
					},
					"unity": {
						"$ref": "#/components/schemas/Model_creditNotePos_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_OrderPos_sevClient"
					},
					"positionNumber": {
						"type": "integer",
						"description": "Position number of your position. Can be used to order multiple positions.",
						"nullable": true,
						"example": 1
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"nullable": true
					},
					"discount": {
						"type": "number",
						"description": "An optional discount of the position.",
						"nullable": true
					},
					"optional": {
						"type": "boolean",
						"description": "Defines if the position is optional.",
						"nullable": true
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the position.",
						"nullable": false,
						"example": 19
					},
					"sumDiscount": {
						"type": "number",
						"description": "Discount sum of the position",
						"nullable": true,
						"readOnly": true
					}
				},
				"description": "Order position model"
			},
			"Model_VoucherResponse": {
				"title": "Voucher model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The voucher id",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The voucher object name",
						"nullable": false,
						"readOnly": true
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false,
						"example": true
					},
					"create": {
						"type": "string",
						"description": "Date of voucher creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last voucher update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_VoucherResponse_sevClient"
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_VoucherResponse_createUser"
					},
					"voucherDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"supplier": {
						"$ref": "#/components/schemas/Model_VoucherResponse_supplier"
					},
					"supplierName": {
						"type": "string",
						"description": "The supplier name.<br>\r\n     The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.",
						"nullable": true,
						"example": "John Snow"
					},
					"description": {
						"type": "string",
						"description": "The description of the voucher. Essentially the voucher number.",
						"nullable": true,
						"example": "Voucher-1000"
					},
					"document": {
						"$ref": "#/components/schemas/Model_VoucherResponse_document"
					},
					"payDate": {
						"type": "string",
						"description": "Needs to be timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"status": {
						"type": "string",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>status of vouchers</a>\r\n    to see what the different status codes mean",
						"nullable": true,
						"example": "50",
						"enum": [
							"50",
							"100",
							"1000"
						]
					},
					"sumNet": {
						"type": "string",
						"description": "Net sum of the voucher",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"sumTax": {
						"type": "string",
						"description": "Tax sum of the voucher",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"sumGross": {
						"type": "string",
						"description": "Gross sum of the voucher",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"sumNetAccounting": {
						"type": "string",
						"description": "Net accounting sum of the voucher. Is usually the same as sumNet",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"sumTaxAccounting": {
						"type": "string",
						"description": "Tax accounting sum of the voucher. Is usually the same as sumTax",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"sumGrossAccounting": {
						"type": "string",
						"description": "Gross accounting sum of the voucher. Is usually the same as sumGross",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"sumDiscounts": {
						"type": "string",
						"description": "Sum of all discounts in the voucher",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"sumDiscountsForeignCurrency": {
						"type": "string",
						"description": "Discounts sum of the voucher in the foreign currency",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"paidAmount": {
						"type": "number",
						"description": "Amount which has already been paid for this voucher by the customer",
						"nullable": true,
						"readOnly": true,
						"example": 0
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the voucher.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG \nTax rates are heavily connected to the tax type used.",
						"nullable": true,
						"example": "default"
					},
					"creditDebit": {
						"type": "string",
						"description": "Defines if your voucher is a credit (C) or debit (D)",
						"nullable": true,
						"example": "C",
						"enum": [
							"C",
							"D"
						]
					},
					"costCentre": {
						"$ref": "#/components/schemas/Model_VoucherResponse_costCentre"
					},
					"voucherType": {
						"type": "string",
						"description": "Type of the voucher. For more information on the different types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>this</a>\r\n",
						"nullable": true,
						"example": "VOU",
						"enum": [
							"VOU",
							"RV"
						]
					},
					"currency": {
						"type": "string",
						"description": "specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the \"propertyForeignCurrencyDeadline\" or \"propertyExchangeRate\" parameter must be specified. If both parameters are specified, then the \"propertyForeignCurrencyDeadline\" parameter is preferred",
						"nullable": true,
						"example": "EUR"
					},
					"propertyForeignCurrencyDeadline": {
						"type": "string",
						"description": "Defines the exchange rate day and and then the exchange rate is set from sevDesk. Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"propertyExchangeRate": {
						"type": "string",
						"description": "Defines the exchange rate",
						"nullable": true,
						"example": "0.8912"
					},
					"recurringInterval": {
						"type": "string",
						"description": "The DateInterval in which recurring vouchers are generated.<br>\r\n     Necessary attribute for all recurring vouchers.",
						"nullable": true,
						"enum": [
							"P0Y0M1W",
							"P0Y0M2W",
							"P0Y1M0W",
							"P0Y3M0W",
							"P0Y6M0W",
							"P1Y0M0W",
							"P2Y0M0W",
							"P3Y0M0W",
							"P4Y0M0W",
							"P5Y0M0W"
						]
					},
					"recurringStartDate": {
						"type": "string",
						"description": "The date when the recurring vouchers start being generated.<br>\r\n     Necessary attribute for all recurring vouchers.",
						"format": "date-time",
						"nullable": true
					},
					"recurringNextVoucher": {
						"type": "string",
						"description": "The date when the next voucher should be generated.<br>\r\n     Necessary attribute for all recurring vouchers.",
						"format": "date-time",
						"nullable": true
					},
					"recurringLastVoucher": {
						"type": "string",
						"description": "The date when the last voucher was generated.",
						"format": "date-time",
						"nullable": true
					},
					"recurringEndDate": {
						"type": "string",
						"description": "The date when the recurring vouchers end being generated.<br>\r\n    Necessary attribute for all recurring vouchers.",
						"format": "date-time",
						"nullable": true
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if and when voucher was enshrined. Enshrined vouchers can not be manipulated.",
						"format": "date-time",
						"nullable": true
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_VoucherResponse_taxSet"
					},
					"paymentDeadline": {
						"type": "string",
						"description": "Payment deadline of the voucher.",
						"format": "date-time",
						"nullable": true
					},
					"deliveryDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": false
					},
					"deliveryDateUntil": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					}
				},
				"description": "Voucher model"
			},
			"Model_ContactCustomFieldSettingUpdate": {
				"title": "contact fields model",
				"properties": {
					"name": {
						"type": "string",
						"description": "name of the contact fields"
					},
					"description": {
						"type": "string",
						"description": "The description of the contact field"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'ContactCustomFieldSetting'.",
						"example": "ContactCustomFieldSetting"
					}
				},
				"description": "contact fields model"
			},
			"Model_Voucher": {
				"title": "Voucher model",
				"required": [
					"creditDebit",
					"mapAll",
					"objectName",
					"status",
					"taxType",
					"voucherType"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The voucher id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The voucher object name",
						"nullable": false
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false,
						"example": true
					},
					"create": {
						"type": "string",
						"description": "Date of voucher creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last voucher update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_Voucher_sevClient"
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_Voucher_createUser"
					},
					"voucherDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"supplier": {
						"$ref": "#/components/schemas/Model_Voucher_supplier"
					},
					"supplierName": {
						"type": "string",
						"description": "The supplier name.<br>\r\n     The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.",
						"nullable": true,
						"example": "John Snow"
					},
					"description": {
						"type": "string",
						"description": "The description of the voucher. Essentially the voucher number.",
						"nullable": true,
						"example": "Voucher-1000"
					},
					"payDate": {
						"type": "string",
						"description": "Needs to be timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"status": {
						"type": "number",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>status of vouchers</a>\r\n    to see what the different status codes mean",
						"nullable": false,
						"example": 50,
						"enum": [
							50,
							100,
							1000
						]
					},
					"sumNet": {
						"type": "number",
						"description": "Net sum of the voucher",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumTax": {
						"type": "number",
						"description": "Tax sum of the voucher",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumGross": {
						"type": "number",
						"description": "Gross sum of the voucher",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumNetAccounting": {
						"type": "number",
						"description": "Net accounting sum of the voucher. Is usually the same as sumNet",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumTaxAccounting": {
						"type": "number",
						"description": "Tax accounting sum of the voucher. Is usually the same as sumTax",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumGrossAccounting": {
						"type": "number",
						"description": "Gross accounting sum of the voucher. Is usually the same as sumGross",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscounts": {
						"type": "number",
						"description": "Sum of all discounts in the voucher",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscountsForeignCurrency": {
						"type": "number",
						"description": "Discounts sum of the voucher in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"paidAmount": {
						"type": "number",
						"description": "Amount which has already been paid for this voucher by the customer",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the voucher.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": false,
						"example": "default"
					},
					"creditDebit": {
						"type": "string",
						"description": "Defines if your voucher is a credit (C) or debit (D)",
						"nullable": false,
						"example": "C",
						"enum": [
							"C",
							"D"
						]
					},
					"voucherType": {
						"type": "string",
						"description": "Type of the voucher. For more information on the different types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-vouchers'>this</a>\r\n",
						"nullable": false,
						"example": "VOU",
						"enum": [
							"VOU",
							"RV"
						]
					},
					"currency": {
						"type": "string",
						"description": "specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the \"propertyForeignCurrencyDeadline\" or \"propertyExchangeRate\" parameter must be specified. If both parameters are specified, then the \"propertyForeignCurrencyDeadline\" parameter is preferred",
						"nullable": true,
						"example": "EUR"
					},
					"propertyForeignCurrencyDeadline": {
						"type": "string",
						"description": "Defines the exchange rate day and and then the exchange rate is set from sevDesk. Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"propertyExchangeRate": {
						"type": "number",
						"description": "Defines the exchange rate",
						"format": "float",
						"nullable": true,
						"example": 0.8912
					},
					"recurringInterval": {
						"type": "string",
						"description": "The DateInterval in which recurring vouchers are generated.<br>\r\n     Necessary attribute for all recurring vouchers.",
						"nullable": true,
						"readOnly": true,
						"enum": [
							"P0Y0M1W",
							"P0Y0M2W",
							"P0Y1M0W",
							"P0Y3M0W",
							"P0Y6M0W",
							"P1Y0M0W",
							"P2Y0M0W",
							"P3Y0M0W",
							"P4Y0M0W",
							"P5Y0M0W"
						]
					},
					"recurringStartDate": {
						"type": "string",
						"description": "The date when the recurring vouchers start being generated.<br>\r\n     Necessary attribute for all recurring vouchers.",
						"format": "date-time",
						"nullable": true,
						"readOnly": true
					},
					"recurringNextVoucher": {
						"type": "string",
						"description": "The date when the next voucher should be generated.<br>\r\n     Necessary attribute for all recurring vouchers.",
						"format": "date-time",
						"nullable": true,
						"readOnly": true
					},
					"recurringLastVoucher": {
						"type": "string",
						"description": "The date when the last voucher was generated.",
						"format": "date-time",
						"nullable": true,
						"readOnly": true
					},
					"recurringEndDate": {
						"type": "string",
						"description": "The date when the recurring vouchers end being generated.<br>\r\n    Necessary attribute for all recurring vouchers.",
						"format": "date-time",
						"nullable": true,
						"readOnly": true
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if and when voucher was enshrined. Enshrined vouchers can not be manipulated.",
						"format": "date-time",
						"nullable": true,
						"readOnly": true
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_VoucherUpdate_taxSet"
					},
					"paymentDeadline": {
						"type": "string",
						"description": "Payment deadline of the voucher.",
						"format": "date-time",
						"nullable": true
					},
					"deliveryDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": false
					},
					"deliveryDateUntil": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"document": {
						"$ref": "#/components/schemas/Model_VoucherUpdate_document"
					},
					"costCentre": {
						"$ref": "#/components/schemas/Model_VoucherUpdate_costCentre"
					}
				},
				"description": "Voucher model"
			},
			"Model_Contact": {
				"title": "Contact model",
				"required": [
					"category"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The organization name.<br>\nBe aware that the type of contact will depend on this attribute.<br>\nIf it holds a value, the contact will be regarded as an organization.",
						"nullable": true
					},
					"status": {
						"type": "integer",
						"description": "Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.",
						"nullable": true,
						"default": 100
					},
					"customerNumber": {
						"type": "string",
						"description": "The customer number",
						"nullable": true,
						"example": "Customer-1337"
					},
					"parent": {
						"$ref": "#/components/schemas/Model_Contact_parent"
					},
					"surename": {
						"type": "string",
						"description": "The <b>first</b> name of the contact.<br>\nYeah... not quite right in literally every way. We know.<br>\nNot to be used for organizations.",
						"nullable": true,
						"example": "John"
					},
					"familyname": {
						"type": "string",
						"description": "The last name of the contact.<br>\nNot to be used for organizations.",
						"nullable": true,
						"example": "Snow"
					},
					"titel": {
						"type": "string",
						"description": "A non-academic title for the contact.\nNot to be used for organizations.",
						"nullable": true,
						"example": "Commander"
					},
					"category": {
						"$ref": "#/components/schemas/Model_Contact_category"
					},
					"description": {
						"type": "string",
						"description": "A description for the contact.",
						"nullable": true,
						"example": "Rightful king of the seven kingdoms"
					},
					"academicTitle": {
						"type": "string",
						"description": "A academic title for the contact.\nNot to be used for organizations.",
						"nullable": true
					},
					"gender": {
						"type": "string",
						"description": "Gender of the contact.<br>\nNot to be used for organizations.",
						"nullable": true
					},
					"name2": {
						"type": "string",
						"description": "Second name of the contact.<br>\nNot to be used for organizations.",
						"nullable": true,
						"example": "Targaryen"
					},
					"birthday": {
						"type": "string",
						"description": "Birthday of the contact.<br>\nNot to be used for organizations.",
						"format": "date",
						"nullable": true
					},
					"vatNumber": {
						"type": "string",
						"description": "Vat number of the contact.",
						"nullable": true
					},
					"bankAccount": {
						"type": "string",
						"description": "Bank account number (IBAN) of the contact.",
						"nullable": true
					},
					"bankNumber": {
						"type": "string",
						"description": "Bank number of the bank used by the contact.",
						"nullable": true
					},
					"defaultCashbackTime": {
						"type": "integer",
						"description": "Absolute time in days which the contact has to pay his invoices and subsequently get a cashback.",
						"nullable": true
					},
					"defaultCashbackPercent": {
						"type": "number",
						"description": "Percentage of the invoice sum the contact gets back if he payed invoices in time.",
						"format": "float",
						"nullable": true
					},
					"defaultTimeToPay": {
						"type": "integer",
						"description": "The payment goal in days which is set for every invoice of the contact.",
						"nullable": true
					},
					"taxNumber": {
						"type": "string",
						"description": "The tax number of the contact.",
						"nullable": true
					},
					"taxOffice": {
						"type": "string",
						"description": "The tax office of the contact (only for greek customers).",
						"nullable": true
					},
					"exemptVat": {
						"type": "boolean",
						"description": "Defines if the contact is freed from paying vat.",
						"nullable": true
					},
					"taxType": {
						"type": "string",
						"description": "Defines which tax regulation the contact is using.",
						"nullable": true,
						"enum": [
							"default",
							"eu",
							"noteu",
							"custom",
							"ss"
						]
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_Contact_taxSet"
					},
					"defaultDiscountAmount": {
						"type": "number",
						"description": "The default discount the contact gets for every invoice.<br>\nDepending on defaultDiscountPercentage attribute, in percent or absolute value.",
						"format": "float",
						"nullable": true
					},
					"defaultDiscountPercentage": {
						"type": "boolean",
						"description": "Defines if the discount is a percentage (true) or an absolute value (false).",
						"nullable": true
					},
					"buyerReference": {
						"type": "string",
						"description": "Buyer reference of the contact.",
						"nullable": true
					},
					"governmentAgency": {
						"type": "boolean",
						"description": "Defines whether the contact is a government agency (true) or not (false).",
						"nullable": true
					}
				},
				"description": "Contact model"
			},
			"saveVoucherResponse": {
				"type": "object",
				"properties": {
					"voucher": {
						"$ref": "#/components/schemas/Model_VoucherResponse"
					},
					"voucherPos": {
						"$ref": "#/components/schemas/Model_VoucherPosResponse"
					},
					"filename": {
						"type": "string",
						"description": "Filename of a previously upload file which should be attached.",
						"format": "binary"
					}
				}
			},
			"Model_OrderPosUpdate": {
				"title": "Order position model",
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The order position id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The order position object name",
						"nullable": false,
						"readOnly": true,
						"example": "OrderPos"
					},
					"create": {
						"type": "string",
						"description": "Date of order position creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last order position update",
						"format": "date-time",
						"readOnly": true
					},
					"order": {
						"$ref": "#/components/schemas/Model_OrderPos_order"
					},
					"part": {
						"$ref": "#/components/schemas/Model_InvoicePos_part"
					},
					"quantity": {
						"type": "number",
						"description": "Quantity of the article/part",
						"nullable": true,
						"example": 1
					},
					"price": {
						"type": "number",
						"description": "Price of the article/part. Is either gross or net, depending on the sevDesk account setting.",
						"nullable": true,
						"example": 100
					},
					"priceNet": {
						"type": "number",
						"description": "Net price of the part",
						"nullable": true,
						"readOnly": true
					},
					"priceTax": {
						"type": "number",
						"description": "Tax on the price of the part",
						"nullable": true
					},
					"priceGross": {
						"type": "number",
						"description": "Gross price of the part",
						"nullable": true
					},
					"name": {
						"type": "number",
						"description": "Name of the article/part.",
						"nullable": true
					},
					"unity": {
						"$ref": "#/components/schemas/Model_creditNotePos_unity"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_OrderPos_sevClient"
					},
					"positionNumber": {
						"type": "integer",
						"description": "Position number of your position. Can be used to order multiple positions.",
						"nullable": true,
						"example": 1
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"nullable": true
					},
					"discount": {
						"type": "number",
						"description": "An optional discount of the position.",
						"nullable": true
					},
					"optional": {
						"type": "boolean",
						"description": "Defines if the position is optional.",
						"nullable": true
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the position.",
						"nullable": true,
						"example": 19
					},
					"sumDiscount": {
						"type": "number",
						"description": "Discount sum of the position",
						"nullable": true,
						"readOnly": true
					}
				},
				"description": "Order position model"
			},
			"Model_CheckAccount": {
				"title": "CheckAccount model",
				"required": [
					"currency",
					"name",
					"status",
					"type"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The check account id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The check account object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of check account creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last check account update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_CheckAccount_sevClient"
					},
					"name": {
						"type": "string",
						"description": "Name of the check account",
						"nullable": false,
						"example": "Iron Bank"
					},
					"type": {
						"type": "string",
						"description": "The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>\r\n     Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection\r\n     to a bank application can not be managed over the API.",
						"nullable": false,
						"example": "online",
						"enum": [
							"online",
							"offline"
						]
					},
					"importType": {
						"type": "string",
						"description": "Import type. Transactions can be imported by this method on the check account.",
						"nullable": true,
						"example": "CSV",
						"enum": [
							"CSV",
							"MT940",
							null
						]
					},
					"currency": {
						"type": "string",
						"description": "The currency of the check account.",
						"nullable": false,
						"example": "EUR"
					},
					"defaultAccount": {
						"type": "integer",
						"description": "Defines if this check account is the default account.",
						"default": 0,
						"enum": [
							0,
							1
						]
					},
					"status": {
						"type": "integer",
						"description": "Status of the check account. 0 <-> Archived - 100 <-> Active",
						"default": 100,
						"enum": [
							0,
							100
						]
					},
					"bankServer": {
						"type": "string",
						"description": "Bank server of check account",
						"readOnly": true
					},
					"autoMapTransactions": {
						"type": "integer",
						"description": "Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.",
						"nullable": true,
						"default": 1
					}
				},
				"description": "CheckAccount model. Responsible for the payment accounts."
			},
			"Model_OrderUpdate": {
				"title": "Order model",
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The order id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The order object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of order creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last order update",
						"format": "date-time",
						"readOnly": true
					},
					"orderNumber": {
						"type": "string",
						"description": "The order number",
						"example": "Offer-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_OrderUpdate_contact"
					},
					"orderDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"status": {
						"type": "integer",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>status of orders</a>\r\n    to see what the different status codes mean",
						"nullable": true,
						"example": 100,
						"enum": [
							100,
							200,
							300,
							500,
							750,
							1000
						]
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the order number",
						"nullable": true,
						"example": "My Offer-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_OrderUpdate_addressCountry"
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_OrderUpdate_createUser"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_OrderUpdate_sevClient"
					},
					"deliveryTerms": {
						"type": "string",
						"description": "Delivery terms of the order",
						"nullable": true
					},
					"paymentTerms": {
						"type": "string",
						"description": "Payment terms of the order",
						"nullable": true
					},
					"origin": {
						"$ref": "#/components/schemas/Model_Order_origin"
					},
					"version": {
						"type": "integer",
						"description": "Version of the order.<br>\r\n    Can be used if you have multiple drafts for the same order.<br>\r\n    Should start with 0",
						"nullable": true,
						"example": 0
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the order must not contain any vat",
						"nullable": true,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_OrderUpdate_contactPerson"
					},
					"taxRate": {
						"type": "number",
						"description": "Is overwritten by order position tax rates",
						"nullable": true,
						"example": 19
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_OrderUpdate_taxSet"
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": true,
						"example": "Umsatzsteuer 19%"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the order.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": true,
						"example": "default"
					},
					"orderType": {
						"type": "string",
						"description": "Type of the order. For more information on the different types, check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>this</a>\r\n",
						"nullable": true,
						"example": "AN",
						"enum": [
							"AN",
							"AB",
							"LI"
						]
					},
					"sendDate": {
						"type": "string",
						"description": "The date the order was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the order. Needs to be currency code according to ISO-4217",
						"nullable": true,
						"example": "EUR"
					},
					"sumNet": {
						"type": "number",
						"description": "Net sum of the order",
						"nullable": false,
						"readOnly": true
					},
					"sumTax": {
						"type": "number",
						"description": "Tax sum of the order",
						"nullable": false,
						"readOnly": true
					},
					"sumGross": {
						"type": "number",
						"description": "Gross sum of the order",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscounts": {
						"type": "number",
						"description": "Sum of all discounts in the order",
						"nullable": false,
						"readOnly": true
					},
					"sumNetForeignCurrency": {
						"type": "number",
						"description": "Net sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"sumTaxForeignCurrency": {
						"type": "number",
						"description": "Tax sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"sumGrossForeignCurrency": {
						"type": "number",
						"description": "Gross sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscountsForeignCurrency": {
						"type": "number",
						"description": "Discounts sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the order. Otherwise gross amount",
						"nullable": true,
						"example": false
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the order. IMPORTANT: Please refer to the order section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"nullable": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					}
				},
				"description": "Order model"
			},
			"Model_CheckAccountTransactionUpdate": {
				"title": "CheckAccountTransaction model",
				"type": "object",
				"properties": {
					"valueDate": {
						"type": "string",
						"description": "Date the check account transaction was booked",
						"format": "date-time"
					},
					"entryDate": {
						"type": "string",
						"description": "Date the check account transaction was imported",
						"format": "date-time"
					},
					"paymtPurpose": {
						"type": "string",
						"description": "the purpose of the transaction",
						"example": "salary"
					},
					"amount": {
						"type": "number",
						"description": "Amount of the transaction",
						"format": "float",
						"nullable": true,
						"example": 100
					},
					"payeePayerName": {
						"type": "string",
						"description": "Name of the payee/payer",
						"nullable": true,
						"example": "Cercei Lannister"
					},
					"checkAccount": {
						"$ref": "#/components/schemas/Model_CheckAccountTransactionUpdate_checkAccount"
					},
					"status": {
						"type": "integer",
						"description": "Status of the check account transaction.<br>\r\n     100 <-> Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\n     400 <-> Booked",
						"enum": [
							100,
							200,
							300,
							400
						]
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if the transaction has been enshrined and can not be changed any more.",
						"format": "date-time",
						"nullable": true
					},
					"sourceTransaction": {
						"$ref": "#/components/schemas/Model_CheckAccountTransaction_sourceTransaction"
					},
					"targetTransaction": {
						"$ref": "#/components/schemas/Model_CheckAccountTransaction_targetTransaction"
					}
				},
				"description": "CheckAccountTransaction model. Responsible for the transactions on payment accounts."
			},
			"Model_CheckAccountTransactionResponse": {
				"title": "CheckAccountTransaction model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The check account transaction id",
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The check account transaction object name",
						"readOnly": true,
						"example": "CheckAccountTransaction"
					},
					"create": {
						"type": "string",
						"description": "Date of check account transaction creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last check account transaction update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_CheckAccountTransactionResponse_sevClient"
					},
					"valueDate": {
						"type": "string",
						"description": "Date the check account transaction was imported",
						"format": "date-time",
						"readOnly": true
					},
					"entryDate": {
						"type": "string",
						"description": "Date the check account transaction was booked",
						"format": "date-time",
						"readOnly": true
					},
					"paymtPurpose": {
						"type": "string",
						"description": "the purpose of the transaction",
						"readOnly": true,
						"example": "salary"
					},
					"amount": {
						"type": "string",
						"description": "Amount of the transaction",
						"readOnly": true,
						"example": "100"
					},
					"payeePayerName": {
						"type": "string",
						"description": "Name of the payee/payer",
						"readOnly": true,
						"example": "Cercei Lannister"
					},
					"checkAccount": {
						"$ref": "#/components/schemas/Model_CheckAccountTransactionResponse_checkAccount"
					},
					"status": {
						"type": "string",
						"description": "Status of the check account transaction.<br>\r\n     100 <-> Created<br>\r\n     200 <-> Linked<br>\r\n     300 <-> Private<br>\r\n     400 <-> Booked",
						"readOnly": true,
						"enum": [
							"100",
							"200",
							"300",
							"400"
						]
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if the transaction has been enshrined and can not be changed any more.",
						"format": "date-time",
						"readOnly": true
					},
					"sourceTransaction": {
						"$ref": "#/components/schemas/Model_CheckAccountTransactionResponse_sourceTransaction"
					},
					"targetTransaction": {
						"$ref": "#/components/schemas/Model_CheckAccountTransactionResponse_targetTransaction"
					}
				},
				"description": "CheckAccountTransaction model. Responsible for the transactions on payment accounts."
			},
			"Model_ContactCustomFieldUpdate": {
				"title": "contact fields model",
				"properties": {
					"contact": {
						"$ref": "#/components/schemas/Model_ContactCustomField_contact"
					},
					"contactCustomFieldSetting": {
						"$ref": "#/components/schemas/Model_ContactCustomField_contactCustomFieldSetting"
					},
					"value": {
						"type": "string",
						"description": "The value of the contact field"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'ContactCustomField'.",
						"example": "ContactCustomField"
					}
				},
				"description": "contact fields model"
			},
			"saveInvoiceResponse": {
				"type": "object",
				"properties": {
					"voucher": {
						"$ref": "#/components/schemas/Model_InvoiceResponse"
					},
					"voucherPos": {
						"$ref": "#/components/schemas/Model_InvoicePosResponse"
					},
					"filename": {
						"type": "string",
						"description": "Filename of a previously upload file which should be attached.",
						"format": "binary"
					}
				}
			},
			"Model_Invoice": {
				"title": "Invoice model",
				"required": [
					"addressCountry",
					"contact",
					"contactPerson",
					"currency",
					"discount",
					"invoiceDate",
					"invoiceType",
					"mapAll",
					"status",
					"taxRate",
					"taxText",
					"taxType"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The invoice id. <span style='color:red'>Required</span> if you want to create or update an invoice position for an existing invoice",
						"nullable": true
					},
					"objectName": {
						"type": "string",
						"description": "The invoice object name.",
						"nullable": false,
						"example": "Invoice"
					},
					"invoiceNumber": {
						"type": "string",
						"description": "The invoice number",
						"nullable": true,
						"readOnly": false,
						"example": "RE-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_Invoice_contact"
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_contactPerson"
					},
					"create": {
						"type": "string",
						"description": "Date of invoice creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last invoice update",
						"format": "date-time",
						"readOnly": true
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_InvoiceUpdate_sevClient"
					},
					"invoiceDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"nullable": false,
						"example": "01.01.2022"
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the invoice number",
						"nullable": true,
						"example": "Invoice RE-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true,
						"example": "header information"
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true,
						"example": "footer information"
					},
					"timeToPay": {
						"type": "integer",
						"description": "The time the customer has to pay the invoice in days",
						"nullable": true,
						"example": 20
					},
					"discount": {
						"type": "integer",
						"description": "If you want to give a discount, define the percentage here. Otherwise provide zero as value",
						"nullable": false,
						"example": 0
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.\r\n     * Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true,
						"example": "name\nstreet\npostCode city"
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_Invoice_addressCountry"
					},
					"payDate": {
						"type": "string",
						"description": "Needs to be timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": true
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_creditNote_createUser"
					},
					"deliveryDate": {
						"type": "string",
						"description": "Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil",
						"format": "date-time",
						"nullable": true
					},
					"deliveryDateUntil": {
						"type": "integer",
						"description": "If the delivery date should be a time range, another timestamp can be provided in this attribute\r\n     * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.",
						"nullable": true
					},
					"status": {
						"type": "string",
						"description": "Please have a look in our\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>Types and status of invoices</a>\r\n     to see what the different status codes mean",
						"nullable": false,
						"example": "100",
						"enum": [
							"50",
							"100",
							"200",
							"1000"
						]
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the invoice must not contain any vat",
						"nullable": true,
						"example": false
					},
					"taxRate": {
						"type": "number",
						"description": "Is overwritten by invoice position tax rates",
						"format": "float",
						"nullable": false,
						"example": 19
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": false,
						"example": "Umsatzsteuer 19%"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the invoice.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": false,
						"example": "default",
						"enum": [
							"default",
							"eu",
							"noteu",
							"custom"
						]
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_Invoice_taxSet"
					},
					"dunningLevel": {
						"type": "integer",
						"description": "Defines how many reminders have already been sent for the invoice.\r\n    Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.",
						"nullable": true,
						"readOnly": true
					},
					"paymentMethod": {
						"$ref": "#/components/schemas/Model_Invoice_paymentMethod"
					},
					"sendDate": {
						"type": "string",
						"description": "The date the invoice was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"invoiceType": {
						"type": "string",
						"description": "Type of the invoice. For more information on the different types, check\r\n     <a href='https://api.sevdesk.de/#section/Types-and-status-of-invoices'>this</a> section\r\n",
						"nullable": false,
						"example": "RE",
						"enum": [
							"RE",
							"WKR",
							"SR",
							"MA",
							"TR",
							"ER"
						]
					},
					"accountIntervall": {
						"type": "string",
						"description": "The interval in which recurring invoices are due as ISO-8601 duration.<br>\r\n     Necessary attribute for all recurring invoices.",
						"nullable": true,
						"readOnly": true
					},
					"accountNextInvoice": {
						"type": "integer",
						"description": "Timestamp when the next invoice will be generated by this recurring invoice.",
						"nullable": true,
						"readOnly": true
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the invoice. Needs to be currency code according to ISO-4217",
						"nullable": false,
						"example": "EUR"
					},
					"sumNet": {
						"type": "number",
						"description": "Net sum of the invoice",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumTax": {
						"type": "number",
						"description": "Tax sum of the invoice",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumGross": {
						"type": "number",
						"description": "Gross sum of the invoice",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscounts": {
						"type": "number",
						"description": "Sum of all discounts in the invoice",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumNetForeignCurrency": {
						"type": "number",
						"description": "Net sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumTaxForeignCurrency": {
						"type": "number",
						"description": "Tax sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumGrossForeignCurrency": {
						"type": "number",
						"description": "Gross sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscountsForeignCurrency": {
						"type": "number",
						"description": "Discounts sum of the invoice in the foreign currency",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumNetAccounting": {
						"type": "number",
						"description": "Net accounting sum of the invoice. Is usually the same as sumNet",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumTaxAccounting": {
						"type": "number",
						"description": "Tax accounting sum of the invoice. Is usually the same as sumTax",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"sumGrossAccounting": {
						"type": "number",
						"description": "Gross accounting sum of the invoice. Is usually the same as sumGross",
						"format": "float",
						"nullable": false,
						"readOnly": true
					},
					"paidAmount": {
						"type": "number",
						"description": "Amount which has already been paid for this invoice by the customer",
						"format": "float",
						"nullable": true,
						"readOnly": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the invoice. Otherwise gross amount",
						"nullable": false,
						"example": false
					},
					"enshrined": {
						"type": "string",
						"description": "Defines if and when invoice was enshrined. Enshrined invoices can not be manipulated.",
						"format": "date-time",
						"nullable": true,
						"readOnly": true
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the invoice.",
						"nullable": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					},
					"origin": {
						"$ref": "#/components/schemas/Model_Invoice_origin"
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false
					}
				},
				"description": "Invoice model"
			},
			"Model_ContactAddressUpdate": {
				"title": "Contact address",
				"type": "object",
				"properties": {
					"contact": {
						"$ref": "#/components/schemas/Model_ContactAddressUpdate_contact"
					},
					"street": {
						"type": "string",
						"description": "Street name",
						"nullable": true,
						"example": "South road 15"
					},
					"zip": {
						"type": "string",
						"description": "Zib code",
						"nullable": true,
						"example": "12345"
					},
					"city": {
						"type": "string",
						"description": "City name",
						"nullable": true,
						"example": "The North"
					},
					"country": {
						"$ref": "#/components/schemas/Model_ContactAddressUpdate_country"
					},
					"category": {
						"$ref": "#/components/schemas/Model_ContactAddress_category"
					},
					"name": {
						"type": "string",
						"description": "Name in address",
						"nullable": true,
						"example": "John Snow"
					},
					"name2": {
						"type": "string",
						"description": "Second name in address",
						"example": "Targaryen"
					},
					"name3": {
						"type": "string",
						"description": "Third name in address",
						"nullable": true
					},
					"name4": {
						"type": "string",
						"description": "Fourth name in address",
						"nullable": true
					}
				},
				"description": "ContactAddress model"
			},
			"Model_ContactUpdate": {
				"title": "Contact model",
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The organization name.<br>\nBe aware that the type of contact will depend on this attribute.<br>\nIf it holds a value, the contact will be regarded as an organization.",
						"nullable": true
					},
					"status": {
						"type": "integer",
						"description": "Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.",
						"nullable": true,
						"default": 100
					},
					"customerNumber": {
						"type": "string",
						"description": "The customer number",
						"nullable": true,
						"example": "Customer-1337"
					},
					"parent": {
						"$ref": "#/components/schemas/Model_ContactUpdate_parent"
					},
					"surename": {
						"type": "string",
						"description": "The <b>first</b> name of the contact.<br>\nYeah... not quite right in literally every way. We know.<br>\nNot to be used for organizations.",
						"nullable": true,
						"example": "John"
					},
					"familyname": {
						"type": "string",
						"description": "The last name of the contact.<br>\nNot to be used for organizations.",
						"nullable": true,
						"example": "Snow"
					},
					"titel": {
						"type": "string",
						"description": "A non-academic title for the contact.\nNot to be used for organizations.",
						"nullable": true,
						"example": "Commander"
					},
					"category": {
						"$ref": "#/components/schemas/Model_ContactUpdate_category"
					},
					"description": {
						"type": "string",
						"description": "A description for the contact.",
						"nullable": true,
						"example": "Rightful king of the seven kingdoms"
					},
					"academicTitle": {
						"type": "string",
						"description": "A academic title for the contact.\nNot to be used for organizations.",
						"nullable": true
					},
					"gender": {
						"type": "string",
						"description": "Gender of the contact.<br>\nNot to be used for organizations.",
						"nullable": true
					},
					"name2": {
						"type": "string",
						"description": "Second name of the contact.<br>\nNot to be used for organizations.",
						"nullable": true,
						"example": "Targaryen"
					},
					"birthday": {
						"type": "string",
						"description": "Birthday of the contact.<br>\nNot to be used for organizations.",
						"format": "date",
						"nullable": true
					},
					"vatNumber": {
						"type": "string",
						"description": "Vat number of the contact.",
						"nullable": true
					},
					"bankAccount": {
						"type": "string",
						"description": "Bank account number (IBAN) of the contact.",
						"nullable": true
					},
					"bankNumber": {
						"type": "string",
						"description": "Bank number of the bank used by the contact.",
						"nullable": true
					},
					"defaultCashbackTime": {
						"type": "integer",
						"description": "Absolute time in days which the contact has to pay his invoices and subsequently get a cashback.",
						"nullable": true
					},
					"defaultCashbackPercent": {
						"type": "number",
						"description": "Percentage of the invoice sum the contact gets back if he payed invoices in time.",
						"format": "float",
						"nullable": true
					},
					"defaultTimeToPay": {
						"type": "integer",
						"description": "The payment goal in days which is set for every invoice of the contact.",
						"nullable": true
					},
					"taxNumber": {
						"type": "string",
						"description": "The tax number of the contact.",
						"nullable": true
					},
					"taxOffice": {
						"type": "string",
						"description": "The tax office of the contact (only for greek customers).",
						"nullable": true
					},
					"exemptVat": {
						"type": "boolean",
						"description": "Defines if the contact is freed from paying vat.",
						"nullable": true
					},
					"taxType": {
						"type": "string",
						"description": "Defines which tax regulation the contact is using.",
						"nullable": true,
						"enum": [
							"default",
							"eu",
							"noteu",
							"custom",
							"ss"
						]
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_Contact_taxSet"
					},
					"defaultDiscountAmount": {
						"type": "number",
						"description": "The default discount the contact gets for every invoice.<br>\nDepending on defaultDiscountPercentage attribute, in percent or absolute value.",
						"format": "float",
						"nullable": true
					},
					"defaultDiscountPercentage": {
						"type": "boolean",
						"description": "Defines if the discount is a percentage (true) or an absolute value (false).",
						"nullable": true
					},
					"buyerReference": {
						"type": "string",
						"description": "Buyer reference of the contact.",
						"nullable": true
					},
					"governmentAgency": {
						"type": "boolean",
						"description": "Defines whether the contact is a government agency (true) or not (false).",
						"nullable": true
					}
				},
				"description": "Contact model"
			},
			"saveInvoice": {
				"required": [
					"invoice",
					"invoicePos"
				],
				"type": "object",
				"properties": {
					"invoice": {
						"$ref": "#/components/schemas/Model_Invoice"
					},
					"invoicePosSave": {
						"$ref": "#/components/schemas/Model_InvoicePos"
					},
					"invoicePosDelete": {
						"$ref": "#/components/schemas/saveInvoice_invoicePosDelete"
					},
					"filename": {
						"type": "string",
						"description": "Filename of a previously upload file which should be attached.",
						"format": "binary"
					},
					"discountSave": {
						"$ref": "#/components/schemas/saveInvoice_discountSave"
					},
					"discountDelete": {
						"$ref": "#/components/schemas/saveInvoice_discountDelete"
					}
				}
			},
			"Model_OrderResponse": {
				"title": "Order model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The order id",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The order object name",
						"nullable": false,
						"readOnly": true,
						"example": "Order"
					},
					"create": {
						"type": "string",
						"description": "Date of order creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last order update",
						"format": "date-time",
						"readOnly": true
					},
					"orderNumber": {
						"type": "string",
						"description": "The order number",
						"example": "Offer-1000"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_OrderResponse_contact"
					},
					"orderDate": {
						"type": "string",
						"description": "Needs to be provided as timestamp or dd.mm.yyyy",
						"format": "date-time",
						"nullable": false
					},
					"status": {
						"type": "string",
						"description": "Please have a look in \r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>status of orders</a>\r\n    to see what the different status codes mean",
						"nullable": false,
						"example": "100",
						"enum": [
							"100",
							"200",
							"300",
							"500",
							"750",
							"1000"
						]
					},
					"header": {
						"type": "string",
						"description": "Normally consist of prefix plus the order number",
						"nullable": false,
						"example": "My Offer-1000"
					},
					"headText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"footText": {
						"type": "string",
						"description": "Certain html tags can be used here to format your text",
						"nullable": true
					},
					"addressCountry": {
						"$ref": "#/components/schemas/Model_OrderResponse_addressCountry"
					},
					"createUser": {
						"$ref": "#/components/schemas/Model_InvoiceResponse_createUser"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_OrderResponse_sevClient"
					},
					"deliveryTerms": {
						"type": "string",
						"description": "Delivery terms of the order",
						"nullable": true
					},
					"paymentTerms": {
						"type": "string",
						"description": "Payment terms of the order",
						"nullable": true
					},
					"origin": {
						"$ref": "#/components/schemas/Model_OrderResponse_origin"
					},
					"version": {
						"type": "string",
						"description": "Version of the order.<br>\r\n    Can be used if you have multiple drafts for the same order.<br>\r\n    Should start with 0",
						"nullable": false,
						"example": "0"
					},
					"smallSettlement": {
						"type": "boolean",
						"description": "Defines if the client uses the small settlement scheme.\r\n    If yes, the order must not contain any vat",
						"nullable": false,
						"example": false
					},
					"contactPerson": {
						"$ref": "#/components/schemas/Model_OrderResponse_contactPerson"
					},
					"taxRate": {
						"type": "string",
						"description": "Is overwritten by order position tax rates",
						"nullable": false,
						"example": "19"
					},
					"taxSet": {
						"$ref": "#/components/schemas/Model_OrderResponse_taxSet"
					},
					"taxText": {
						"type": "string",
						"description": "A common tax text would be 'Umsatzsteuer 19%'",
						"nullable": false,
						"example": "Umsatzsteuer 19%"
					},
					"taxType": {
						"type": "string",
						"description": "Tax type of the order.\nThere are four tax types:\n1. default - Umsatzsteuer ausweisen\n2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)\n3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)\n4. custom - Using custom tax set\n5. ss - Not subject to VAT according to §19 1 UStG\nTax rates are heavily connected to the tax type used.",
						"nullable": false,
						"example": "default"
					},
					"orderType": {
						"type": "string",
						"description": "Type of the order. For more information on the different types, check\r\n    <a href='https://api.sevdesk.de/#section/Types-and-status-of-orders'>this</a>\r\n",
						"nullable": false,
						"example": "AN",
						"enum": [
							"AN",
							"AB",
							"LI"
						]
					},
					"sendDate": {
						"type": "string",
						"description": "The date the order was sent to the customer",
						"format": "date-time",
						"nullable": true
					},
					"address": {
						"type": "string",
						"description": "Complete address of the recipient including name, street, city, zip and country.<br>\r\n     Line breaks can be used and will be displayed on the invoice pdf.",
						"nullable": true
					},
					"currency": {
						"type": "string",
						"description": "Currency used in the order. Needs to be currency code according to ISO-4217",
						"nullable": false,
						"example": "EUR"
					},
					"sumNet": {
						"type": "string",
						"description": "Net sum of the order",
						"nullable": false,
						"readOnly": true
					},
					"sumTax": {
						"type": "string",
						"description": "Tax sum of the order",
						"nullable": false,
						"readOnly": true
					},
					"sumGross": {
						"type": "string",
						"description": "Gross sum of the order",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscounts": {
						"type": "string",
						"description": "Sum of all discounts in the order",
						"nullable": false,
						"readOnly": true
					},
					"sumNetForeignCurrency": {
						"type": "string",
						"description": "Net sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"sumTaxForeignCurrency": {
						"type": "string",
						"description": "Tax sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"sumGrossForeignCurrency": {
						"type": "string",
						"description": "Gross sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"sumDiscountsForeignCurrency": {
						"type": "string",
						"description": "Discounts sum of the order in the foreign currency",
						"nullable": false,
						"readOnly": true
					},
					"customerInternalNote": {
						"type": "string",
						"description": "Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'",
						"nullable": true
					},
					"showNet": {
						"type": "boolean",
						"description": "If true, the net amount of each position will be shown on the order. Otherwise gross amount",
						"nullable": false,
						"example": false
					},
					"sendType": {
						"type": "string",
						"description": "Type which was used to send the order. IMPORTANT: Please refer to the order section of the\r\n     *     API-Overview to understand how this attribute can be used before using it!",
						"nullable": true,
						"enum": [
							"VPR",
							"VPDF",
							"VM",
							"VP"
						]
					}
				},
				"description": "Order model"
			},
			"Model_VoucherPos": {
				"title": "VoucherPos model",
				"required": [
					"accountingType",
					"mapAll",
					"net",
					"objectName",
					"sumGross",
					"sumNet",
					"taxRate",
					"voucher"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The voucher position id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The voucher position object name",
						"nullable": false
					},
					"mapAll": {
						"type": "boolean",
						"nullable": false
					},
					"create": {
						"type": "string",
						"description": "Date of voucher position creation",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"update": {
						"type": "string",
						"description": "Date of last voucher position update",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_VoucherPos_sevClient"
					},
					"voucher": {
						"$ref": "#/components/schemas/Model_VoucherPos_voucher"
					},
					"accountingType": {
						"$ref": "#/components/schemas/Model_VoucherPos_accountingType"
					},
					"estimatedAccountingType": {
						"$ref": "#/components/schemas/Model_VoucherPos_estimatedAccountingType"
					},
					"taxRate": {
						"type": "number",
						"description": "Tax rate of the voucher position.",
						"format": "float",
						"example": 19
					},
					"net": {
						"type": "boolean",
						"description": "Determines whether 'sumNet' or 'sumGross' is regarded.<br>\r\n     If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'.",
						"example": true
					},
					"isAsset": {
						"type": "boolean",
						"description": "Determines whether position is regarded as an asset which can be depreciated.",
						"example": false
					},
					"sumNet": {
						"type": "number",
						"description": "Net sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'true', otherwise its readOnly.",
						"format": "float",
						"example": 100
					},
					"sumTax": {
						"type": "number",
						"description": "Tax sum of the voucher position.",
						"format": "float",
						"readOnly": true,
						"example": 19
					},
					"sumGross": {
						"type": "number",
						"description": "Gross sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'false', otherwise its readOnly.",
						"format": "float",
						"example": 119
					},
					"sumNetAccounting": {
						"type": "number",
						"description": "Net accounting sum. Is equal to sumNet.",
						"format": "float",
						"readOnly": true
					},
					"sumTaxAccounting": {
						"type": "number",
						"description": "Tax accounting sum. Is equal to sumTax.",
						"format": "float",
						"readOnly": true
					},
					"sumGrossAccounting": {
						"type": "number",
						"description": "Gross accounting sum. Is equal to sumGross.",
						"format": "float",
						"readOnly": true
					},
					"comment": {
						"type": "string",
						"description": "Comment for the voucher position.",
						"nullable": true
					}
				},
				"description": "Voucher position model"
			},
			"Model_CommunicationWayResponse": {
				"title": "CommunicationWay model",
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The communication way id",
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The communication way object name",
						"readOnly": true,
						"example": "CommunicationWay"
					},
					"create": {
						"type": "string",
						"description": "Date of communication way creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last communication way update",
						"format": "date-time",
						"readOnly": true
					},
					"contact": {
						"$ref": "#/components/schemas/Model_CommunicationWayResponse_contact"
					},
					"type": {
						"type": "string",
						"description": "Type of the communication way",
						"readOnly": true,
						"example": "EMAIL",
						"enum": [
							"EMAIL",
							"PHONE",
							"WEB",
							"MOBILE"
						]
					},
					"value": {
						"type": "string",
						"description": "The value of the communication way.<br>\r\n     For example the phone number, e-mail address or website.",
						"readOnly": true
					},
					"key": {
						"$ref": "#/components/schemas/Model_CommunicationWayResponse_key"
					},
					"main": {
						"type": "string",
						"description": "Defines whether the communication way is the main communication way for the contact.",
						"readOnly": true,
						"example": "0"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_CommunicationWayResponse_sevClient"
					}
				},
				"description": "Contact communication way model"
			},
			"Model_ChangeLayoutResponse": {
				"title": "Layout model",
				"type": "object",
				"properties": {
					"result": {
						"type": "string",
						"example": "1"
					},
					"metadaten": {
						"$ref": "#/components/schemas/Model_ChangeLayoutResponse_metadaten"
					}
				},
				"description": "Layout model"
			},
			"Model_CreateInvoiceFromOrder": {
				"title": "Create Invoice",
				"required": [
					"order"
				],
				"properties": {
					"order": {
						"$ref": "#/components/schemas/Model_CreateInvoiceFromOrder_order"
					},
					"type": {
						"type": "string",
						"description": "defines the type of amount",
						"nullable": true,
						"enum": [
							"percentage",
							"net",
							"gross"
						]
					},
					"amount": {
						"type": "number",
						"description": "Amount which has already been paid for this Invoice",
						"nullable": true,
						"example": 100
					},
					"partialType": {
						"type": "string",
						"description": "defines the type of the invoice\n1. RE - Schlussrechnung\n2. TR - Teilrechnung\n3. AR - Abschlagsrechnung",
						"nullable": true,
						"enum": [
							"RE",
							"TR",
							"AR"
						]
					}
				},
				"description": "Invoice model"
			},
			"Model_ContactAddressResponse": {
				"title": "Contact address",
				"required": [
					"contact",
					"country"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The contact address id",
						"nullable": false,
						"readOnly": true
					},
					"objectName": {
						"type": "string",
						"description": "The contact address object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of contact address creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last contact address update",
						"format": "date-time",
						"readOnly": true
					},
					"contact": {
						"$ref": "#/components/schemas/Model_ContactAddress_contact"
					},
					"street": {
						"type": "string",
						"description": "Street name",
						"nullable": true,
						"example": "South road 15"
					},
					"zip": {
						"type": "string",
						"description": "Zib code",
						"nullable": true,
						"example": "12345"
					},
					"city": {
						"type": "string",
						"description": "City name",
						"nullable": true,
						"example": "The North"
					},
					"country": {
						"$ref": "#/components/schemas/Model_ContactAddress_country"
					},
					"category": {
						"$ref": "#/components/schemas/Model_ContactAddress_category"
					},
					"name": {
						"type": "string",
						"description": "Name in address",
						"nullable": true,
						"example": "John Snow"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_ContactAddress_sevClient"
					},
					"name2": {
						"type": "string",
						"description": "Second name in address",
						"example": "Targaryen"
					},
					"name3": {
						"type": "string",
						"description": "Third name in address",
						"nullable": true
					},
					"name4": {
						"type": "string",
						"description": "Fourth name in address",
						"nullable": true
					}
				},
				"description": "ContactAddress model"
			},
			"saveCreditNote": {
				"required": [
					"creditNote",
					"creditNotePos"
				],
				"type": "object",
				"properties": {
					"creditNote": {
						"$ref": "#/components/schemas/Model_creditNote"
					},
					"creditNotePosSave": {
						"$ref": "#/components/schemas/Model_creditNotePos"
					},
					"creditNotePosDelete": {
						"$ref": "#/components/schemas/saveCreditNote_creditNotePosDelete"
					},
					"filename": {
						"type": "string",
						"description": "Filename of a previously upload file which should be attached.",
						"format": "binary"
					},
					"discountSave": {
						"$ref": "#/components/schemas/saveInvoice_discountSave"
					},
					"discountDelete": {
						"$ref": "#/components/schemas/saveCreditNote_discountDelete"
					}
				}
			},
			"Model_VoucherPosResponse": {
				"title": "VoucherPos model",
				"required": [
					"accountingType",
					"net",
					"sumGross",
					"sumNet",
					"taxRate",
					"voucher"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The voucher position id",
						"nullable": false,
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "The voucher position object name",
						"nullable": false,
						"readOnly": true
					},
					"create": {
						"type": "string",
						"description": "Date of voucher position creation",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"update": {
						"type": "string",
						"description": "Date of last voucher position update",
						"readOnly": true,
						"example": "01.01.2020"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_VoucherPosResponse_sevClient"
					},
					"voucher": {
						"$ref": "#/components/schemas/Model_VoucherPosResponse_voucher"
					},
					"accountingType": {
						"$ref": "#/components/schemas/Model_VoucherPosResponse_accountingType"
					},
					"estimatedAccountingType": {
						"$ref": "#/components/schemas/Model_VoucherPosResponse_estimatedAccountingType"
					},
					"taxRate": {
						"type": "string",
						"description": "Tax rate of the voucher position.",
						"example": "19"
					},
					"net": {
						"type": "boolean",
						"description": "Determines whether 'sumNet' or 'sumGross' is regarded.<br>\r\n     If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'.",
						"example": true
					},
					"isAsset": {
						"type": "boolean",
						"description": "Determines whether position is regarded as an asset which can be depreciated.",
						"example": false
					},
					"sumNet": {
						"type": "string",
						"description": "Net sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'true', otherwise its readOnly.",
						"example": "100"
					},
					"sumTax": {
						"type": "string",
						"description": "Tax sum of the voucher position.",
						"readOnly": true,
						"example": "19"
					},
					"sumGross": {
						"type": "string",
						"description": "Gross sum of the voucher position.<br>\r\n    Only regarded if 'net' is 'false', otherwise its readOnly.",
						"example": "119"
					},
					"sumNetAccounting": {
						"type": "string",
						"description": "Net accounting sum. Is equal to sumNet.",
						"readOnly": true,
						"example": "0"
					},
					"sumTaxAccounting": {
						"type": "string",
						"description": "Tax accounting sum. Is equal to sumTax.",
						"readOnly": true,
						"example": "0"
					},
					"sumGrossAccounting": {
						"type": "string",
						"description": "Gross accounting sum. Is equal to sumGross.",
						"readOnly": true,
						"example": "0"
					},
					"comment": {
						"type": "string",
						"description": "Comment for the voucher position.",
						"nullable": true
					}
				},
				"description": "Voucher position model"
			},
			"Model_ContactCustomFieldResponse": {
				"title": "contact fields model",
				"properties": {
					"id": {
						"type": "string",
						"description": "id of the contact field",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'ContactCustomField'.",
						"example": "ContactCustomField"
					},
					"create": {
						"type": "string",
						"description": "Date of contact field creation",
						"format": "date-time"
					},
					"update": {
						"type": "string",
						"description": "Date of contact field update",
						"format": "date-time"
					},
					"sevClient": {
						"$ref": "#/components/schemas/Model_ContactCustomFieldResponse_sevClient"
					},
					"contact": {
						"$ref": "#/components/schemas/Model_ContactCustomFieldResponse_contact"
					},
					"contactCustomFieldSetting": {
						"type": "object",
						"description": "the contact custom field setting",
						"allOf": [
							{
								"$ref": "#/components/schemas/Model_ContactCustomFieldSettingResponse"
							}
						]
					},
					"value": {
						"type": "string",
						"description": "The value of the contact field"
					}
				},
				"description": "contact fields model"
			},
			"Model_Discount": {
				"title": "Discounts",
				"properties": {
					"id": {
						"type": "string",
						"description": "the id of the discount",
						"readOnly": true,
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Discounts'",
						"readOnly": true,
						"example": "Discounts"
					},
					"create": {
						"type": "string",
						"description": "Date of discount creation",
						"format": "date-time",
						"readOnly": true
					},
					"update": {
						"type": "string",
						"description": "Date of last discount update",
						"format": "date-time",
						"readOnly": true
					},
					"object": {
						"$ref": "#/components/schemas/Model_Discount_object"
					},
					"sevClient": {
						"type": "string",
						"description": "Client to which invoice belongs. Will be filled automatically",
						"readOnly": true,
						"example": "0"
					},
					"text": {
						"type": "string",
						"description": "A text describing your position.",
						"readOnly": true
					},
					"percentage": {
						"type": "string",
						"description": "Defines if this is a percentage or an absolute discount",
						"example": "1"
					},
					"value": {
						"type": "string",
						"description": "Value of the discount",
						"example": "10"
					},
					"isNet": {
						"type": "string",
						"description": "Defines is the Discount net or gross\n0 - gross\n1 - net",
						"example": "1"
					}
				},
				"description": "Discount model"
			},
			"VouchervoucherIdbookAmount_checkAccount": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The id of the check account on which should be booked."
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'CheckAccount'.",
						"example": "CheckAccount"
					}
				},
				"description": "The check account on which should be booked."
			},
			"VouchervoucherIdbookAmount_checkAccountTransaction": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The id of the check account transaction on which should be booked."
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'CheckAccountTransaction'.",
						"example": "CheckAccountTransaction"
					}
				},
				"description": "The check account transaction on which should be booked.<br>\r\n    The transaction will be linked to the voucher."
			},
			"voucherId_bookAmount_body": {
				"required": [
					"amount",
					"checkAccount",
					"date",
					"type"
				],
				"type": "object",
				"properties": {
					"amount": {
						"type": "number",
						"description": "Amount which should be booked. Can also be a partial amount."
					},
					"date": {
						"type": "string",
						"description": "The booking date. Most likely the current date.",
						"format": "date-time",
						"nullable": false
					},
					"type": {
						"type": "string",
						"description": "Define a type for the booking.<br>\r\n    The following type abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <-> Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher amount due to currency fluctuations</li>\r\n    <li>O <-> Reduced/Higher amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the monetary traffic costs</li>\r\n    </ul>",
						"enum": [
							"N",
							"CB",
							"CF",
							"O",
							"OF",
							"MTC"
						]
					},
					"checkAccount": {
						"$ref": "#/components/schemas/VouchervoucherIdbookAmount_checkAccount"
					},
					"checkAccountTransaction": {
						"$ref": "#/components/schemas/VouchervoucherIdbookAmount_checkAccountTransaction"
					},
					"createFeed": {
						"type": "boolean",
						"description": "Determines if a feed is created for the booking process."
					}
				}
			},
			"inline_response_200": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"description": "TODO: Document VoucherLog and enter scheme here",
						"items": {
							"type": "object"
						}
					}
				}
			},
			"inline_response_200_1": {
				"type": "object",
				"properties": {
					"filename": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"content": {
						"type": "string",
						"format": "binary"
					},
					"base64encoded": {
						"type": "string"
					}
				}
			},
			"inline_response_200_2": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_AccountingContactResponse"
						}
					}
				}
			},
			"inline_response_200_3": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"inline_response_200_4": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_CheckAccountTransactionResponse"
						}
					}
				}
			},
			"inline_response_200_5": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_creditNoteResponse"
						}
					}
				}
			},
			"inline_response_200_6": {
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_ContactCustomFieldSettingResponse"
						}
					}
				}
			},
			"ExportinvoiceCsv_filter_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "ID of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "filters the invoices by contact"
			},
			"ExportinvoiceCsv_filter": {
				"type": "object",
				"properties": {
					"invoiceType": {
						"type": "array",
						"description": "Type of invoices you want to export\n1. RE - Rechnung\n2. SR - Stornorechnung\n3. TR - Teilrechnung\n4. AR - Abschlagsrechnung\n5. ER - Endrechnung\n6. WKR - Wiederkehrende Rechnung\n7. MA - Mahnung ",
						"items": {
							"type": "string",
							"enum": [
								"Re",
								"SR",
								"TR",
								"AR",
								"ER",
								"WKR",
								"MA"
							]
						}
					},
					"startDate": {
						"type": "string",
						"description": "Start date of the invoice",
						"format": "date-time"
					},
					"endDate": {
						"type": "string",
						"description": "End date of the invoice",
						"format": "date-time"
					},
					"contact": {
						"$ref": "#/components/schemas/ExportinvoiceCsv_filter_contact"
					},
					"startAmount": {
						"type": "integer",
						"description": "filters the invoices by amount",
						"example": 100
					},
					"endAmount": {
						"type": "integer",
						"description": "filters the invoices by amount",
						"example": 150
					}
				}
			},
			"sevQuery": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name, which is 'Invoice'"
					},
					"objectName": {
						"description": "Model name, which is 'SevQuery'",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExportinvoiceCsv_filter"
					}
				}
			},
			"invoiceId_sendViaEmail_body": {
				"required": [
					"subject",
					"text",
					"toEmail"
				],
				"type": "object",
				"properties": {
					"toEmail": {
						"type": "string",
						"description": "The recipient of the email."
					},
					"subject": {
						"type": "string",
						"description": "The subject of the email."
					},
					"text": {
						"type": "string",
						"description": "The text of the email. Can contain html."
					},
					"copy": {
						"type": "boolean",
						"description": "Should a copy of this email be sent to you?"
					},
					"additionalAttachments": {
						"type": "string",
						"description": "Additional attachments to the mail. String of IDs of existing documents in your\r\n     *                      sevdesk account separated by ','"
					},
					"ccEmail": {
						"type": "string",
						"description": "String of mail addresses to be put as cc separated by ','"
					},
					"bccEmail": {
						"type": "string",
						"description": "String of mail addresses to be put as bcc separated by ','"
					}
				}
			},
			"inline_response_201": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_Email"
						}
					}
				}
			},
			"ExportvoucherListCsv_filter_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "ID of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "filters the vouchers by contact"
			},
			"ExportvoucherListCsv_filter": {
				"type": "object",
				"properties": {
					"startDate": {
						"type": "string",
						"description": "Start date of the voucher",
						"format": "date-time"
					},
					"endDate": {
						"type": "string",
						"description": "End date of the voucher",
						"format": "date-time"
					},
					"startPayDate": {
						"type": "string",
						"description": "Start pay date of the voucher",
						"format": "date-time"
					},
					"endPayDate": {
						"type": "string",
						"description": "End pay date of the voucher",
						"format": "date-time"
					},
					"contact": {
						"$ref": "#/components/schemas/ExportvoucherListCsv_filter_contact"
					},
					"startAmount": {
						"type": "integer",
						"description": "filters the vouchers by amount",
						"example": 100
					},
					"endAmount": {
						"type": "integer",
						"description": "filters the vouchers by amount",
						"example": 150
					}
				}
			},
			"sevQuery_1": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name, which is 'Voucher'"
					},
					"objectName": {
						"description": "Model name, which is 'SevQuery'",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExportvoucherListCsv_filter"
					}
				}
			},
			"inline_response_200_7": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_OrderPosResponse"
						}
					}
				}
			},
			"InvoiceinvoiceIdbookAmount_checkAccountTransaction": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The id of the check account transaction on which should be booked."
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'CheckAccountTransaction'.",
						"example": "CheckAccountTransaction"
					}
				},
				"description": "The check account transaction on which should be booked.<br>\r\n    The transaction will be linked to the invoice."
			},
			"invoiceId_bookAmount_body": {
				"required": [
					"amount",
					"checkAccount",
					"date",
					"type"
				],
				"type": "object",
				"properties": {
					"amount": {
						"type": "number",
						"description": "Amount which should be booked. Can also be a partial amount."
					},
					"date": {
						"type": "integer",
						"description": "The booking date. Most likely the current date."
					},
					"type": {
						"type": "string",
						"description": "Define a type for the booking.<br>\r\n    The following type abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <-> Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher amount due to currency fluctuations</li>\r\n    <li>O <-> Reduced/Higher amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the monetary traffic costs</li>\r\n    </ul>",
						"enum": [
							"N",
							"CB",
							"CF",
							"O",
							"OF",
							"MTC"
						]
					},
					"checkAccount": {
						"$ref": "#/components/schemas/VouchervoucherIdbookAmount_checkAccount"
					},
					"checkAccountTransaction": {
						"$ref": "#/components/schemas/InvoiceinvoiceIdbookAmount_checkAccountTransaction"
					},
					"createFeed": {
						"type": "boolean",
						"description": "Determines if a feed is created for the booking process."
					}
				}
			},
			"inline_response_200_8": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"description": "TODO: Document InvoiceLog and enter scheme here",
						"items": {
							"type": "object"
						}
					}
				}
			},
			"inline_response_200_9": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_Discount"
						}
					}
				}
			},
			"inline_response_200_10": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_OrderResponse"
						}
					}
				}
			},
			"inline_response_200_11": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "boolean"
					}
				}
			},
			"inline_response_200_12": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_InvoiceResponse"
						}
					}
				}
			},
			"inline_response_200_13": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_ContactAddressResponse"
						}
					}
				}
			},
			"inline_response_200_14": {
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_ContactCustomFieldResponse"
						}
					}
				}
			},
			"inline_response_200_15": {
				"properties": {
					"result": {
						"type": "string",
						"example": "1"
					},
					"letterpapers": {
						"$ref": "#/components/schemas/inline_response_200_15_letterpapers"
					}
				}
			},
			"sevQuery_2": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name which is exported",
						"example": "Order"
					},
					"objectName": {
						"description": "SevQuery object name",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExportinvoiceCsv_filter"
					}
				}
			},
			"Reportorderlist_filter_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "ID of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "filters the orders by contact"
			},
			"Reportorderlist_filter": {
				"type": "object",
				"properties": {
					"orderType": {
						"type": "string",
						"description": "Type of orders you want to export\n1. AN - Angebote\n2. AB - Aufträge\n3. LI - Lieferscheine",
						"enum": [
							"AN",
							"AB",
							"LI"
						]
					},
					"startDate": {
						"type": "string",
						"description": "Start date of the order",
						"format": "date-time"
					},
					"endDate": {
						"type": "string",
						"description": "End date of the order",
						"format": "date-time"
					},
					"contact": {
						"$ref": "#/components/schemas/Reportorderlist_filter_contact"
					},
					"startAmount": {
						"type": "integer",
						"description": "filters the orders by amount",
						"example": 100
					},
					"endAmount": {
						"type": "integer",
						"description": "filters the orders by amount",
						"example": 150
					}
				}
			},
			"sevQuery_3": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name which is exported",
						"example": "Order"
					},
					"objectName": {
						"description": "SevQuery object name",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/Reportorderlist_filter"
					}
				}
			},
			"inline_response_200_16": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the communication way key\n1. ID: 1 - Privat\n2. ID: 2 - Arbeit\n3. ID: 3 - Fax\n4. ID: 4 - Mobil\n5. ID: 5 - \" \"\n6. ID: 6 - Autobox\n7. ID: 7 - Newsletter\n8. ID: 8 - Rechnungsadresse",
						"example": "2"
					},
					"objectName": {
						"type": "string",
						"description": "object name which is 'CommunicationWayKey'.",
						"example": "CommunicationWayKey"
					},
					"create": {
						"type": "string",
						"description": "Date the communication way key was created",
						"format": "date-time"
					},
					"upadate": {
						"type": "string",
						"description": "Date the communication way key was last updated",
						"format": "date-time"
					},
					"name": {
						"type": "string",
						"description": "Name of the communication way key",
						"example": "Arbeit",
						"enum": [
							"Arbeit",
							"Autobox",
							"Fax",
							"Mobil",
							"Newsletter",
							"Privat",
							"Rechnungsadresse",
							" "
						]
					},
					"translationCode": {
						"type": "string",
						"example": "COMM_WAY_KEY_WORK"
					}
				}
			},
			"inline_response_200_17": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_ChangeLayoutResponse"
						}
					}
				}
			},
			"inline_response_200_18": {
				"type": "object",
				"properties": {
					"orders": {
						"type": "number"
					},
					"invoices": {
						"type": "number"
					},
					"creditNotes": {
						"type": "number"
					},
					"documents": {
						"type": "number"
					},
					"persons": {
						"type": "number"
					},
					"vouchers": {
						"type": "number"
					},
					"letters": {
						"type": "number"
					},
					"parts": {
						"type": "string",
						"example": "0"
					},
					"invoicePos": {
						"type": "number"
					}
				}
			},
			"inline_response_200_19": {
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_TagResponse"
						}
					}
				}
			},
			"Tag_tagId_body": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the tag u want to update"
					}
				}
			},
			"inline_response_200_20": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_VoucherResponse"
						}
					}
				}
			},
			"ExporttransactionsCsv_filter_checkAccount": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of the checkAccount"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccount'"
					}
				}
			},
			"ExporttransactionsCsv_filter": {
				"type": "object",
				"properties": {
					"paymtPurpose": {
						"type": "string",
						"description": "the payment purpose",
						"example": "salary"
					},
					"name": {
						"type": "string",
						"description": "the name of the payee/payer",
						"example": "Cercei Lannister"
					},
					"startDate": {
						"type": "string",
						"description": "Start date of the transactions",
						"format": "date-time"
					},
					"endDate": {
						"type": "string",
						"description": "End date of the transactions",
						"format": "date-time"
					},
					"startAmount": {
						"type": "integer",
						"description": "filters the transactions by amount",
						"example": 100
					},
					"endAmount": {
						"type": "integer",
						"description": "filters the transactions by amount",
						"example": 150
					},
					"checkAccount": {
						"$ref": "#/components/schemas/ExporttransactionsCsv_filter_checkAccount"
					}
				}
			},
			"sevQuery_4": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name, which is 'CheckAccountTransaction'"
					},
					"objectName": {
						"description": "Model name, which is 'SevQuery'",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExporttransactionsCsv_filter"
					}
				}
			},
			"sevQuery_5": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name which is exported",
						"example": "Voucher"
					},
					"objectName": {
						"description": "SevQuery object name",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExportvoucherListCsv_filter"
					}
				}
			},
			"inline_response_200_21": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_Part"
						}
					}
				}
			},
			"inline_response_200_22": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_InvoicePosResponse"
						}
					}
				}
			},
			"invoiceId_render_body": {
				"type": "object",
				"properties": {
					"forceReload": {
						"type": "boolean",
						"description": "Define if a forceful re-render should occur."
					}
				}
			},
			"inline_response_201_1": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/inline_response_201_1_objects"
						}
					}
				}
			},
			"inline_response_200_23": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_ContactResponse"
						}
					}
				}
			},
			"inline_response_200_24": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_CheckAccountResponse"
						}
					}
				}
			},
			"ExportcreditNoteCsv_filter_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "ID of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "filters the credit notes by contact"
			},
			"ExportcreditNoteCsv_filter": {
				"type": "object",
				"properties": {
					"startDate": {
						"type": "string",
						"description": "Start date of the credit note",
						"format": "date-time"
					},
					"endDate": {
						"type": "string",
						"description": "End date of the credit note",
						"format": "date-time"
					},
					"contact": {
						"$ref": "#/components/schemas/ExportcreditNoteCsv_filter_contact"
					},
					"startAmount": {
						"type": "integer",
						"description": "filters the credit notes by amount",
						"example": 100
					},
					"endAmount": {
						"type": "integer",
						"description": "filters the credit notes by amount",
						"example": 150
					}
				}
			},
			"sevQuery_6": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name, which is 'CreditNote'"
					},
					"objectName": {
						"description": "Model name, which is 'SevQuery'",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExportcreditNoteCsv_filter"
					}
				}
			},
			"inline_response_200_25": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_CommunicationWayResponse"
						}
					}
				}
			},
			"inline_response_200_26": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "integer",
						"description": "Stock amount"
					}
				}
			},
			"orderId_sendBy_body": {
				"required": [
					"sendDraft",
					"sendType"
				],
				"type": "object",
				"properties": {
					"sendType": {
						"type": "string",
						"description": "Specifies the way in which the order was sent to the customer.<br>\r\n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).",
						"enum": [
							"VPR",
							"VP",
							"VM",
							"VPDF"
						]
					},
					"sendDraft": {
						"type": "boolean",
						"description": "Specify if the should be enshrined after marking it as sent."
					}
				}
			},
			"inline_response_200_27": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"description": "The order object which was marked as sent.",
						"items": {
							"$ref": "#/components/schemas/Model_OrderResponse"
						}
					}
				}
			},
			"inline_response_200_28": {
				"type": "object",
				"properties": {
					"key": {
						"type": "string",
						"example": "CONTACT"
					},
					"value": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/inline_response_200_28_value"
						}
					}
				}
			},
			"CreditNotecreditNoteIdbookAmount_checkAccountTransaction": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "The id of the check account transaction on which should be booked."
					},
					"objectName": {
						"type": "string",
						"description": "Internal object name which is 'CheckAccountTransaction'.",
						"example": "CheckAccountTransaction"
					}
				},
				"description": "The check account transaction on which should be booked.<br>\r\n    The transaction will be linked to the credit note."
			},
			"creditNoteId_bookAmount_body": {
				"required": [
					"amount",
					"checkAccount",
					"date",
					"type"
				],
				"type": "object",
				"properties": {
					"amount": {
						"type": "number",
						"description": "Amount which should be booked. Can also be a partial amount."
					},
					"date": {
						"type": "integer",
						"description": "The booking date. Most likely the current date."
					},
					"type": {
						"type": "string",
						"description": "Define a type for the booking.<br>\r\n    The following type abbreviations are available (abbreviation <-> meaning).<br>\r\n    <ul>\r\n    <li>N <-> Normal booking / partial booking</li>\r\n    <li>CB <-> Reduced amount due to discount (skonto)</li>\r\n    <li>CF <-> Reduced/Higher amount due to currency fluctuations</li>\r\n    <li>O <-> Reduced/Higher amount due to other reasons</li>\r\n    <li>OF <-> Higher amount due to reminder charges</li>\r\n    <li>MTC <-> Reduced amount due to the monetary traffic costs</li>\r\n    </ul>",
						"enum": [
							"N",
							"CB",
							"CF",
							"O",
							"OF",
							"MTC"
						]
					},
					"checkAccount": {
						"$ref": "#/components/schemas/VouchervoucherIdbookAmount_checkAccount"
					},
					"checkAccountTransaction": {
						"$ref": "#/components/schemas/CreditNotecreditNoteIdbookAmount_checkAccountTransaction"
					},
					"createFeed": {
						"type": "boolean",
						"description": "Determines if a feed is created for the booking process."
					}
				}
			},
			"Reportcontactlist_filter_country": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "id of the country",
						"example": 1
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				}
			},
			"Reportcontactlist_filter": {
				"type": "object",
				"properties": {
					"zip": {
						"type": "integer",
						"description": "filters the contacts by zip code",
						"example": 77656
					},
					"city": {
						"type": "string",
						"description": "filters the contacts by city",
						"example": "Offenburg"
					},
					"country": {
						"$ref": "#/components/schemas/Reportcontactlist_filter_country"
					},
					"depth": {
						"type": "boolean",
						"description": "export only organisations"
					},
					"onlyPeople": {
						"type": "boolean",
						"description": "export only people"
					}
				}
			},
			"sevQuery_7": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name which is exported",
						"example": "Invoice"
					},
					"objectName": {
						"description": "SevQuery object name",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/Reportcontactlist_filter"
					}
				}
			},
			"invoiceId_sendBy_body": {
				"required": [
					"sendDraft",
					"sendType"
				],
				"type": "object",
				"properties": {
					"sendType": {
						"type": "string",
						"description": "Specifies the way in which the invoice was sent to the customer.<br>\r\n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).",
						"enum": [
							"VPR",
							"VP",
							"VM",
							"VPDF"
						]
					},
					"sendDraft": {
						"type": "boolean",
						"description": "Specify if the should be enshrined after marking it as sent."
					}
				}
			},
			"inline_response_200_29": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"description": "The invoice object which was marked as sent.",
						"items": {
							"$ref": "#/components/schemas/Model_InvoiceResponse"
						}
					}
				}
			},
			"creditNoteId_sendViaEmail_body": {
				"required": [
					"subject",
					"text",
					"toEmail"
				],
				"type": "object",
				"properties": {
					"toEmail": {
						"type": "string",
						"description": "The recipient of the email."
					},
					"subject": {
						"type": "string",
						"description": "The subject of the email."
					},
					"text": {
						"type": "string",
						"description": "The text of the email. Can contain html."
					},
					"copy": {
						"type": "boolean",
						"description": "Should a copy of this email be sent to you?"
					},
					"additionalAttachments": {
						"type": "string",
						"description": "Additional attachments to the mail. String of IDs of existing documents in your\r\n     *                      sevdesk account separated by ','"
					},
					"ccEmail": {
						"type": "string",
						"description": "String of mail addresses to be put as cc separated by ','"
					},
					"bccEmail": {
						"type": "string",
						"description": "String of mail addresses to be put as bcc separated by ','"
					}
				}
			},
			"inline_response_200_30": {
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_TagCreateResponse"
						}
					}
				}
			},
			"inline_response_200_31": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_VoucherPosResponse"
						}
					}
				}
			},
			"creditNoteId_sendBy_body": {
				"required": [
					"sendDraft",
					"sendType"
				],
				"type": "object",
				"properties": {
					"sendType": {
						"type": "string",
						"description": "Specifies the way in which the credit note was sent to the customer.<br>\r\n     Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).",
						"example": "VPDF",
						"enum": [
							"VPR",
							"VP",
							"VM",
							"VPDF"
						]
					},
					"sendDraft": {
						"type": "boolean",
						"description": "Specify if the should be enshrined after marking it as sent.",
						"example": false
					}
				}
			},
			"inline_response_200_32": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"description": "The credit note object which was marked as sent.",
						"items": {
							"$ref": "#/components/schemas/Model_creditNoteResponse"
						}
					}
				}
			},
			"InvoiceFactorycreateInvoiceReminder_invoice": {
				"required": [
					"id",
					"objectName"
				],
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of the invoice"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Invoice'",
						"example": "Invoice"
					}
				},
				"description": "Invoice for the reminder"
			},
			"Factory_createInvoiceReminder_body": {
				"required": [
					"invoice"
				],
				"type": "object",
				"properties": {
					"invoice": {
						"$ref": "#/components/schemas/InvoiceFactorycreateInvoiceReminder_invoice"
					}
				}
			},
			"Factory_uploadTempFile_body": {
				"type": "object",
				"properties": {
					"file": {
						"type": "string",
						"description": "The file to upload",
						"format": "binary"
					}
				}
			},
			"inline_response_201_2": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/inline_response_201_2_objects"
						}
					}
				}
			},
			"inline_response_200_33": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_creditNotePosResponse"
						}
					}
				}
			},
			"inline_response_200_34": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "integer",
						"description": "the count of all references",
						"example": 1
					}
				}
			},
			"inline_response_200_35": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "string",
						"description": "Next available customer number"
					}
				}
			},
			"TagFactorycreate_object": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of the invoice/order/voucher/creditNote"
					},
					"objectName": {
						"type": "string",
						"description": "Model name",
						"example": "Invoice",
						"enum": [
							"Invoice",
							"Voucher",
							"Order",
							"CreditNote"
						]
					}
				},
				"description": "Invoice for the reminder"
			},
			"Factory_create_body": {
				"required": [
					"invoice"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the tag"
					},
					"object": {
						"$ref": "#/components/schemas/TagFactorycreate_object"
					}
				}
			},
			"sevQuery_8": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name, which is 'Invoice'"
					},
					"objectName": {
						"description": "Model name, which is 'SevQuery'",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExportinvoiceCsv_filter"
					}
				}
			},
			"inline_response_200_36": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "string",
						"format": "float",
						"example": "105.56"
					}
				}
			},
			"sevQuery_9": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name, which is 'Contact'"
					},
					"objectName": {
						"description": "Model name, which is 'SevQuery'",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/Reportcontactlist_filter"
					}
				}
			},
			"inline_response_200_37": {
				"properties": {
					"result": {
						"type": "string",
						"example": "1"
					},
					"templates": {
						"$ref": "#/components/schemas/inline_response_200_37_templates"
					}
				}
			},
			"orderId_sendViaEmail_body": {
				"required": [
					"subject",
					"text",
					"toEmail"
				],
				"type": "object",
				"properties": {
					"toEmail": {
						"type": "string",
						"description": "The recipient of the email."
					},
					"subject": {
						"type": "string",
						"description": "The subject of the email."
					},
					"text": {
						"type": "string",
						"description": "The text of the email. Can contain html."
					},
					"copy": {
						"type": "boolean",
						"description": "Should a copy of this email be sent to you?"
					},
					"additionalAttachments": {
						"type": "string",
						"description": "Additional attachments to the mail. String of IDs of existing documents in your\r\n     *                      sevdesk account separated by ','"
					},
					"ccEmail": {
						"type": "string",
						"description": "String of mail addresses to be put as cc separated by ','"
					},
					"bccEmail": {
						"type": "string",
						"description": "String of mail addresses to be put as bcc separated by ','"
					}
				}
			},
			"inline_response_201_3": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Model_EmailOrder"
						}
					}
				}
			},
			"sevQuery_10": {
				"required": [
					"modelName",
					"objectName"
				],
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Limit export",
						"example": 999999
					},
					"modelName": {
						"description": "Model name, which is 'Voucher'"
					},
					"objectName": {
						"description": "Model name, which is 'SevQuery'",
						"example": "SevQuery"
					},
					"filter": {
						"$ref": "#/components/schemas/ExportvoucherListCsv_filter"
					}
				}
			},
			"inline_response_200_38": {
				"type": "object",
				"properties": {
					"objects": {
						"type": "object"
					}
				}
			},
			"Model_InvoicePosResponse_invoice": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the invoice",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Invoice'",
						"example": "Invoice"
					}
				},
				"description": "The invoice to which the position belongs.",
				"readOnly": true
			},
			"Model_InvoicePosResponse_part": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the part",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Part'",
						"example": "Part"
					}
				},
				"description": "Part from your inventory which is used in the position.",
				"readOnly": true
			},
			"Model_InvoicePosResponse_unity": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the unit",
						"example": "1"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Unity'",
						"example": "Unity"
					}
				},
				"description": "The unit in which the positions part is measured",
				"readOnly": true
			},
			"Model_InvoicePosResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which invoice position belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_AccountingContactUpdate_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this accounting contact belongs.",
				"nullable": true
			},
			"Model_creditNote_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the creditNote",
				"nullable": false
			},
			"Model_creditNote_addressCountry": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the country",
						"example": 1
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				},
				"description": "Can be omitted as complete address is defined in address attribute",
				"nullable": true
			},
			"Model_creditNote_createUser": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "Will be filled automatically by our system and can't be changed",
				"readOnly": true
			},
			"Model_creditNote_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which creditNote belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_creditNote_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the creditNote"
			},
			"Model_creditNote_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the creditNote. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_creditNoteUpdate_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the creditNote",
				"nullable": true
			},
			"Model_creditNoteUpdate_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the creditNote",
				"nullable": true
			},
			"Model_creditNotePosResponse_creditNote": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the creditNote",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'creditNote'",
						"example": "creditNote"
					}
				},
				"description": "The creditNote to which the position belongs."
			},
			"Model_creditNotePosResponse_part": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the part",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Part'",
						"example": "Part"
					}
				},
				"description": "Part from your inventory which is used in the position."
			},
			"Model_creditNotePosResponse_unity": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the unit",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Unity'",
						"example": "Unity"
					}
				},
				"description": "The unit in which the positions part is measured"
			},
			"Model_creditNotePosResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which creditNote position belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_Order_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the order",
				"nullable": false
			},
			"Model_Order_addressCountry": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the country"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				},
				"description": "Can be omitted as complete address is defined in address attribute",
				"nullable": false
			},
			"Model_Order_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user",
						"example": 0
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the order",
				"nullable": false
			},
			"Model_Order_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the order. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_Order_origin": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name of the object. Could be 'Order'."
					}
				},
				"description": "Object from which the order was created. For example an offer.",
				"nullable": true
			},
			"Model_TagCreateResponse_tag": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the tag",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Tag'",
						"example": "Tag"
					}
				},
				"description": "The tag information"
			},
			"Model_TagCreateResponse_object": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Object'",
						"example": "Object"
					}
				},
				"description": "the related object"
			},
			"Model_TagCreateResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which invoice belongs. Will be filled automatically"
			},
			"Model_CommunicationWay_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this communication way belongs.",
				"nullable": false
			},
			"Model_CommunicationWay_key": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the key"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CommunicationWayKey'",
						"example": "CommunicationWayKey"
					}
				},
				"description": "The key of the communication way.<br>\nSimilar to the category of addresses.<br>\nFor all communication way keys please send a GET to /CommunicationWayKey.",
				"nullable": false
			},
			"Model_CommunicationWay_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which communication way key belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_VoucherUpdate_supplier": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"default": "Contact"
					}
				},
				"description": "The contact used in the voucher as a supplier.<br>\nIf you don't have a contact as a supplier, you can set this object to null.",
				"nullable": true
			},
			"Model_VoucherUpdate_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the voucher. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_VoucherUpdate_document": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the document"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Document'",
						"example": "Document"
					}
				},
				"description": "The document of the voucher.",
				"nullable": true
			},
			"Model_VoucherUpdate_costCentre": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the cost centre"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CostCentre'",
						"example": "CostCentre"
					}
				},
				"description": "Cost centre for the voucher"
			},
			"Model_AccountingContact_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this accounting contact belongs.",
				"nullable": false
			},
			"Model_ContactCustomFieldSettingResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which invoice belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_InvoicePos_invoice": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the invoice"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Invoice'",
						"example": "Invoice"
					}
				},
				"description": "The invoice to which the position belongs.",
				"readOnly": true
			},
			"Model_InvoicePos_part": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the part"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Part'",
						"example": "Part"
					}
				},
				"description": "Part from your inventory which is used in the position."
			},
			"Model_InvoicePos_unity": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the unit",
						"example": 1
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Unity'",
						"example": "Unity"
					}
				},
				"description": "The unit in which the positions part is measured"
			},
			"Model_InvoicePos_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which invoice position belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_CommunicationWayUpdate_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this communication way belongs.",
				"nullable": true
			},
			"Model_CommunicationWayUpdate_key": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the key"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CommunicationWayKey'",
						"example": "CommunicationWayKey"
					}
				},
				"description": "The key of the communication way.<br>\nSimilar to the category of addresses.<br>\nFor all communication way keys please send a GET to /CommunicationWayKey.",
				"nullable": true
			},
			"Model_EmailOrder_object": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Invoice' or 'Order' or 'CreditNote'"
					}
				},
				"description": "The contact used in the invoice",
				"nullable": true
			},
			"Model_EmailOrder_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which mail belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_InvoiceUpdate_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the invoice",
				"nullable": true
			},
			"Model_InvoiceUpdate_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which invoice belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_InvoiceUpdate_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the invoice"
			},
			"Model_InvoiceUpdate_paymentMethod": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the payment method"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'PaymentMethod'",
						"example": "PaymentMethod"
					}
				},
				"description": "Payment method used for the invoice"
			},
			"Model_InvoiceUpdate_costCentre": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the cost centre"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CostCentre'",
						"example": "CostCentre"
					}
				},
				"description": "Cost centre for the invoice"
			},
			"Model_InvoiceUpdate_origin": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name. Could f.e. be 'Order''"
					}
				},
				"description": "Origin of the invoice. Could f.e. be an order",
				"nullable": true
			},
			"Model_InvoiceUpdate_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the invoice. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_InvoiceResponse_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the invoice",
				"readOnly": true
			},
			"Model_InvoiceResponse_addressCountry": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the country",
						"example": "1"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				},
				"description": "Can be omitted as complete address is defined in address attribute",
				"readOnly": true
			},
			"Model_InvoiceResponse_createUser": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the user",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "Will be filled automatically by our system and can't be changed",
				"readOnly": true
			},
			"Model_InvoiceResponse_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the user",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the invoice",
				"readOnly": true
			},
			"Model_InvoiceResponse_paymentMethod": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the payment method",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'PaymentMethod'",
						"example": "PaymentMethod"
					}
				},
				"description": "Payment method used for the invoice",
				"readOnly": true
			},
			"Model_InvoiceResponse_costCentre": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the cost centre",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CostCentre'",
						"example": "CostCentre"
					}
				},
				"description": "Cost centre for the invoice",
				"readOnly": true
			},
			"Model_InvoiceResponse_origin": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name. Could f.e. be 'Order''"
					}
				},
				"description": "Origin of the invoice. Could f.e. be an order",
				"readOnly": true
			},
			"Model_InvoiceResponse_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the invoice. Needs to be added if you chose the tax type custom",
				"readOnly": true
			},
			"Model_ContactCustomField_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "name of the contact"
			},
			"Model_ContactCustomField_contactCustomFieldSetting": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of contact custom field setting"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'contactCustomFieldSetting'",
						"example": "contactCustomFieldSetting"
					}
				},
				"description": "name of the contact custom field setting"
			},
			"Model_creditNotePos_creditNote": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the creditNote"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'creditNote'",
						"example": "creditNote"
					}
				},
				"description": "The creditNote to which the position belongs.  <span style='color:red'>Required</span> if you want to create/update an credit note position for an existing credit note\""
			},
			"Model_creditNotePos_unity": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the unit"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Unity'",
						"example": "Unity"
					}
				},
				"description": "The unit in which the positions part is measured"
			},
			"Model_creditNotePos_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which creditNote position belongs. Will be filled automatically",
				"readOnly": true
			},
			"saveVoucher_voucherPosDelete": {
				"required": [
					"id",
					"objectName"
				],
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of voucher position"
					},
					"objectName": {
						"type": "string",
						"description": "Object name of voucher position"
					}
				}
			},
			"Model_ContactResponse_parent": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the parent contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The parent contact to which this contact belongs. Must be an organization.",
				"readOnly": true
			},
			"Model_ContactResponse_category": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the category",
						"example": "3"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Category'",
						"example": "Category"
					}
				},
				"description": "Category of the contact.<br> For more information,\r\n     see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>.",
				"readOnly": true
			},
			"Model_ContactResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client",
						"example": 0
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which contact belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_ContactResponse_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the tax set",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set which is used in every invoice of the contact.",
				"readOnly": true
			},
			"Model_ContactAddress_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this contact address belongs.",
				"nullable": false
			},
			"Model_ContactAddress_country": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the country"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				},
				"description": "Country of the contact address.<br>\r\n    For all countries, send a GET to /StaticCountry",
				"nullable": false
			},
			"Model_ContactAddress_category": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the category"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Category'"
					}
				},
				"description": "Category of the contact address.<br>\r\n     For all categories, send a GET to /Category?objectType=ContactAddress.",
				"nullable": true
			},
			"Model_ContactAddress_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which contact address belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_Part_category": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the category"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Category'",
						"example": "Category"
					}
				},
				"description": "Category of the part.<br>\r\n    For all categories, send a GET to /Category?objectType=Part",
				"nullable": true
			},
			"Model_Part_unity": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the unit",
						"example": 1
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Unity'",
						"example": "Unity"
					}
				},
				"description": "The unit in which the part is measured"
			},
			"Model_Part_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which part belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_CheckAccountResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which check account belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_CheckAccountTransaction_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which check account transaction belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_CheckAccountTransaction_checkAccount": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the check account"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccount'",
						"default": "CheckAccount"
					}
				},
				"description": "The check account to which the transaction belongs",
				"nullable": false
			},
			"Model_CheckAccountTransaction_sourceTransaction": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the check account transaction"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccountTransaction'",
						"default": "CheckAccountTransaction"
					}
				},
				"description": "The check account transaction serving as the source of the rebooking",
				"nullable": true
			},
			"Model_CheckAccountTransaction_targetTransaction": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the check account transaction"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccountTransaction'",
						"default": "CheckAccountTransaction"
					}
				},
				"description": "The check account transaction serving as the target of the rebooking",
				"nullable": true
			},
			"Model_creditNoteResponse_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the creditNote",
				"nullable": true
			},
			"Model_creditNoteResponse_addressCountry": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the country",
						"example": "1"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				},
				"description": "Can be omitted as complete address is defined in address attribute",
				"nullable": true
			},
			"Model_creditNoteResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which creditNote belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_creditNoteResponse_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the user",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the creditNote",
				"nullable": true
			},
			"Model_creditNoteResponse_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the creditNote. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_InvoicePosUpdate_invoice": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the invoice"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Invoice'",
						"example": "Invoice"
					}
				},
				"description": "The invoice to which the position belongs.",
				"nullable": true,
				"readOnly": false
			},
			"Model_OrderPosResponse_order": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the order",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Order'",
						"example": "Order"
					}
				},
				"description": "The order to which the position belongs."
			},
			"Model_OrderPosResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which order position belongs. Will be filled automatically",
				"readOnly": true
			},
			"saveOrder_orderPosDelete": {
				"required": [
					"id",
					"objectName"
				],
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of order position"
					},
					"objectName": {
						"type": "string",
						"description": "Object name of order position"
					}
				}
			},
			"Model_AccountingContactResponse_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this accounting contact belongs.",
				"readOnly": true
			},
			"Model_AccountingContactResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which accounting contact belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_OrderPos_order": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the order"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Order'",
						"example": "Order"
					}
				},
				"description": "The order to which the position belongs."
			},
			"Model_OrderPos_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which order position belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_VoucherResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which voucher belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_VoucherResponse_createUser": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the user",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "User who created the voucher. Will be filled automatically.",
				"readOnly": true
			},
			"Model_VoucherResponse_supplier": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the voucher as a supplier.<br>\nIf you don't have a contact as a supplier, you can set this object to null.",
				"nullable": true
			},
			"Model_VoucherResponse_document": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the document",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Document'",
						"example": "Document"
					}
				},
				"description": "The document of the voucher.",
				"nullable": true
			},
			"Model_VoucherResponse_costCentre": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the cost centre",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CostCentre'"
					}
				},
				"description": "Cost centre for the voucher"
			},
			"Model_VoucherResponse_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the voucher. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_Voucher_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which voucher belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_Voucher_createUser": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "User who created the voucher. Will be filled automatically.",
				"readOnly": true
			},
			"Model_Voucher_supplier": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the voucher as a supplier.<br>\nIf you don't have a contact as a supplier, you can set this object to null.",
				"nullable": true
			},
			"Model_Contact_parent": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the parent contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The parent contact to which this contact belongs. Must be an organization.",
				"nullable": true
			},
			"Model_Contact_category": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the category",
						"example": 3
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Category'",
						"example": "Category"
					}
				},
				"description": "Category of the contact.<br> For more information,\r\n     see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>.",
				"nullable": false
			},
			"Model_Contact_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the tax set"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'"
					}
				},
				"description": "Tax set which is used in every invoice of the contact.",
				"nullable": true
			},
			"Model_CheckAccount_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which check account belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_OrderUpdate_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the order",
				"nullable": true
			},
			"Model_OrderUpdate_addressCountry": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the country"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'"
					}
				},
				"description": "Can be omitted as complete address is defined in address attribute",
				"nullable": true
			},
			"Model_OrderUpdate_createUser": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'"
					}
				},
				"description": "Will be filled automatically by our system and can't be changed",
				"readOnly": true
			},
			"Model_OrderUpdate_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which order belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_OrderUpdate_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the user"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the order"
			},
			"Model_OrderUpdate_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the object"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'"
					}
				},
				"description": "Tax set of the order. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_CheckAccountTransactionUpdate_checkAccount": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the check account"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccount'",
						"default": "CheckAccount"
					}
				},
				"description": "The check account to which the transaction belongs"
			},
			"Model_CheckAccountTransactionResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which check account transaction belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_CheckAccountTransactionResponse_checkAccount": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the check account",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccount'",
						"example": "CheckAccount"
					}
				},
				"description": "The check account to which the transaction belongs",
				"readOnly": true
			},
			"Model_CheckAccountTransactionResponse_sourceTransaction": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the check account transaction",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccountTransaction'",
						"example": "CheckAccountTransaction"
					}
				},
				"description": "The check account transaction serving as the source of the rebooking",
				"readOnly": true
			},
			"Model_CheckAccountTransactionResponse_targetTransaction": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the check account transaction",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CheckAccountTransaction'",
						"default": "CheckAccountTransaction"
					}
				},
				"description": "The check account transaction serving as the target of the rebooking",
				"readOnly": true
			},
			"Model_Invoice_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the invoice",
				"nullable": false
			},
			"Model_Invoice_addressCountry": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the country",
						"example": 1
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				},
				"description": "Can be omitted as complete address is defined in address attribute",
				"nullable": false
			},
			"Model_Invoice_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the invoice. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_Invoice_paymentMethod": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the payment method",
						"example": 21919
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'PaymentMethod'",
						"example": "PaymentMethod"
					}
				},
				"description": "Payment method used for the invoice"
			},
			"Model_Invoice_origin": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which could be 'Order'",
						"example": "Order"
					}
				},
				"description": "Origin of the invoice. Could f.e. be an order",
				"nullable": true
			},
			"Model_ContactAddressUpdate_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this contact address belongs.",
				"nullable": true
			},
			"Model_ContactAddressUpdate_country": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the country"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'",
						"example": "StaticCountry"
					}
				},
				"description": "Country of the contact address.<br>\r\n    For all countries, send a GET to /StaticCountry",
				"nullable": true
			},
			"Model_ContactUpdate_parent": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the parent contact"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'"
					}
				},
				"description": "The parent contact to which this contact belongs. Must be an organization.",
				"nullable": true
			},
			"Model_ContactUpdate_category": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the category",
						"example": 3
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Category'",
						"example": "Category"
					}
				},
				"description": "Category of the contact.<br> For more information,\r\n     see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>.",
				"nullable": true
			},
			"saveInvoice_invoicePosDelete": {
				"required": [
					"id",
					"objectName"
				],
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of invoice position"
					},
					"objectName": {
						"type": "string",
						"description": "Object name of invoice position"
					}
				}
			},
			"saveInvoice_discountSave": {
				"required": [
					"discount",
					"mapAll",
					"objectName",
					"percentage",
					"text",
					"value"
				],
				"properties": {
					"discount": {
						"type": "boolean",
						"description": "Defines if this is a discount or a surcharge",
						"example": true
					},
					"text": {
						"type": "string",
						"description": "A text for your discount"
					},
					"percentage": {
						"type": "boolean",
						"description": "Defines if this is a percentage or an absolute discount"
					},
					"value": {
						"type": "number",
						"description": "Value of the discount"
					},
					"objectName": {
						"type": "string",
						"description": "Object name of the discount",
						"example": "Discounts"
					},
					"mapAll": {
						"type": "boolean",
						"description": "Internal param",
						"example": true
					}
				}
			},
			"saveInvoice_discountDelete": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "ID of discount to delete"
					},
					"objectName": {
						"type": "string",
						"description": "Object name of discount",
						"example": "Discounts"
					}
				}
			},
			"Model_OrderResponse_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact used in the order",
				"nullable": false
			},
			"Model_OrderResponse_addressCountry": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the country"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'StaticCountry'"
					}
				},
				"description": "Can be omitted as complete address is defined in address attribute",
				"nullable": true
			},
			"Model_OrderResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which order belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_OrderResponse_origin": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name of the object. Could be 'Order'.",
						"example": "Order"
					}
				},
				"description": "Object from which the order was created. For example an offer.",
				"nullable": true
			},
			"Model_OrderResponse_contactPerson": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the user",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevUser'",
						"example": "SevUser"
					}
				},
				"description": "The user who acts as a contact person for the order"
			},
			"Model_OrderResponse_taxSet": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the object",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'TaxSet'",
						"example": "TaxSet"
					}
				},
				"description": "Tax set of the order. Needs to be added if you chose the tax type custom",
				"nullable": true
			},
			"Model_VoucherPos_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the client"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'"
					}
				},
				"description": "Client to which voucher position belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_VoucherPos_voucher": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the voucher"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Voucher'",
						"example": "Voucher"
					}
				},
				"description": "The voucher to which the position belongs.",
				"readOnly": true
			},
			"Model_VoucherPos_accountingType": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the accounting type"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'AccountingType'",
						"example": "AccountingType"
					}
				},
				"description": "The accounting type to which the position belongs.<br>\r\n     An accounting type is the booking account to which the position belongs.<br>\r\n     For more information, please refer to\r\n     <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a> section."
			},
			"Model_VoucherPos_estimatedAccountingType": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the accounting type"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'AccountingType'",
						"example": "AccountingType"
					}
				},
				"description": "The accounting type to which the position belongs estimated by our voucher recognition.<br>\r\n    An accounting type is the booking account to which the position belongs.<br>\r\n    For more information, please refer to\r\n    <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a> section.",
				"readOnly": true
			},
			"Model_CommunicationWayResponse_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "The contact to which this communication way belongs.",
				"readOnly": true
			},
			"Model_CommunicationWayResponse_key": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the key",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'CommunicationWayKey'",
						"example": "CommunicationWayKey"
					}
				},
				"description": "The key of the communication way.<br>\nSimilar to the category of addresses.<br>\nFor all communication way keys please send a GET to /CommunicationWayKey.",
				"readOnly": true
			},
			"Model_CommunicationWayResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which communication way key belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_ChangeLayoutResponse_metadaten": {
				"type": "object",
				"properties": {
					"thumbs": {
						"type": "object",
						"description": "the pdf file"
					},
					"pages": {
						"type": "integer",
						"description": "the number of pages in the document",
						"example": 1
					},
					"docId": {
						"type": "string",
						"description": "the id of the document",
						"readOnly": true
					}
				}
			},
			"Model_CreateInvoiceFromOrder_order": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique identifier of the order"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Order'",
						"example": "Order"
					}
				},
				"description": "select the order for which you want to create the invoice",
				"nullable": false
			},
			"saveCreditNote_creditNotePosDelete": {
				"required": [
					"id",
					"objectName"
				],
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of credit note position"
					},
					"objectName": {
						"type": "string",
						"description": "Object name of credit note position"
					}
				}
			},
			"saveCreditNote_discountDelete": {
				"required": [
					"id",
					"objectName"
				],
				"properties": {
					"id": {
						"type": "integer",
						"description": "ID of discount to delete"
					},
					"objectName": {
						"type": "string",
						"description": "Object name of discount",
						"example": "Discounts"
					}
				}
			},
			"Model_VoucherPosResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which voucher position belongs. Will be filled automatically",
				"readOnly": true
			},
			"Model_VoucherPosResponse_voucher": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the voucher",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Voucher'",
						"example": "Voucher"
					}
				},
				"description": "The voucher to which the position belongs.",
				"readOnly": true
			},
			"Model_VoucherPosResponse_accountingType": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the accounting type",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'AccountingType'",
						"example": "AccountingType"
					}
				},
				"description": "The accounting type to which the position belongs.<br>\r\n     An accounting type is the booking account to which the position belongs.<br>\r\n     For more information, please refer to\r\n     <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a> section."
			},
			"Model_VoucherPosResponse_estimatedAccountingType": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the accounting type",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'AccountingType'",
						"example": "AccountingType"
					}
				},
				"description": "The accounting type to which the position belongs estimated by our voucher recognition.<br>\r\n    An accounting type is the booking account to which the position belongs.<br>\r\n    For more information, please refer to\r\n    <a href='https://api.sevdesk.de/#section/Accounting-type'>this</a> section.",
				"readOnly": true
			},
			"Model_ContactCustomFieldResponse_sevClient": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the client",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'SevClient'",
						"example": "SevClient"
					}
				},
				"description": "Client to which contact field belongs. Will be filled automatically"
			},
			"Model_ContactCustomFieldResponse_contact": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of contact",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Contact'",
						"example": "Contact"
					}
				},
				"description": "name of the contact"
			},
			"Model_Discount_object": {
				"required": [
					"id",
					"objectName"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of the order",
						"example": "0"
					},
					"objectName": {
						"type": "string",
						"description": "Model name, which is 'Order'",
						"example": "Order"
					}
				},
				"description": "The order used for the discount",
				"readOnly": true
			},
			"inline_response_200_15_letterpapers": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "57d7ff34f23ada297d265f21"
					},
					"pdf": {
						"type": "string"
					},
					"sevClient": {
						"type": "string",
						"example": "0"
					},
					"name": {
						"type": "string",
						"example": "Blanko"
					},
					"default": {
						"type": "integer"
					},
					"img": {
						"type": "string"
					}
				}
			},
			"inline_response_201_1_objects": {
				"type": "object",
				"properties": {
					"docId": {
						"type": "string",
						"description": "ID of the (temporary) document."
					},
					"pdfUrl": {
						"type": "string",
						"description": "The url location of the (temporary) document."
					},
					"pages": {
						"type": "integer",
						"description": "The amount of pages of the document."
					}
				}
			},
			"inline_response_200_28_value": {
				"properties": {
					"key": {
						"type": "string",
						"example": "BANK_NUMBER"
					},
					"value": {
						"type": "string",
						"example": "[%BANKNUMBER%]"
					}
				}
			},
			"inline_response_201_2_objects": {
				"type": "object",
				"properties": {
					"filename": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					}
				}
			},
			"inline_response_200_37_templates": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "57986aee6bd2d53306068da1"
					},
					"name": {
						"type": "string",
						"example": "SEVDOC_TEMPLATE_STANDARD"
					},
					"translationCode": {
						"type": "string",
						"example": "SEVDOC_TEMPLATE_STANDARD"
					},
					"sevClient": {
						"type": "string",
						"example": "0"
					},
					"type": {
						"type": "string",
						"example": "Invoice"
					},
					"html": {
						"type": "string"
					},
					"default": {
						"type": "integer"
					},
					"premium": {
						"type": "boolean",
						"example": false
					}
				}
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"x-tagGroups": [
		{
			"name": "Invoices and Receipts",
			"tags": [
				"Invoice",
				"InvoicePos",
				"Voucher",
				"VoucherPos"
			]
		},
		{
			"name": "Contact",
			"tags": [
				"Contact",
				"ContactAddress",
				"CommunicationWay",
				"AccountingContact",
				"ContactField"
			]
		},
		{
			"name": "Payment accounts",
			"tags": [
				"CheckAccount",
				"CheckAccountTransaction"
			]
		},
		{
			"name": "Orders, CreditNotes and Parts",
			"tags": [
				"Order",
				"OrderPos",
				"CreditNote",
				"CreditNotePos",
				"Part"
			]
		},
		{
			"name": "Layouts and Tags",
			"tags": [
				"Layout",
				"Tag"
			]
		},
		{
			"name": "Exports and Reports",
			"tags": [
				"Export",
				"Report"
			]
		}
	]
}